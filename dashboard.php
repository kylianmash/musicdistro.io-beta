<?php
declare(strict_types=1);

require __DIR__ . '/bootstrap.php';
require_authentication();

$siteName = site_name();
$dashboardLogoUrl = dashboard_logo_url();
$siteFaviconUrl = site_favicon_url();
$dashboardTitleTemplate = (string) __('dashboard.title', ['site' => ':site']);
$dashboardBrandAltTemplate = (string) __('dashboard.brand_alt', ['site' => ':site']);
$dashboardFooterTemplateSetting = trim((string) get_setting('dashboard_footer_template'));
$dashboardFooterDefaultTemplate = (string) __('dashboard.footer');
$dashboardFooterTemplate = $dashboardFooterTemplateSetting !== ''
    ? $dashboardFooterTemplateSetting
    : $dashboardFooterDefaultTemplate;
$dashboardFooterContent = str_replace(
    [':year', ':site'],
    [date('Y'), $siteName],
    $dashboardFooterTemplate
);

$user = current_user();
$isSuperAdmin = isset($user['is_super_admin']) && (int) $user['is_super_admin'] === 1;
$impersonatorId = isset($_SESSION['impersonator_id']) ? (int) $_SESSION['impersonator_id'] : 0;
$impersonatorName = trim((string) ($_SESSION['impersonator_name'] ?? ''));
$impersonatorEmail = trim((string) ($_SESSION['impersonator_email'] ?? ''));
$isImpersonating = $impersonatorId > 0;
$impersonatedDisplayName = trim((string) (($user['first_name'] ?? '') . ' ' . ($user['last_name'] ?? '')));
if ($impersonatedDisplayName === '') {
    $impersonatedDisplayName = (string) ($user['email'] ?? '');
}
$impersonatorDisplayName = '';
if ($isImpersonating) {
    if ($impersonatorName !== '') {
        $impersonatorDisplayName = $impersonatorName;
    } elseif ($impersonatorEmail !== '') {
        $impersonatorDisplayName = $impersonatorEmail;
    } else {
        $impersonatorDisplayName = __('dashboard.admin.impersonation.default_admin');
    }
}

$countries = require __DIR__ . '/data-countries.php';
$roles = __d('auth.roles') ?: [];
$dashboardTranslations = __d('dashboard');
$profilePanelTranslations = $dashboardTranslations['profile_panel'] ?? [];
$welcomeTranslations = $dashboardTranslations['welcome'] ?? [];
$cardsTranslations = $dashboardTranslations['cards'] ?? [];
if (isset($cardsTranslations['ai_composer'])) {
    $cardsTranslations['ai_composer']['type'] = 'modal';
    $cardsTranslations['ai_composer']['modal_target'] = 'aiComposerModal';
    unset($cardsTranslations['ai_composer']['href'], $cardsTranslations['ai_composer']['new_tab']);
}
$aiComposerDefaultConfig = [
    'badge' => 'AI Music Copilot',
    'title' => 'Compose with the MusicDistro × Suno Foundry',
    'subtitle' => 'Give the AI clear creative direction — we will stream the render back to your session once Suno finishes processing the job.',
    'tabs' => [
        'generate' => 'AI Writes Lyrics',
        'write' => 'Use My Lyrics',
    ],
    'story' => [
        'label' => 'Tell the AI the story to write',
        'placeholder' => 'Describe the scene, energy, and key lyrics you want.',
        'helper' => 'Mention themes, imagery, or narrative beats. The richer the brief, the better the lyric draft.',
        'default' => 'Write an anthem about chasing neon-soaked dreams through a future city skyline.',
    ],
    'lyrics' => [
        'generate_label' => 'Lyric draft preview',
        'generate_button' => 'Generate lyrics',
        'generate_working' => 'Working…',
        'placeholder' => 'AI generated lyrics will appear here for you to refine.',
        'helper' => 'Edit anything you like — we send your final text to Suno so the vocal matches perfectly.',
        'write_label' => 'Paste your lyrics',
        'write_placeholder' => "Verse 1\nPre-Chorus\nChorus\nBridge",
        'write_helper' => 'Break lines into sections so Suno understands the phrasing you want.',
    ],
    'instrumental' => [
        'label' => 'Instrumental direction',
        'placeholder' => 'Detail the instrumentation, energy, and transitions you want.',
        'helper' => 'Give the AI clear cues about textures, rhythm and arrangement changes.',
        'chips' => [
            'Lush polysynth pads, glittering arpeggios, sidechained supersaw stacks.',
            'Palm-muted guitars, afrobeats percussion, warm sub bass and log drums.',
            'Analog synth basslines, gated snares, nostalgic VHS textures and field noise.',
            'Orchestral swells with hybrid drums, reversed piano motifs, cinematic rises.',
            'Future bass chords, granular vocal chops, detuned bells, rolling 808 glide.',
        ],
    ],
    'styles' => [
        'title' => 'Style Blueprint',
        'helper_prefix' => 'We merge your notes with the preset prompt:',
        'presets' => [
            [
                'id' => 'hyperpop-euphoria',
                'name' => 'Hyperpop Euphoria',
                'description' => 'Crystalline leads, glitchy drums, euphoric drops.',
                'prompt' => 'Explosive hyperpop anthem with shimmering synth leads, glitch drums, and euphoric chorus energy.',
            ],
            [
                'id' => 'afrobeats-sunset',
                'name' => 'Afrobeats Sunset',
                'description' => 'Warm guitars, syncopated percussion, velvet bass.',
                'prompt' => 'Afrobeats groove with palm-muted guitars, syncopated percussion, and a velvet midnight bassline.',
            ],
            [
                'id' => 'cinematic-wave',
                'name' => 'Cinematic Wave',
                'description' => 'Swelling pads, widescreen drums, emotive arcs.',
                'prompt' => 'Cinematic synthwave journey with widescreen pads, emotive arcs, and thunderous halftime drums.',
            ],
            [
                'id' => 'trap-dystopia',
                'name' => 'Neo Trap Dystopia',
                'description' => '808 gravity, ghostly choirs, industrial grit.',
                'prompt' => 'Dark futuristic trap with colossal 808s, ghostly choirs, metallic plucks, and aggressive stabs.',
            ],
        ],
    ],
    'voices' => [
        'title' => 'Voice Palette',
        'presets' => [
            [
                'id' => 'lumen-femme',
                'label' => 'Lumen • Ethereal Femme',
                'description' => 'Glassine soprano presence with modern shimmer.',
            ],
            [
                'id' => 'noir-tenor',
                'label' => 'Noir • Velvet Tenor',
                'description' => 'Smoky tenor ideal for R&B and moody pop.',
            ],
            [
                'id' => 'solstice-duo',
                'label' => 'Solstice • Dual Harmony',
                'description' => 'Layered duet voice for instant call-and-response.',
            ],
            [
                'id' => 'rap-seraph',
                'label' => 'Seraph • Melodic Rapper',
                'description' => 'Expressive rap vocal with melodic inflections.',
            ],
        ],
    ],
    'durations' => [
        'label' => 'Duration (seconds)',
        'values' => [45, 60, 90],
    ],
    'tempo' => [
        'label' => 'Tempo',
        'helper_template' => ':value BPM target',
        'default' => 115,
        'min' => 70,
        'max' => 160,
    ],
    'status' => [
        'default' => 'Generation uses your Suno credits. Jobs appear in the Studio timeline automatically once ready.',
        'lyrics_processing' => 'Calling Suno lyricist…',
        'lyrics_ready' => 'Lyric draft ready — feel free to tweak before rendering.',
        'lyrics_complete' => 'Lyric request completed — check fields for AI suggestions.',
        'processing' => 'Orchestrating your track with Suno…',
        'queued' => 'Track request queued — we will stream the preview once ready.',
    ],
    'errors' => [
        'lyrics' => 'Unable to reach lyric service.',
        'generic' => 'Unable to reach Suno.',
    ],
    'actions' => [
        'reset' => 'Reset',
        'submit' => 'Render with Suno',
        'submitting' => 'Generating…',
    ],
    'result' => [
        'lyrics_title' => 'Latest AI Lyric Draft',
        'preview_title' => 'Preview',
        'job_label' => 'Job #:id',
    ],
];
$aiComposerTranslations = array_replace_recursive($aiComposerDefaultConfig, $dashboardTranslations['ai_composer_modal'] ?? []);
$aiComposerStyles = $aiComposerTranslations['styles']['presets'] ?? [];
$aiComposerVoices = $aiComposerTranslations['voices']['presets'] ?? [];
$aiComposerInstrumentChips = $aiComposerTranslations['instrumental']['chips'] ?? [];
$aiComposerDurations = $aiComposerTranslations['durations']['values'] ?? [45, 60, 90];
$aiComposerDefaultStyle = $aiComposerStyles[0] ?? ['id' => 'hyperpop-euphoria', 'prompt' => 'Explosive hyperpop anthem with shimmering synth leads, glitch drums, and euphoric chorus energy.'];
$aiComposerDefaultStyleId = (string) ($aiComposerDefaultStyle['id'] ?? 'hyperpop-euphoria');
$aiComposerDefaultStylePrompt = (string) ($aiComposerDefaultStyle['prompt'] ?? 'Explosive hyperpop anthem with shimmering synth leads, glitch drums, and euphoric chorus energy.');
$aiComposerDefaultVoice = $aiComposerVoices[0] ?? ['id' => 'lumen-femme'];
$aiComposerDefaultVoiceId = (string) ($aiComposerDefaultVoice['id'] ?? 'lumen-femme');
$aiComposerDefaultInstrumentation = (string) ($aiComposerInstrumentChips[0] ?? 'Lush polysynth pads, glittering arpeggios, sidechained supersaw stacks.');
$aiComposerDefaultBrief = (string) ($aiComposerTranslations['story']['default'] ?? 'Write an anthem about chasing neon-soaked dreams through a future city skyline.');
$aiComposerDefaultDuration = (int) ($aiComposerDurations[1] ?? $aiComposerDurations[0] ?? 60);
$aiComposerTempoConfig = $aiComposerTranslations['tempo'] ?? [];
$aiComposerDefaultTempo = (int) ($aiComposerTempoConfig['default'] ?? 115);
$studioCardSetting = get_setting('dashboard_studio_card_enabled');
$studioCardEnabled = $studioCardSetting === null ? true : $studioCardSetting !== '0';
$dashboardDesignVariant = strtolower((string) get_setting('dashboard_design_variant'));
if (!in_array($dashboardDesignVariant, ['classic', 'vision', 'focus', 'aura'], true)) {
    $dashboardDesignVariant = 'classic';
}
$isAuraDesign = $dashboardDesignVariant === 'aura';
if ($isAuraDesign && isset($cardsTranslations['smartlinks'])) {
    $cardsTranslations['smartlinks']['type'] = 'page';
    $cardsTranslations['smartlinks']['page_target'] = 'smartlinks';
    unset($cardsTranslations['smartlinks']['modal_target']);
}
$cardVisibility = [];
foreach ($cardsTranslations as $cardKey => $cardTranslation) {
    $storedValue = get_setting('dashboard_card_' . $cardKey . '_enabled');
    $cardVisibility[$cardKey] = $storedValue === null ? true : $storedValue !== '0';
}
$visibleCards = array_filter(
    $cardsTranslations,
    static fn ($card, $key) => $cardVisibility[$key] ?? false,
    ARRAY_FILTER_USE_BOTH
);
$notificationsTranslations = $dashboardTranslations['notifications'] ?? [];
$notificationsPanelTranslations = $notificationsTranslations['panel'] ?? [];
$notificationsActionsTranslations = $notificationsTranslations['actions'] ?? [];
$notificationsItemsTranslations = $notificationsTranslations['items'] ?? [];
$cloudModalTranslations = $dashboardTranslations['cloud_modal'] ?? [];
$cloudModalFeatures = $cloudModalTranslations['features'] ?? [];
$cloudModalHighlights = $cloudModalTranslations['highlights'] ?? [];
$cloudModalCtaHref = (string) ($cloudModalTranslations['cta_href'] ?? '/cloud-storage');
$publishingModalTranslations = $dashboardTranslations['publishing_modal'] ?? [];
$publishingModalStats = $publishingModalTranslations['stats'] ?? [];
$publishingModalHighlights = $publishingModalTranslations['highlights'] ?? [];
$adminDesignTranslations = $dashboardTranslations['admin']['design'] ?? [];
$dashboardDesignVariants = [
    'classic' => [
        'title' => (string) ($adminDesignTranslations['variants']['classic']['title'] ?? 'Classic'),
        'description' => (string) ($adminDesignTranslations['variants']['classic']['description'] ?? ''),
        'highlights' => $adminDesignTranslations['variants']['classic']['highlights'] ?? [],
    ],
    'vision' => [
        'title' => (string) ($adminDesignTranslations['variants']['vision']['title'] ?? 'Vision'),
        'description' => (string) ($adminDesignTranslations['variants']['vision']['description'] ?? ''),
        'highlights' => $adminDesignTranslations['variants']['vision']['highlights'] ?? [],
    ],
    'focus' => [
        'title' => (string) ($adminDesignTranslations['variants']['focus']['title'] ?? 'Focus'),
        'description' => (string) ($adminDesignTranslations['variants']['focus']['description'] ?? ''),
        'highlights' => $adminDesignTranslations['variants']['focus']['highlights'] ?? [],
    ],
    'aura' => [
        'title' => (string) ($adminDesignTranslations['variants']['aura']['title'] ?? 'Aura'),
        'description' => (string) ($adminDesignTranslations['variants']['aura']['description'] ?? ''),
        'highlights' => $adminDesignTranslations['variants']['aura']['highlights'] ?? [],
    ],
    
];
$dashboardDesignVariantTitles = [];
foreach ($dashboardDesignVariants as $variantKey => $variantConfig) {
    $dashboardDesignVariantTitles[$variantKey] = (string) ($variantConfig['title'] ?? ucfirst((string) $variantKey));
}
$dashboardDesignVariantLabelsJson = json_encode($dashboardDesignVariantTitles, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
if (!is_string($dashboardDesignVariantLabelsJson)) {
    $dashboardDesignVariantLabelsJson = '{}';
}
$publishingModalRoyalties = $publishingModalTranslations['royalties']['points'] ?? [];
$publishingModalPricingCards = $publishingModalTranslations['pricing']['cards'] ?? [];
$publishingPrimaryCtaLabel = (string) ($publishingModalTranslations['cta_primary']['label'] ?? 'Get started now');
$publishingHeroHighlight = (string) ($publishingModalTranslations['hero_highlight'] ?? '');
$publishingFootnote = (string) ($publishingModalTranslations['footnote'] ?? '');
$publishingTestimonial = $publishingModalTranslations['testimonial'] ?? [];
$publishingTestimonialLabel = (string) ($publishingTestimonial['label'] ?? '');
$publishingTestimonialQuote = (string) ($publishingTestimonial['quote'] ?? '');
$publishingTestimonialAuthor = (string) ($publishingTestimonial['author'] ?? '');
$musicDistributionModalTranslations = $dashboardTranslations['musicdistribution_modal'] ?? [];
$musicDistributionFeatures = $musicDistributionModalTranslations['features'] ?? [];
$musicDistributionCtaHref = (string) ($musicDistributionModalTranslations['cta_href'] ?? '/generate-token/');
$expressModalTranslations = $dashboardTranslations['express_modal'] ?? [];
$adminTranslations = $dashboardTranslations['admin'] ?? [];
$adminTableTranslations = $adminTranslations['table'] ?? [];
$adminTableHeaders = $adminTableTranslations['headers'] ?? [];
if ($adminTableHeaders) {
    $adminTableHeaders = array_filter(
        $adminTableHeaders,
        static fn ($key) => !in_array((string) $key, ['country', 'last_login_ip'], true),
        ARRAY_FILTER_USE_KEY
    );
}
$adminTableStatus = $adminTableTranslations['status'] ?? [];
$adminTableActions = $adminTableTranslations['actions'] ?? [];
$adminTableConfirm = $adminTableTranslations['confirm'] ?? [];
$adminTableFeedback = $adminTableTranslations['feedback'] ?? [];
$adminStripeTranslations = $adminTranslations['stripe'] ?? [];
$adminMonetizationTranslations = $adminTranslations['monetization'] ?? [];
$adminUserModalTranslations = $adminTranslations['user_modal'] ?? [];
$adminImpersonationTranslations = $adminTranslations['impersonation'] ?? [];
$adminNewsletterTranslations = $adminTranslations['newsletter'] ?? [];
$adminCompanyTypeLabels = $adminUserModalTranslations['company_types'] ?? [];
if (is_array($adminStripeTranslations) && $adminMonetizationTranslations) {
    $adminStripeTranslations['monetization'] = $adminMonetizationTranslations;
}
$checkoutTranslations = $dashboardTranslations['checkout'] ?? [];
$footerTranslation = $dashboardTranslations['footer'] ?? '';
$dashboardJsTranslations = $dashboardTranslations['js'] ?? [];
$sidebarTranslations = $dashboardTranslations['sidebar'] ?? [];
$sidebarLinkTranslations = $sidebarTranslations['links'] ?? [];
$dashboardSidebarLinks = [
    [
        'id' => 'overview',
        'type' => 'anchor',
        'href' => '#overview',
        'icon' => 'sparkles',
        'label' => (string) ($sidebarLinkTranslations['overview']['label'] ?? 'Overview'),
        'description' => (string) ($sidebarLinkTranslations['overview']['description'] ?? ''),
        'hidden' => false,
    ],
    [
        'id' => 'studio',
        'type' => 'anchor',
        'href' => '#studio',
        'icon' => 'wave',
        'label' => (string) ($sidebarLinkTranslations['studio']['label'] ?? 'Studio'),
        'description' => (string) ($sidebarLinkTranslations['studio']['description'] ?? ''),
        'hidden' => !$studioCardEnabled,
    ],
    [
        'id' => 'distribution',
        'type' => 'modal',
        'target' => 'musicDistributionModal',
        'icon' => 'globe',
        'label' => (string) ($sidebarLinkTranslations['distribution']['label'] ?? 'Distribution'),
        'description' => (string) ($sidebarLinkTranslations['distribution']['description'] ?? ''),
        'service_url' => (string) ($cardsTranslations['distribution']['service_url'] ?? ''),
        'hidden' => empty($visibleCards['distribution']),
    ],
    [
        'id' => 'royalties',
        'type' => 'modal',
        'target' => 'royaltiesModal',
        'icon' => 'stars',
        'label' => (string) ($sidebarLinkTranslations['royalties']['label'] ?? 'Royalties'),
        'description' => (string) ($sidebarLinkTranslations['royalties']['description'] ?? ''),
        'hidden' => empty($visibleCards['royalties']),
    ],
    [
        'id' => 'payments',
        'type' => 'modal',
        'target' => 'paymentsModal',
        'icon' => 'credit-card',
        'label' => (string) ($sidebarLinkTranslations['payments']['label'] ?? 'Billing'),
        'description' => (string) ($sidebarLinkTranslations['payments']['description'] ?? ''),
        'hidden' => empty($visibleCards['payments']),
    ],
    [
        'id' => 'profile',
        'type' => 'profile',
        'icon' => 'user',
        'label' => (string) ($sidebarLinkTranslations['profile']['label'] ?? 'Profile'),
        'description' => (string) ($sidebarLinkTranslations['profile']['description'] ?? ''),
        'hidden' => false,
    ],
];
if ($isAuraDesign && $isSuperAdmin) {
    $adminSidebarLabel = (string) ($sidebarLinkTranslations['admin']['label'] ?? ($adminTranslations['title'] ?? 'Administration'));
    $adminSidebarDescription = (string) ($sidebarLinkTranslations['admin']['description'] ?? ($adminTranslations['subtitle'] ?? ''));
    $dashboardSidebarLinks[] = [
        'id' => 'admin',
        'type' => 'page',
        'target' => 'admin',
        'icon' => 'settings',
        'label' => $adminSidebarLabel,
        'description' => $adminSidebarDescription,
        'hidden' => false,
    ];
}
$dashboardSidebarLinks = array_values(array_filter(
    $dashboardSidebarLinks,
    static fn ($link) => empty($link['hidden'])
));
$languageOptions = available_languages();
$allLanguages = all_languages();
$languagesMultilingualSetting = get_setting('languages_multilingual_enabled');
$languagesMultilingualEnabled = $languagesMultilingualSetting === null ? true : $languagesMultilingualSetting !== '0';
$languagesAutoDetectSetting = get_setting('languages_auto_detect_enabled');
$languagesAutoDetectEnabled = $languagesAutoDetectSetting === null ? true : $languagesAutoDetectSetting !== '0';
$languagesEnabledSetting = get_setting('languages_enabled_list');
$languageEnabledSet = [];

$currencySettings = currency_settings();
$defaultCurrencyCode = $currencySettings['default'] ?? 'eur';
$currencyAllowUserChoice = $currencySettings['allow_user_choice'] ?? false;
$currencyEnabledList = $currencySettings['enabled'] ?? [$defaultCurrencyCode];
$userCurrencyCode = user_currency($user);
$defaultCurrencySymbol = currency_symbol($defaultCurrencyCode);
$userCurrencySymbol = currency_symbol($userCurrencyCode);
$currencyRates = $userCurrencyCode === $defaultCurrencyCode ? [] : currency_exchange_rates($defaultCurrencyCode);
$userCurrencyRate = $currencyRates[$userCurrencyCode] ?? null;
$hasUserCurrencyRate = $userCurrencyCode !== $defaultCurrencyCode
    && is_numeric($userCurrencyRate)
    && (float) $userCurrencyRate > 0;

$userCurrencyConversionAvailable = $hasUserCurrencyRate;

if (!$userCurrencyConversionAvailable && $userCurrencyCode !== $defaultCurrencyCode) {
    $sampleAmountCents = 10000;
    $sampleConversion = convert_currency_amount($sampleAmountCents, $defaultCurrencyCode, $userCurrencyCode);
    $userCurrencyConversionAvailable = $sampleConversion > 0 && $sampleConversion !== $sampleAmountCents;
}

$activeCurrencySymbol = $userCurrencyConversionAvailable ? $userCurrencySymbol : $defaultCurrencySymbol;
$allCurrencyOptions = stripe_supported_currencies();
$currencyOptionLabels = [];
foreach ($allCurrencyOptions as $currencyCode) {
    $currencyOptionLabels[$currencyCode] = strtoupper($currencyCode) . ' (' . currency_symbol($currencyCode) . ')';
}

if ($languagesEnabledSetting !== null && trim($languagesEnabledSetting) !== '') {
    try {
        $decodedLanguages = json_decode($languagesEnabledSetting, true, 512, JSON_THROW_ON_ERROR);
        if (is_array($decodedLanguages)) {
            foreach ($decodedLanguages as $code) {
                if (!is_string($code)) {
                    continue;
                }
                $normalized = strtolower(trim($code));
                if ($normalized === '' || !array_key_exists($normalized, $allLanguages)) {
                    continue;
                }
                $languageEnabledSet[$normalized] = true;
            }
        }
    } catch (JsonException $exception) {
        $languageEnabledSet = [];
    }
}

$defaultLanguageSetting = get_setting('languages_default');
if (!is_string($defaultLanguageSetting) || $defaultLanguageSetting === '' || !array_key_exists(strtolower($defaultLanguageSetting), $allLanguages)) {
    $defaultLanguageSetting = array_key_first($allLanguages) ?? 'en';
}
$defaultLanguageSetting = strtolower((string) $defaultLanguageSetting);
if (!array_key_exists($defaultLanguageSetting, $allLanguages)) {
    $defaultLanguageSetting = 'en';
}
if (!array_key_exists($defaultLanguageSetting, $allLanguages)) {
    $defaultLanguageSetting = array_key_first($allLanguages) ?: 'en';
}

if (!$languageEnabledSet) {
    foreach ($allLanguages as $code => $_meta) {
        $languageEnabledSet[$code] = true;
    }
}

if (!isset($languageEnabledSet[$defaultLanguageSetting])) {
    $languageEnabledSet[$defaultLanguageSetting] = true;
}

$languageAdminStates = [];
$languageEnabledCodes = [];
foreach ($allLanguages as $code => $_meta) {
    $isEnabled = $languageEnabledSet[$code] ?? false;
    if ($code === $defaultLanguageSetting) {
        $isEnabled = true;
    }
    $languageAdminStates[$code] = $isEnabled;
    if ($isEnabled) {
        $languageEnabledCodes[] = $code;
    }
}

$languageOptionsCount = count($languageOptions);
$singleLanguageAvailable = $languageOptionsCount <= 1;
$currentProfileLanguage = $user['language'] ?? $defaultLanguageSetting;
if (!is_string($currentProfileLanguage) || $currentProfileLanguage === '' || !isset($languageOptions[$currentProfileLanguage])) {
    $currentProfileLanguage = array_key_first($languageOptions) ?: $defaultLanguageSetting;
}
$profileLanguageDirection = language_direction($currentProfileLanguage);
$defaultLanguageDirection = language_direction($defaultLanguageSetting);

$flashMessages = get_flashes();

$notificationsEnabledSetting = get_setting('dashboard_notifications_enabled');
$notificationsEnabled = $notificationsEnabledSetting === null ? true : $notificationsEnabledSetting !== '0';
$notificationsProfileReminderSetting = get_setting('dashboard_notifications_auto_profile_completion');
$notificationsProfileReminderEnabled = $notificationsProfileReminderSetting === null
    ? true
    : $notificationsProfileReminderSetting !== '0';

$sunoApiKeySetting = get_setting('suno_api_key');
$sunoApiKeyValue = is_string($sunoApiKeySetting) ? trim($sunoApiKeySetting) : '';
$sunoApiKeyConfigured = $sunoApiKeyValue !== '';

$stripeSecretKey = get_setting('stripe_secret_key') ?? '';
$stripePublishableKey = get_setting('stripe_publishable_key') ?? '';
$distributionProvider = distribution_dashboard_provider();
$sonosuiteBaseUrlSetting = sonosuite_base_url();
$sonosuiteSharedSecretSetting = sonosuite_shared_secret();

$normalizeStoredPrice = static function (?string $value, int $fallback): int {
    if ($value === null) {
        return $fallback;
    }

    $trimmed = trim($value);

    if ($trimmed === '') {
        return $fallback;
    }

    if (!is_numeric($trimmed)) {
        return $fallback;
    }

    $amount = (int) $trimmed;

    return $amount > 0 ? $amount : $fallback;
};

$masteringPaymentsSetting = get_setting('mastering_payments_enabled');
$masteringPaymentsEnabled = $masteringPaymentsSetting === null ? true : $masteringPaymentsSetting !== '0';
$masteringSinglePriceCents = $normalizeStoredPrice(get_setting('mastering_price_single'), 900);
$masteringYearlyPriceCents = $normalizeStoredPrice(get_setting('mastering_price_yearly'), 10800);
$expressSinglePriceCents = $normalizeStoredPrice(get_setting('express_delivery_price_single'), 3900);
$expressEpPriceCents = $normalizeStoredPrice(get_setting('express_delivery_price_ep'), 6900);
$expressAlbumPriceCents = $normalizeStoredPrice(get_setting('express_delivery_price_album'), 9900);

$formatAmountString = static function (int $cents, string $currency): string {
    return format_currency_amount($cents, $currency);
};

$splitAmountParts = static function (int $cents, string $currency): array {
    $minorUnit = currency_minor_unit($currency);
    $divisor = (float) pow(10, $minorUnit);
    $value = $cents / ($divisor > 0 ? $divisor : 1);
    $formatted = number_format($value, $minorUnit, '.', ' ');
    if ($minorUnit > 0) {
        $formatted = rtrim(rtrim($formatted, '0'), '.');
    }

    $main = $formatted;
    $decimal = '';

    if ($minorUnit > 0 && strpos($formatted, '.') !== false) {
        [$main, $decimalPart] = explode('.', $formatted, 2);
        $decimal = $decimalPart !== '' ? '.' . $decimalPart : '';
    }

    return [
        'symbol' => currency_symbol($currency),
        'main' => $main,
        'decimal' => $decimal,
    ];
};

$convertToUserCurrency = static function (int $amountCents) use (
    $defaultCurrencyCode,
    $userCurrencyCode,
    $currencyRates,
    $userCurrencyConversionAvailable
): array {
    $normalizedAmount = max(0, $amountCents);

    if ($normalizedAmount <= 0) {
        return [$normalizedAmount, $defaultCurrencyCode];
    }

    if (!$userCurrencyConversionAvailable) {
        return [$normalizedAmount, $defaultCurrencyCode];
    }

    $converted = convert_currency_amount($normalizedAmount, $defaultCurrencyCode, $userCurrencyCode, $currencyRates);

    if ($converted <= 0) {
        $fallbackConverted = convert_currency_amount($normalizedAmount, $defaultCurrencyCode, $userCurrencyCode);

        if ($fallbackConverted <= 0) {
            return [$normalizedAmount, $defaultCurrencyCode];
        }

        return [$fallbackConverted, $userCurrencyCode];
    }

    return [$converted, $userCurrencyCode];
};

$formatPriceInputValue = static function (int $cents) use ($defaultCurrencyCode): string {
    $minorUnit = currency_minor_unit($defaultCurrencyCode);
    $divisor = (float) pow(10, $minorUnit);
    $value = $cents / ($divisor > 0 ? $divisor : 1);
    $formatted = number_format($value, $minorUnit, '.', '');

    if ($minorUnit > 0) {
        $formatted = rtrim(rtrim($formatted, '0'), '.');
    }

    return $formatted !== '' ? $formatted : '0';
};

$masteringSingleConversion = $convertToUserCurrency($masteringSinglePriceCents);
$masteringSinglePriceUserCents = $masteringSingleConversion[0];
$masteringSinglePriceCurrency = $masteringSingleConversion[1];
$masteringYearlyConversion = $convertToUserCurrency($masteringYearlyPriceCents);
$masteringYearlyPriceUserCents = $masteringYearlyConversion[0];
$masteringYearlyPriceCurrency = $masteringYearlyConversion[1];
$expressSingleConversion = $convertToUserCurrency($expressSinglePriceCents);
$expressSinglePriceUserCents = $expressSingleConversion[0];
$expressSinglePriceCurrency = $expressSingleConversion[1];
$expressEpConversion = $convertToUserCurrency($expressEpPriceCents);
$expressEpPriceUserCents = $expressEpConversion[0];
$expressEpPriceCurrency = $expressEpConversion[1];
$expressAlbumConversion = $convertToUserCurrency($expressAlbumPriceCents);
$expressAlbumPriceUserCents = $expressAlbumConversion[0];
$expressAlbumPriceCurrency = $expressAlbumConversion[1];
$masteringYearlyPriceMonthlyUserCents = $masteringYearlyPriceUserCents > 0
    ? (int) ceil($masteringYearlyPriceUserCents / 12)
    : 0;

$masteringSinglePriceDisplay = $formatAmountString($masteringSinglePriceUserCents, $masteringSinglePriceCurrency);
$masteringYearlyPriceDisplay = $formatAmountString($masteringYearlyPriceUserCents, $masteringYearlyPriceCurrency);
$masteringYearlyPriceMonthlyDisplay = $formatAmountString($masteringYearlyPriceMonthlyUserCents, $masteringYearlyPriceCurrency);
$expressSinglePriceDisplay = $expressSinglePriceCents > 0
    ? $formatAmountString($expressSinglePriceUserCents, $expressSinglePriceCurrency)
    : '';
$expressEpPriceDisplay = $expressEpPriceCents > 0
    ? $formatAmountString($expressEpPriceUserCents, $expressEpPriceCurrency)
    : '';
$expressAlbumPriceDisplay = $expressAlbumPriceCents > 0
    ? $formatAmountString($expressAlbumPriceUserCents, $expressAlbumPriceCurrency)
    : '';
$masteringSinglePriceInputValue = $formatPriceInputValue($masteringSinglePriceCents);
$masteringYearlyPriceInputValue = $formatPriceInputValue($masteringYearlyPriceCents);
$expressSinglePriceInputValue = $formatPriceInputValue($expressSinglePriceCents);
$expressEpPriceInputValue = $formatPriceInputValue($expressEpPriceCents);
$expressAlbumPriceInputValue = $formatPriceInputValue($expressAlbumPriceCents);
$masteringSingleLabel = __('dashboard.mastering_modal.checkout.single.label', ['price' => $masteringSinglePriceDisplay]);
$masteringSubscriptionLabel = __('dashboard.mastering_modal.checkout.subscription.label', [
    'price_month' => $masteringYearlyPriceMonthlyDisplay,
    'price_year' => $masteringYearlyPriceDisplay,
]);
$masteringDownloadLabel = __('dashboard.mastering_modal.download.label');

$publishingSetupPriceCents = $normalizeStoredPrice(get_setting('publishing_setup_price'), 7500);
$publishingConversion = $convertToUserCurrency($publishingSetupPriceCents);
$publishingSetupPriceUserCents = $publishingConversion[0];
$publishingSetupPriceCurrency = $publishingConversion[1];
$publishingSetupPriceDisplay = $publishingSetupPriceCents > 0
    ? $formatAmountString($publishingSetupPriceUserCents, $publishingSetupPriceCurrency)
    : '';
$publishingSetupPriceInputValue = $formatPriceInputValue($publishingSetupPriceCents);
$expressOptions = [
    'single' => [
        'plan' => 'express_single',
        'price_display' => $expressSinglePriceDisplay,
        'available' => $expressSinglePriceCents > 0,
        'currency' => $expressSinglePriceCurrency,
        'user_amount_cents' => $expressSinglePriceUserCents,
        'base_amount_cents' => $expressSinglePriceCents,
    ],
    'ep' => [
        'plan' => 'express_ep',
        'price_display' => $expressEpPriceDisplay,
        'available' => $expressEpPriceCents > 0,
        'currency' => $expressEpPriceCurrency,
        'user_amount_cents' => $expressEpPriceUserCents,
        'base_amount_cents' => $expressEpPriceCents,
    ],
    'album' => [
        'plan' => 'express_album',
        'price_display' => $expressAlbumPriceDisplay,
        'available' => $expressAlbumPriceCents > 0,
        'currency' => $expressAlbumPriceCurrency,
        'user_amount_cents' => $expressAlbumPriceUserCents,
        'base_amount_cents' => $expressAlbumPriceCents,
    ],
];

$royaltiesMonthlyBaseCents = 999;
$royaltiesYearlyBaseCents = 9900;
$royaltiesMonthlyConversion = $convertToUserCurrency($royaltiesMonthlyBaseCents);
$royaltiesMonthlyUserCents = $royaltiesMonthlyConversion[0];
$royaltiesMonthlyCurrency = $royaltiesMonthlyConversion[1];
$royaltiesYearlyConversion = $convertToUserCurrency($royaltiesYearlyBaseCents);
$royaltiesYearlyUserCents = $royaltiesYearlyConversion[0];
$royaltiesYearlyCurrency = $royaltiesYearlyConversion[1];
$royaltiesMonthlyParts = $splitAmountParts($royaltiesMonthlyUserCents, $royaltiesMonthlyCurrency);
$royaltiesYearlyParts = $splitAmountParts($royaltiesYearlyUserCents, $royaltiesYearlyCurrency);

if (isset($dashboardTranslations['royalties_modal']['plans']['monthly'])) {
    $dashboardTranslations['royalties_modal']['plans']['monthly']['currency'] = $royaltiesMonthlyParts['symbol'];
    $dashboardTranslations['royalties_modal']['plans']['monthly']['price_main'] = $royaltiesMonthlyParts['main'];
    $dashboardTranslations['royalties_modal']['plans']['monthly']['price_decimal'] = $royaltiesMonthlyParts['decimal'];
}

if (isset($dashboardTranslations['royalties_modal']['plans']['yearly'])) {
    $dashboardTranslations['royalties_modal']['plans']['yearly']['currency'] = $royaltiesYearlyParts['symbol'];
    $dashboardTranslations['royalties_modal']['plans']['yearly']['price_main'] = $royaltiesYearlyParts['main'];
    $dashboardTranslations['royalties_modal']['plans']['yearly']['price_decimal'] = $royaltiesYearlyParts['decimal'];
}

if ($publishingSetupPriceDisplay !== '' && isset($publishingModalPricingCards[0])) {
    $publishingModalPricingCards[0]['value'] = $publishingSetupPriceDisplay;
}

if ($publishingSetupPriceDisplay !== ''
    && isset($dashboardTranslations['publishing_modal']['pricing']['cards'][0]['value'])
) {
    $dashboardTranslations['publishing_modal']['pricing']['cards'][0]['value'] = $publishingSetupPriceDisplay;
}

$cloudUsageSetting = get_setting('cloud_storage_usage_enabled');
$cloudUsageEnabled = $cloudUsageSetting !== null ? $cloudUsageSetting !== '0' : false;
$cloudPricePerMbSetting = get_setting('cloud_storage_price_per_mb');
$cloudPricePerMbCents = $cloudPricePerMbSetting !== null ? $normalizeStoredPrice($cloudPricePerMbSetting, 0) : 0;
$cloudPricePerMbInputValue = ($cloudPricePerMbSetting !== null && $cloudPricePerMbCents > 0)
    ? $formatPriceInputValue($cloudPricePerMbCents)
    : '';
$cloudPricePerFileSetting = get_setting('cloud_storage_price_per_file');
$cloudPricePerFileCents = $cloudPricePerFileSetting !== null ? $normalizeStoredPrice($cloudPricePerFileSetting, 0) : 0;
$cloudPricePerFileInputValue = ($cloudPricePerFileSetting !== null && $cloudPricePerFileCents > 0)
    ? $formatPriceInputValue($cloudPricePerFileCents)
    : '';
$cloudSubscriptionSetting = get_setting('cloud_storage_subscription_enabled');
$cloudSubscriptionEnabled = $cloudSubscriptionSetting !== null ? $cloudSubscriptionSetting !== '0' : false;
$cloudSubscriptionPriceSetting = get_setting('cloud_storage_subscription_price');
$cloudSubscriptionPriceCents = $cloudSubscriptionPriceSetting !== null ? $normalizeStoredPrice($cloudSubscriptionPriceSetting, 0) : 0;
$cloudSubscriptionPriceInputValue = ($cloudSubscriptionPriceSetting !== null && $cloudSubscriptionPriceCents > 0)
    ? $formatPriceInputValue($cloudSubscriptionPriceCents)
    : '';
$cloudSubscriptionStorageSetting = get_setting('cloud_storage_subscription_storage_mb');
$cloudSubscriptionStorageMb = $cloudSubscriptionStorageSetting !== null && trim((string) $cloudSubscriptionStorageSetting) !== ''
    ? max(0, (int) $cloudSubscriptionStorageSetting)
    : 0;
$cloudSubscriptionStorageInputValue = $cloudSubscriptionStorageMb > 0 ? (string) $cloudSubscriptionStorageMb : '';
$cloudPricePerMbUserCents = 0;
$cloudPricePerMbCurrency = $defaultCurrencyCode;
if ($cloudPricePerMbCents > 0) {
    [$cloudPricePerMbUserCents, $cloudPricePerMbCurrency] = $convertToUserCurrency($cloudPricePerMbCents);
}
$cloudPricePerFileUserCents = 0;
$cloudPricePerFileCurrency = $defaultCurrencyCode;
if ($cloudPricePerFileCents > 0) {
    [$cloudPricePerFileUserCents, $cloudPricePerFileCurrency] = $convertToUserCurrency($cloudPricePerFileCents);
}
$cloudSubscriptionPriceUserCents = 0;
$cloudSubscriptionPriceCurrency = $defaultCurrencyCode;
if ($cloudSubscriptionPriceCents > 0) {
    [$cloudSubscriptionPriceUserCents, $cloudSubscriptionPriceCurrency] = $convertToUserCurrency($cloudSubscriptionPriceCents);
}
$cloudPricePerMbDisplay = $cloudPricePerMbUserCents > 0
    ? $formatAmountString($cloudPricePerMbUserCents, $cloudPricePerMbCurrency)
    : '';
$cloudPricePerFileDisplay = $cloudPricePerFileUserCents > 0
    ? $formatAmountString($cloudPricePerFileUserCents, $cloudPricePerFileCurrency)
    : '';
$cloudSubscriptionPriceDisplay = $cloudSubscriptionPriceUserCents > 0
    ? $formatAmountString($cloudSubscriptionPriceUserCents, $cloudSubscriptionPriceCurrency)
    : '';
$cloudSubscriptionStorageDisplay = $cloudSubscriptionStorageMb > 0
    ? number_format($cloudSubscriptionStorageMb, 0, '.', ' ')
    : '';
$cloudUsagePricingEnabled = $cloudUsageEnabled && $cloudPricePerMbCents > 0 && $cloudPricePerFileCents > 0;
$cloudSubscriptionPricingEnabled = $cloudSubscriptionEnabled && $cloudSubscriptionPriceCents > 0 && $cloudSubscriptionStorageMb > 0;
$cloudPricingEnabled = $cloudUsagePricingEnabled || $cloudSubscriptionPricingEnabled;
$cloudUsagePriceCopy = $cloudUsagePricingEnabled
    ? __('dashboard.cloud_modal.pricing.usage.value', [
        'price_mb' => $cloudPricePerMbDisplay,
        'price_file' => $cloudPricePerFileDisplay,
    ])
    : '';
$cloudSubscriptionStorageUnit = __('dashboard.cloud_modal.pricing.subscription.storage_unit');
$cloudSubscriptionPriceCopy = $cloudSubscriptionPricingEnabled
    ? __('dashboard.cloud_modal.pricing.subscription.value', [
        'price' => $cloudSubscriptionPriceDisplay,
        'storage' => $cloudSubscriptionStorageDisplay,
        'unit' => $cloudSubscriptionStorageUnit,
    ])
    : '';

$checkoutStatus = isset($_GET['checkout']) ? strtolower(trim((string) $_GET['checkout'])) : '';
$masteringCheckout = isset($_GET['mastering']) ? strtolower(trim((string) $_GET['mastering'])) : '';

if ($checkoutStatus === 'success') {
    $plan = isset($_GET['plan']) ? strtolower(trim((string) $_GET['plan'])) : '';
    $message = $checkoutTranslations['success'] ?? __('dashboard.checkout.success');
    if ($masteringCheckout !== '') {
        $message = __('dashboard.mastering_modal.checkout.success_' . $masteringCheckout) ?: $message;
    } elseif ($plan !== '') {
        $message = __(
            'dashboard.checkout.success_plan',
            ['plan' => $plan === 'yearly' ? __('dashboard.royalties_modal.plans.yearly.label') : __('dashboard.royalties_modal.plans.monthly.label')]
        );
    }
    flash('success', (string) $message);
} elseif ($checkoutStatus === 'cancel') {
    $message = $checkoutTranslations['cancel'] ?? __('dashboard.checkout.cancel');
    if ($masteringCheckout !== '') {
        $message = __('dashboard.mastering_modal.checkout.cancel_' . $masteringCheckout) ?: $message;
    }
    flash('error', (string) $message);
}

$flashMessages = array_merge_recursive(get_flashes(), $flashMessages);
$adminUsers = [];

if ($isSuperAdmin) {
    $statement = $pdo->query('SELECT id, email, first_name, last_name, country, role, language, created_at, created_ip, last_login_ip, last_login_at, is_verified, is_super_admin, is_blocked, address_line1, address_line2, postal_code, city, phone_number, company_type, company_name, company_vat FROM users ORDER BY datetime(created_at) DESC');
    while ($row = $statement->fetch()) {
        $createdAt = '–';
        if (!empty($row['created_at'])) {
            try {
                $createdAt = (new DateTimeImmutable($row['created_at']))->format('d/m/Y H:i');
            } catch (Exception $exception) {
                $createdAt = $row['created_at'];
            }
        }

        $lastLoginAt = '–';
        if (!empty($row['last_login_at'])) {
            try {
                $lastLoginAt = (new DateTimeImmutable($row['last_login_at']))->format('d/m/Y H:i');
            } catch (Exception $exception) {
                $lastLoginAt = $row['last_login_at'];
            }
        }

        $fullName = trim(($row['first_name'] ?? '') . ' ' . ($row['last_name'] ?? ''));
        $displayName = $fullName !== '' ? $fullName : ($row['email'] ?? '');

        $languageCode = (string) ($row['language'] ?? '');
        if ($languageCode === '') {
            $languageCode = (string) ($user['language'] ?? current_language());
        }
        if ($languageCode === '') {
            $languageCode = 'en';
        }
        $languageLabel = $languageOptions[$languageCode]['native'] ?? ($languageOptions[$languageCode]['label'] ?? strtoupper($languageCode));

        $addressLine1 = trim((string) ($row['address_line1'] ?? ''));
        $addressLine2 = trim((string) ($row['address_line2'] ?? ''));
        $postalCode = trim((string) ($row['postal_code'] ?? ''));
        $city = trim((string) ($row['city'] ?? ''));
        $phoneNumber = trim((string) ($row['phone_number'] ?? ''));
        $companyType = trim((string) ($row['company_type'] ?? 'individual'));
        if ($companyType === '') {
            $companyType = 'individual';
        }
        $companyName = trim((string) ($row['company_name'] ?? ''));
        $companyVat = trim((string) ($row['company_vat'] ?? ''));
        $companyTypeLabel = $adminCompanyTypeLabels[$companyType] ?? ($companyType === 'company' ? 'Company' : 'Individual');

        $isRowVerified = isset($row['is_verified']) && (int) $row['is_verified'] === 1;
        $isRowSuperAdmin = isset($row['is_super_admin']) && (int) $row['is_super_admin'] === 1;
        $isRowBlocked = isset($row['is_blocked']) && (int) $row['is_blocked'] === 1;

        $statusParts = [];
        $statusParts[] = $adminTableStatus[$isRowVerified ? 'verified' : 'pending'] ?? ($isRowVerified ? 'Verified' : 'Pending');
        if ($isRowBlocked) {
            $statusParts[] = $adminTableStatus['blocked'] ?? 'Blocked';
        }
        if ($isRowSuperAdmin) {
            $statusParts[] = $adminTableStatus['super_admin'] ?? 'Super admin';
        }
        $statusLabel = implode(' • ', array_filter($statusParts));

        $adminUsers[] = [
            'id' => (int) $row['id'],
            'full_name' => $fullName,
            'display_name' => $displayName,
            'email' => $row['email'] ?? '',
            'role' => $row['role'] ?? '',
            'role_label' => $roles[$row['role']] ?? ($row['role'] ?? ''),
            'country_label' => $countries[$row['country']] ?? ($row['country'] ?? ''),
            'language_code' => $languageCode,
            'language_label' => $languageLabel,
            'created_at' => $createdAt,
            'created_at_raw' => $row['created_at'] ?? '',
            'created_ip' => $row['created_ip'] ?: '–',
            'created_ip_raw' => $row['created_ip'] ?? '',
            'last_login_at' => $lastLoginAt,
            'last_login_at_raw' => $row['last_login_at'] ?? '',
            'last_login_ip' => $row['last_login_ip'] ?: '–',
            'last_login_ip_raw' => $row['last_login_ip'] ?? '',
            'address_line1' => $addressLine1,
            'address_line2' => $addressLine2,
            'postal_code' => $postalCode,
            'city' => $city,
            'phone_number' => $phoneNumber,
            'company_type' => $companyType,
            'company_type_label' => $companyTypeLabel,
            'company_name' => $companyName,
            'company_vat' => $companyVat,
            'is_verified' => $isRowVerified,
            'is_super_admin' => $isRowSuperAdmin,
            'is_blocked' => $isRowBlocked,
            'status_label' => $statusLabel,
        ];
    }
}

$profileAddressLine1 = trim((string) ($user['address_line1'] ?? ''));
$profileAddressLine2 = trim((string) ($user['address_line2'] ?? ''));
$profilePostalCode = trim((string) ($user['postal_code'] ?? ''));
$profileCity = trim((string) ($user['city'] ?? ''));
$profilePhoneNumber = trim((string) ($user['phone_number'] ?? ''));
$profileCountry = trim((string) ($user['country'] ?? ''));
$profileCurrencyOptions = [];
foreach ($currencyEnabledList as $code) {
    $profileCurrencyOptions[$code] = $currencyOptionLabels[$code] ?? strtoupper($code);
}
if (!isset($profileCurrencyOptions[$userCurrencyCode])) {
    $profileCurrencyOptions[$userCurrencyCode] = $currencyOptionLabels[$userCurrencyCode] ?? strtoupper($userCurrencyCode);
}
$showCurrencySelector = $currencyAllowUserChoice && count($profileCurrencyOptions) > 1;
$currentBusinessType = trim((string) ($user['company_type'] ?? 'individual'));
if ($currentBusinessType !== 'company') {
    $currentBusinessType = 'individual';
}
$profileCompanyName = trim((string) ($user['company_name'] ?? ''));
$profileCompanyVat = trim((string) ($user['company_vat'] ?? ''));
$profileBusinessOptions = $profilePanelTranslations['business_type_options'] ?? [];

$notificationsActionOpenProfile = (string) ($notificationsActionsTranslations['open_profile'] ?? __('dashboard.notifications.actions.open_profile'));
$dashboardNotifications = [];
$missingProfileFields = [];

if ($profileAddressLine1 === '') {
    $missingProfileFields[] = 'address';
}

if ($profileCountry === '') {
    $missingProfileFields[] = 'country';
}

if ($profilePhoneNumber === '') {
    $missingProfileFields[] = 'phone';
}

if ($notificationsEnabled && $notificationsProfileReminderEnabled && $missingProfileFields) {
    $dashboardNotifications[] = [
        'id' => 'profile-incomplete',
        'type' => 'warning',
        'title' => (string) ($notificationsItemsTranslations['profile_incomplete']['title'] ?? __('dashboard.notifications.items.profile_incomplete.title')),
        'message' => (string) ($notificationsItemsTranslations['profile_incomplete']['message'] ?? __('dashboard.notifications.items.profile_incomplete.message')),
        'action' => 'open-profile',
        'action_label' => $notificationsActionOpenProfile,
    ];
}

$userNotificationLocale = normalize_language($user['language'] ?? current_language());
$broadcastQueue = [];

foreach (get_broadcast_notifications() as $broadcastNotification) {
    $broadcastId = isset($broadcastNotification['id']) ? (int) $broadcastNotification['id'] : 0;
    if ($broadcastId <= 0) {
        continue;
    }

    $translations = $broadcastNotification['translations'] ?? [];
    if (!is_array($translations) || $translations === []) {
        continue;
    }

    $preferredLocales = array_values(array_unique([$userNotificationLocale, 'en']));
    $selected = null;

    foreach ($preferredLocales as $localeCandidate) {
        if (isset($translations[$localeCandidate]) && is_array($translations[$localeCandidate])) {
            $selected = $translations[$localeCandidate];
            break;
        }
    }

    if ($selected === null) {
        foreach ($translations as $candidate) {
            if (is_array($candidate)) {
                $selected = $candidate;
                break;
            }
        }
    }

    if ($selected === null) {
        continue;
    }

    $title = trim((string) ($selected['title'] ?? ''));
    $message = trim((string) ($selected['message'] ?? ''));

    if ($title === '' || $message === '') {
        continue;
    }

    $actionLabel = trim((string) ($selected['action_label'] ?? ''));
    $linkUrl = '';

    if (isset($broadcastNotification['link_url']) && is_string($broadcastNotification['link_url'])) {
        $linkUrl = trim($broadcastNotification['link_url']);
    }

    $action = 'none';
    $resolvedActionLabel = '';

    if ($linkUrl !== '') {
        $action = 'open-link';
        $resolvedActionLabel = $actionLabel !== ''
            ? $actionLabel
            : (string) __('dashboard.notifications.actions.open_link', [], $userNotificationLocale);
    }

    $broadcastQueue[] = [
        'id' => 'broadcast-' . $broadcastId,
        'type' => 'info',
        'title' => $title,
        'message' => $message,
        'action' => $action,
        'action_label' => $resolvedActionLabel,
        'url' => $linkUrl,
    ];
}

if ($broadcastQueue) {
    $dashboardNotifications = array_merge($broadcastQueue, $dashboardNotifications);
}

$notificationsCount = count($dashboardNotifications);

$avatarColors = [
    '#6366f1',
    '#8b5cf6',
    '#ec4899',
    '#14b8a6',
    '#f97316',
    '#22d3ee',
    '#facc15',
];

$colorIndex = count($avatarColors) > 0 ? (int) (abs(crc32(($user['first_name'] ?? '') . ($user['last_name'] ?? ''))) % count($avatarColors)) : 0;
$avatarColor = $avatarColors[$colorIndex] ?? '#6366f1';
$avatarPath = $user['avatar_path'] ?? null;
$initial = strtoupper(mb_substr(trim((string) ($user['first_name'] ?? '')), 0, 1, 'UTF-8') ?: 'M');
$roleLabel = $roles[$user['role']] ?? __('auth.roles.member');

$smartlinkPlatforms = require __DIR__ . '/smartlink-platforms.php';
$smartlinkShareBase = rtrim(APP_URL, '/') . '/musiclink/';

$defaultNewsletterSenderName = $siteName;
$defaultNewsletterSenderEmail = SUPPORT_EMAIL;

if (preg_match('/^(.+?)<(.+)>$/', EMAIL_FROM, $emailFromMatches)) {
    $candidateName = trim($emailFromMatches[1]);
    $candidateEmail = trim($emailFromMatches[2]);

    if ($candidateName !== '') {
        $defaultNewsletterSenderName = trim($candidateName, '\"');
    }

    if (filter_var($candidateEmail, FILTER_VALIDATE_EMAIL)) {
        $defaultNewsletterSenderEmail = $candidateEmail;
    }
} elseif (filter_var(EMAIL_FROM, FILTER_VALIDATE_EMAIL)) {
    $defaultNewsletterSenderEmail = EMAIL_FROM;
}

if ($defaultNewsletterSenderName === '') {
    $defaultNewsletterSenderName = $siteName;
}

?><!DOCTYPE html>
<html lang="<?= htmlspecialchars(current_language(), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" dir="<?= htmlspecialchars(language_direction(), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><?= __e('dashboard.title', ['site' => $siteName]) ?></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;600;700;800&display=swap" rel="stylesheet">
  <link rel="icon" href="<?= htmlspecialchars($siteFaviconUrl, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>">
  <script src="/assets/enhanced-select.js" defer></script>
  <style>
    :root {
      color-scheme: dark;
      --bg: radial-gradient(circle at 20% 10%, rgba(96, 165, 250, 0.18), transparent 55%),
             radial-gradient(circle at 80% 10%, rgba(129, 140, 248, 0.18), transparent 50%),
             radial-gradient(circle at 50% 90%, rgba(244, 114, 182, 0.18), transparent 50%),
             #020617;
      --surface: rgba(15, 23, 42, 0.78);
      --card: rgba(15, 23, 42, 0.9);
      --border: rgba(148, 163, 184, 0.18);
      --muted: rgba(203, 213, 225, 0.82);
      --text: #f8fafc;
      --accent: linear-gradient(135deg, #6366f1, #ec4899);
      --shadow: 0 30px 60px rgba(2, 6, 23, 0.55);
      --mobile-header-offset: 0px;
      --page-header-height: 0px;
      --select-surface: rgba(15, 23, 42, 0.78);
      --select-border: rgba(148, 163, 184, 0.28);
      --select-hover-border: rgba(129, 140, 248, 0.55);
      --select-focus-ring: rgba(99, 102, 241, 0.3);
      --select-arrow: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='18' height='18' viewBox='0 0 18 18' fill='none' stroke='%23cbd5f5' stroke-width='1.6' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M4.5 7l4.5 4 4.5-4'/%3E%3C/svg%3E");
    }

    *, *::before, *::after { box-sizing: border-box; }

    body {
      margin: 0;
      min-height: 100vh;
      font-family: 'Manrope', sans-serif;
      background: var(--bg);
      color: var(--text);
      display: flex;
      flex-direction: column;
    }

    body.has-sticky-header {
      padding-top: var(--page-header-height, 0px);
    }

    .page-header-sentinel {
      width: 100%;
      height: 0;
    }

    .page-header {
      padding: clamp(1.8rem, 4vw, 3rem) clamp(2rem, 5vw, 4.5rem);
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      z-index: 2;
      width: 100%;
      margin: 0;
      transition: transform 0.25s ease, box-shadow 0.25s ease, background-color 0.25s ease;
      backdrop-filter: none;
    }

    .page-header--sticky {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      margin: 0;
      padding-top: clamp(0.6rem, calc(4vw / 3), 1rem);
      padding-bottom: clamp(0.6rem, calc(4vw / 3), 1rem);
      background: linear-gradient(160deg, rgba(15, 23, 42, 0.96), rgba(2, 6, 23, 0.92));
      box-shadow: 0 20px 45px rgba(2, 6, 23, 0.55);
      backdrop-filter: blur(18px);
      border-bottom: 1px solid rgba(148, 163, 184, 0.18);
      z-index: 50;
    }

    .header-actions {
      display: inline-flex;
      align-items: center;
      gap: 1.1rem;
    }

    .notifications-area {
      position: relative;
    }

    .notifications-toggle {
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 52px;
      height: 52px;
      border-radius: 18px;
      border: 1px solid rgba(99, 102, 241, 0.3);
      background: linear-gradient(135deg, rgba(79, 70, 229, 0.2), rgba(129, 140, 248, 0.12));
      color: rgba(226, 232, 240, 0.95);
      cursor: pointer;
      transition: transform 0.2s ease, border 0.2s ease, box-shadow 0.2s ease;
      backdrop-filter: blur(16px);
    }

    .notifications-toggle:hover,
    .notifications-toggle:focus-visible {
      border-color: rgba(129, 140, 248, 0.65);
      transform: translateY(-1px);
      box-shadow: 0 20px 45px rgba(79, 70, 229, 0.35);
      outline: none;
    }

    .notifications-icon {
      width: 22px;
      height: 22px;
    }

    .notifications-badge {
      position: absolute;
      top: 6px;
      right: 6px;
      min-width: 18px;
      height: 18px;
      padding: 0 5px;
      border-radius: 999px;
      background: rgba(251, 191, 36, 0.95);
      color: rgba(15, 23, 42, 0.98);
      font-size: 0.7rem;
      font-weight: 700;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 6px 14px rgba(251, 191, 36, 0.45);
    }

    .notifications-panel {
      position: absolute;
      top: calc(100% + 0.75rem);
      right: 0;
      width: clamp(280px, 28vw, 360px);
      border-radius: 22px;
      border: 1px solid rgba(99, 102, 241, 0.25);
      background: linear-gradient(160deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.92));
      box-shadow: 0 30px 70px rgba(8, 47, 73, 0.55);
      padding: 1.1rem 1.2rem 1.4rem;
      opacity: 0;
      visibility: hidden;
      transform: translateY(-10px);
      transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s ease;
      pointer-events: none;
      backdrop-filter: blur(22px);
    }

    .notifications-panel.open {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
      pointer-events: auto;
    }

    .notifications-panel__header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 0.6rem;
      margin-bottom: 0.9rem;
    }

    .notifications-panel__title {
      font-size: 1rem;
      font-weight: 700;
      color: rgba(226, 232, 240, 0.96);
      margin: 0;
    }

    .notifications-panel__close {
      border: none;
      background: none;
      color: inherit;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 999px;
      padding: 0.2rem;
      cursor: pointer;
      transition: color 0.2s ease, transform 0.2s ease;
    }

    .notifications-panel__close:hover,
    .notifications-panel__close:focus-visible {
      color: rgba(248, 250, 252, 0.96);
      transform: scale(1.05);
      outline: none;
    }

    .notifications-list {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .notifications-empty {
      margin: 0;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .notifications-item {
      border-radius: 18px;
      background: linear-gradient(160deg, rgba(79, 70, 229, 0.16), rgba(99, 102, 241, 0.08));
      border: 1px solid rgba(99, 102, 241, 0.18);
      overflow: hidden;
    }

    .notifications-item button {
      width: 100%;
      background: none;
      border: none;
      display: flex;
      align-items: flex-start;
      gap: 0.9rem;
      text-align: left;
      padding: 0.9rem 1rem;
      color: inherit;
      cursor: pointer;
      font: inherit;
      transition: background 0.2s ease, transform 0.2s ease, border 0.2s ease;
    }

    [dir='rtl'] .notifications-item button {
      text-align: right;
      flex-direction: row-reverse;
    }

    [dir='rtl'] .notifications-item__content {
      align-items: flex-end;
      text-align: right;
    }

    [dir='rtl'] .notifications-item__cta {
      flex-direction: row-reverse;
    }

    .notifications-item button:hover,
    .notifications-item button:focus-visible {
      background: linear-gradient(160deg, rgba(79, 70, 229, 0.26), rgba(129, 140, 248, 0.16));
      border-color: rgba(129, 140, 248, 0.28);
      outline: none;
      transform: translateY(-1px);
    }

    .notifications-item__icon {
      width: 42px;
      height: 42px;
      border-radius: 14px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      flex-shrink: 0;
      background: rgba(251, 191, 36, 0.18);
      color: rgba(251, 191, 36, 0.95);
    }

    .notifications-item__icon svg {
      width: 22px;
      height: 22px;
    }

    .notifications-item--warning .notifications-item__icon {
      background: rgba(251, 191, 36, 0.18);
      color: rgba(253, 224, 71, 0.95);
    }

    .notifications-item__content {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .notifications-item__title {
      font-size: 0.95rem;
      font-weight: 700;
      color: rgba(226, 232, 240, 0.96);
      margin: 0;
    }

    .notifications-item__message {
      margin: 0;
      font-size: 0.85rem;
      line-height: 1.4;
      color: rgba(203, 213, 225, 0.9);
    }

    .notifications-item__cta {
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.06em;
      color: rgba(129, 140, 248, 0.95);
    }

    .notifications-item__cta svg {
      width: 14px;
      height: 14px;
    }

    .impersonation-banner {
      margin: 0 clamp(2rem, 5vw, 4.5rem) 1.5rem;
      padding: 1rem 1.5rem;
      border-radius: 20px;
      border: 1px solid rgba(125, 211, 252, 0.4);
      background: linear-gradient(135deg, rgba(14, 165, 233, 0.24), rgba(14, 116, 144, 0.18));
      color: rgba(224, 242, 254, 0.96);
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      box-shadow: 0 16px 36px rgba(8, 47, 73, 0.32);
    }

    .impersonation-banner__message {
      font-size: 0.95rem;
      line-height: 1.5;
    }

    .impersonation-banner__button {
      flex-shrink: 0;
      padding: 0.6rem 1.4rem;
      border-radius: 999px;
      border: 1px solid rgba(125, 211, 252, 0.7);
      background: rgba(14, 116, 144, 0.7);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: background 0.2s ease, border 0.2s ease, transform 0.2s ease;
    }

    .impersonation-banner__button:hover {
      background: rgba(13, 148, 136, 0.8);
      border-color: rgba(165, 243, 252, 0.95);
      transform: translateY(-1px);
    }

    .impersonation-banner__button:disabled {
      opacity: 0.7;
      cursor: progress;
      transform: none;
    }

    .brand {
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .brand__logo {
      width: clamp(220px, 30vw, 360px);
      max-width: 100%;
      height: auto;
      display: block;
    }

    .visually-hidden {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    .profile-area {
      position: relative;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .profile-toggle {
      display: inline-flex;
      align-items: center;
      gap: 0.9rem;
      padding: 0.45rem 0.9rem 0.45rem 0.45rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.72);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: border 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
      box-shadow: 0 12px 28px rgba(2, 6, 23, 0.35);
      min-width: 0;
    }

    [dir='rtl'] .profile-toggle {
      padding: 0.45rem 0.45rem 0.45rem 0.9rem;
    }

    .profile-toggle:focus-visible {
      outline: 2px solid rgba(99, 102, 241, 0.55);
      outline-offset: 3px;
    }

    .profile-toggle:hover {
      border-color: rgba(99, 102, 241, 0.35);
      transform: translateY(-1px);
    }

    .profile-avatar {
      width: 46px;
      height: 46px;
      border-radius: 50%;
      overflow: hidden;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-weight: 700;
      font-size: 1.05rem;
      background: var(--avatar-color, rgba(99, 102, 241, 0.85));
      color: white;
      box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.12);
    }

    .profile-avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .profile-meta {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      text-align: start;
      min-width: 0;
    }

    [dir='rtl'] .profile-meta {
      align-items: flex-end;
      text-align: end;
    }

    .profile-name {
      font-weight: 700;
      font-size: 0.95rem;
      line-height: 1.1;
      max-width: 200px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .profile-role {
      font-size: 0.75rem;
      color: rgba(226, 232, 240, 0.65);
      font-weight: 500;
    }

    .profile-caret {
      width: 16px;
      height: 16px;
      stroke: rgba(226, 232, 240, 0.65);
      stroke-width: 2.5px;
      transition: transform 0.2s ease;
    }

    .profile-toggle[aria-expanded="true"] .profile-caret {
      transform: rotate(180deg);
    }

    .profile-panel {
      position: absolute;
      top: calc(100% + 1.2rem);
      right: 0;
      width: min(420px, calc(100vw - 2.5rem));
      background: rgba(11, 16, 32, 0.95);
      border: 1px solid rgba(148, 163, 184, 0.18);
      border-radius: 28px;
      padding: 0 clamp(1.6rem, 3vw, 2rem) clamp(1.6rem, 3vw, 2rem);
      box-shadow: 0 40px 80px rgba(2, 6, 23, 0.55);
      display: grid;
      gap: 1.4rem;
      opacity: 0;
      pointer-events: none;
      transform: translateY(-10px) scale(0.98);
      transition: opacity 0.25s ease, transform 0.25s ease;
      backdrop-filter: blur(24px);
      z-index: 60;
      max-height: min(80vh, 640px);
      overflow-y: auto;
      overflow-x: hidden;
      overscroll-behavior: contain;
      scrollbar-gutter: stable;
      touch-action: pan-y;
      -webkit-overflow-scrolling: touch;
    }

    @media (min-width: 781px) {
      body.has-sticky-header .profile-area .profile-panel {
        position: fixed;
        top: calc(var(--page-header-height, 0px) + 1.2rem);
        right: clamp(2rem, 5vw, 4.5rem);
        left: auto;
        max-height: min(80vh, calc(100vh - var(--page-header-height, 0px) - 2.4rem), 640px);
      }

      html[dir='rtl'] body.has-sticky-header .profile-area .profile-panel {
        right: auto;
        left: clamp(2rem, 5vw, 4.5rem);
      }
    }

    html[dir='rtl'] .profile-panel {
      left: 0;
      right: auto;
    }

    .profile-panel::before {
      content: '';
      position: absolute;
      top: -55%;
      left: -18%;
      right: -18%;
      height: 280px;
      background: radial-gradient(ellipse at top, rgba(99, 102, 241, 0.42), transparent 68%);
      pointer-events: none;
      opacity: 0.75;
    }

    .profile-panel.open {
      opacity: 1;
      pointer-events: auto;
      transform: translateY(0) scale(1);
    }

    .profile-panel-header {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: 1rem;
      position: sticky;
      top: 0;
      background: rgba(11, 16, 32, 0.98);
      padding-top: clamp(1.6rem, 3vw, 2rem);
      padding-bottom: 1.1rem;
      z-index: 20;
    }

    .profile-panel-header__text {
      display: grid;
      gap: 0.4rem;
      flex: 1;
      min-width: 0;
    }

    .profile-panel-close {
      display: none;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(15, 23, 42, 0.85);
      color: inherit;
      border-radius: 999px;
      width: 38px;
      height: 38px;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      flex-shrink: 0;
      transition: border 0.2s ease, transform 0.2s ease;
    }

    .profile-panel-close:hover,
    .profile-panel-close:focus-visible {
      border-color: rgba(99, 102, 241, 0.45);
      transform: translateY(-1px);
      outline: none;
    }

    .profile-panel h2 {
      margin: 0;
      font-size: 1.25rem;
    }

    .profile-panel p.helper {
      margin: 0;
      color: var(--muted);
      font-size: 0.88rem;
    }

    .profile-form {
      display: grid;
      gap: 1.2rem;
    }

    .profile-grid {
      display: grid;
      gap: 1rem;
    }

    .profile-grid.two-columns {
      grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    }

    .profile-field {
      display: grid;
      gap: 0.5rem;
    }

    .profile-field label {
      font-weight: 600;
      font-size: 0.85rem;
      color: rgba(226, 232, 240, 0.75);
    }

    .profile-field .helper {
      margin: 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.78);
    }

    .profile-field input,
    .profile-field select {
      width: 100%;
      padding: 0.75rem 1rem;
      border-radius: 16px;
      border: 1px solid var(--select-border);
      background: rgba(15, 23, 42, 0.72);
      color: inherit;
      font: inherit;
      transition: border 0.2s ease, box-shadow 0.2s ease, background-position 0.4s ease;
    }

    .profile-field select {
      appearance: none;
      background-color: var(--select-surface);
      background-image: linear-gradient(135deg, rgba(99, 102, 241, 0.16), rgba(236, 72, 153, 0.14)), var(--select-arrow);
      background-repeat: no-repeat, no-repeat;
      background-size: 260% 260%, 1.1rem;
      background-position: left center, calc(100% - 1.2rem) center;
      padding-right: 3rem;
      cursor: pointer;
    }

    .profile-field select:hover {
      border-color: var(--select-hover-border);
      background-position: center center, calc(100% - 1.2rem) center;
    }

    .profile-field select option {
      background: rgba(15, 23, 42, 0.95);
      color: var(--text);
    }

    .profile-field input:focus,
    .profile-field select:focus {
      outline: none;
      border-color: var(--select-hover-border);
      box-shadow: 0 0 0 3px var(--select-focus-ring);
    }

    .profile-field select::-ms-expand {
      display: none;
    }

    .enhanced-select {
      position: relative;
    }

    .enhanced-select select {
      position: absolute;
      inset: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      pointer-events: none;
    }

    .enhanced-select__trigger {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 0.75rem;
      padding: 0.75rem 1rem;
      border-radius: 16px;
      border: 1px solid var(--select-border);
      background-color: var(--select-surface);
      background-image: linear-gradient(135deg, rgba(99, 102, 241, 0.16), rgba(236, 72, 153, 0.14)), var(--select-arrow);
      background-repeat: no-repeat, no-repeat;
      background-size: 260% 260%, 1.1rem;
      background-position: left center, calc(100% - 1.2rem) center;
      color: inherit;
      font: inherit;
      font-weight: 600;
      cursor: pointer;
      transition: border 0.2s ease, box-shadow 0.2s ease, background-position 0.4s ease, transform 0.2s ease;
    }

    .enhanced-select__trigger:hover,
    .enhanced-select__trigger:focus-visible {
      border-color: var(--select-hover-border);
      background-position: center center, calc(100% - 1.2rem) center;
    }

    .enhanced-select__trigger:focus-visible {
      outline: none;
      box-shadow: 0 0 0 3px var(--select-focus-ring);
    }

    .enhanced-select.is-open .enhanced-select__trigger {
      border-color: var(--select-hover-border);
      background-position: center center, calc(100% - 1.2rem) center;
      box-shadow: 0 0 0 3px var(--select-focus-ring);
    }

    .enhanced-select__value {
      flex: 1;
      text-align: left;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    [dir='rtl'] .enhanced-select__trigger {
      background-position: right center, 1.2rem center;
      padding-right: 1.2rem;
      padding-left: 3.1rem;
    }

    [dir='rtl'] .enhanced-select.is-open .enhanced-select__trigger,
    [dir='rtl'] .enhanced-select__trigger:hover,
    [dir='rtl'] .enhanced-select__trigger:focus-visible {
      background-position: center center, 1.2rem center;
    }

    [dir='rtl'] .enhanced-select__value {
      text-align: right;
    }

    [dir='rtl'] .enhanced-select__menu {
      right: 0;
      left: auto;
    }

    .enhanced-select__menu {
      list-style: none;
      margin: 0;
      padding: 0.45rem 0;
      position: absolute;
      top: calc(100% + 0.4rem);
      left: 0;
      width: 100%;
      max-height: 260px;
      overflow-y: auto;
      overscroll-behavior: contain;
      touch-action: pan-y;
      -webkit-overflow-scrolling: touch;
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(7, 12, 28, 0.95);
      box-shadow: 0 28px 60px rgba(2, 6, 23, 0.55);
      backdrop-filter: blur(18px);
      display: none;
      z-index: 30;
    }

    .enhanced-select.is-open .enhanced-select__menu {
      display: block;
      animation: selectFadeIn 0.18s ease;
    }

    .enhanced-select__option {
      padding: 0.65rem 1.05rem;
      cursor: pointer;
      font-size: 0.9rem;
      color: var(--text);
      display: flex;
      align-items: center;
    }

    .enhanced-select__option[aria-selected="true"] {
      font-weight: 600;
      color: #e0e7ff;
    }

    .enhanced-select__option.is-disabled {
      opacity: 0.45;
      cursor: not-allowed;
    }

    .enhanced-select__option.is-active,
    .enhanced-select__option:hover {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.16), rgba(236, 72, 153, 0.18));
    }

    @keyframes selectFadeIn {
      from {
        opacity: 0;
        transform: translateY(-6px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .avatar-upload {
      display: flex;
      align-items: center;
      gap: 1.1rem;
      flex-wrap: wrap;
    }

    .avatar-preview {
      width: 96px;
      height: 96px;
      border-radius: 50%;
      background: var(--avatar-color, rgba(99, 102, 241, 0.35));
      display: grid;
      place-items: center;
      font-weight: 700;
      font-size: 1.6rem;
      color: white;
      overflow: hidden;
      position: relative;
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 18px 36px rgba(15, 23, 42, 0.45);
    }

    .avatar-preview-content {
      width: 100%;
      height: 100%;
      display: grid;
      place-items: center;
    }

    .avatar-preview-content img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .avatar-actions {
      display: flex;
      align-items: center;
      gap: 0.8rem;
      flex-wrap: wrap;
    }

    .avatar-actions button {
      padding: 0.55rem 1.1rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(15, 23, 42, 0.68);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: background 0.2s ease, border 0.2s ease, color 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.45rem;
    }

    .avatar-actions button:hover {
      background: rgba(99, 102, 241, 0.2);
      border-color: rgba(99, 102, 241, 0.45);
    }

    .avatar-actions .avatar-remove-button {
      padding: 0.55rem;
      width: 44px;
      height: 44px;
      border-color: rgba(248, 113, 113, 0.35);
      color: rgba(248, 113, 113, 0.9);
    }

    .avatar-actions .avatar-remove-button:hover {
      background: rgba(248, 113, 113, 0.18);
      border-color: rgba(248, 113, 113, 0.45);
      color: #fecaca;
    }

    .avatar-actions .avatar-remove-button:focus-visible {
      outline: 2px solid rgba(248, 113, 113, 0.5);
      outline-offset: 2px;
    }

    .avatar-actions .avatar-remove-button svg {
      width: 18px;
      height: 18px;
    }

    .profile-feedback {
      min-height: 1.2rem;
      font-size: 0.85rem;
      color: rgba(94, 234, 212, 0.9);
    }

    .profile-feedback.error {
      color: rgba(248, 113, 113, 0.9);
    }

    .profile-actions {
      display: flex;
      align-items: center;
      justify-content: flex-start;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .profile-actions .action-button {
      flex: 1;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.75rem 1.75rem;
      border-radius: 18px;
      font-weight: 700;
      text-decoration: none;
      min-height: 3.2rem;
      cursor: pointer;
      transition: transform 0.2s ease, background 0.2s ease, border 0.2s ease;
    }

    .profile-actions .action-button:focus-visible {
      outline: 2px solid rgba(99, 102, 241, 0.6);
      outline-offset: 3px;
    }

    .profile-actions .primary-action {
      border: none;
      background: var(--accent);
      color: white;
      cursor: pointer;
      box-shadow: 0 18px 35px rgba(79, 70, 229, 0.35);
    }

    .profile-actions .primary-action:hover {
      transform: translateY(-1px);
    }

    .profile-actions .secondary-action {
      border: 1px solid rgba(148, 163, 184, 0.25);
      color: rgba(226, 232, 240, 0.75);
      background: transparent;
      font-weight: 600;
    }

    .profile-actions .secondary-action:hover {
      background: rgba(248, 113, 113, 0.18);
      border-color: rgba(248, 113, 113, 0.4);
      color: #fecaca;
    }

    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    .dashboard-sidebar__title.sr-only {
      margin: -1px;
    }

    input[type="file"]#avatarInput {
      display: none;
    }

    .hidden {
      display: none !important;
    }

    main {
      flex: 1;
      padding: 0 clamp(2rem, 5vw, 4.5rem) clamp(3rem, 6vw, 5rem);
      display: grid;
      gap: clamp(2rem, 3vw, 3rem);
    }

    .dashboard-shell {
      width: 100%;
    }

    .dashboard-content {
      display: contents;
    }

    .dashboard-content__pane {
      display: contents;
    }

    .welcome {
      background: var(--surface);
      border-radius: clamp(26px, 4vw, 34px);
      border: 1px solid var(--border);
      padding: clamp(2.5rem, 4vw, 3.5rem);
      box-shadow: var(--shadow);
      display: grid;
      gap: 1.2rem;
    }

    .welcome h2 {
      margin: 0;
      font-size: clamp(1.7rem, 3vw, 2.2rem);
    }

    .welcome p {
      margin: 0;
      color: var(--muted);
      font-size: 1rem;
      max-width: 640px;
    }

    .studio-card-section {
      display: flex;
    }

    .studio-card {
      position: relative;
      width: 100%;
      display: grid;
      gap: clamp(1.4rem, 3vw, 1.9rem);
      padding: clamp(2.2rem, 4vw, 2.8rem);
      border-radius: clamp(28px, 6vw, 36px);
      background: linear-gradient(160deg, rgba(20, 184, 166, 0.18) 0%, rgba(67, 56, 202, 0.35) 100%);
      border: 1px solid rgba(94, 234, 212, 0.24);
      box-shadow: 0 40px 90px rgba(2, 6, 23, 0.55);
      overflow: hidden;
    }

    .studio-card::after {
      content: '';
      position: absolute;
      inset: 0;
      background: radial-gradient(circle at top right, rgba(59, 130, 246, 0.28), transparent 55%);
      pointer-events: none;
    }

    .studio-card__header {
      position: relative;
      z-index: 1;
      display: grid;
      gap: 0.75rem;
    }

    .studio-card__badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: fit-content;
      padding: 0.4rem 1rem;
      border-radius: 999px;
      background: rgba(148, 163, 184, 0.12);
      color: rgba(165, 243, 252, 0.85);
      font-size: 0.75rem;
      letter-spacing: 0.16em;
      font-weight: 700;
    }

    .studio-card__title {
      margin: 0;
      font-size: clamp(1.4rem, 3vw, 1.8rem);
      font-family: 'Space Grotesk', sans-serif;
    }

    .studio-card__subtitle {
      margin: 0;
      color: rgba(226, 232, 240, 0.85);
      font-size: 0.95rem;
      line-height: 1.5;
      max-width: 52ch;
    }

    .studio-card__button {
      position: relative;
      z-index: 1;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.65rem;
      padding: 0.9rem 1.8rem;
      border-radius: 999px;
      background: rgba(16, 185, 129, 0.95);
      color: #020617;
      text-decoration: none;
      font-weight: 700;
      letter-spacing: 0.18em;
      text-transform: uppercase;
      font-size: 0.8rem;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      box-shadow: 0 18px 38px rgba(16, 185, 129, 0.25);
      border: none;
    }

    .studio-card__button:hover,
    .studio-card__button:focus-visible {
      transform: translateY(-1px);
      box-shadow: 0 24px 44px rgba(16, 185, 129, 0.35);
      outline: none;
    }

    .cards {
      display: grid;
      gap: clamp(1.5rem, 3vw, 2.4rem);
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    }

    .card {
      background: var(--card);
      border-radius: clamp(22px, 3vw, 28px);
      border: 1px solid rgba(148, 163, 184, 0.16);
      padding: clamp(1.8rem, 3vw, 2.6rem);
      display: grid;
      gap: 1rem;
      box-shadow: 0 18px 36px rgba(15, 23, 42, 0.45);
      position: relative;
      overflow: hidden;
    }

    .card::before {
      content: '';
      position: absolute;
      inset: -50% -10% 60% -10%;
      background: radial-gradient(circle, rgba(99, 102, 241, 0.45), transparent 60%);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .card:hover::before {
      opacity: 1;
    }

    .card h3 {
      margin: 0;
      font-size: 1.3rem;
    }

    .card p {
      margin: 0;
      color: var(--muted);
      font-size: 0.95rem;
    }

    .card a,
    .card button.card-trigger {
      margin-top: auto;
      justify-self: stretch;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      background: var(--accent);
      padding: 0.85rem 1.4rem;
      min-height: 3.25rem;
      border-radius: 16px;
      color: white;
      font-weight: 700;
      text-align: center;
      text-decoration: none;
      box-shadow: 0 18px 35px rgba(79, 70, 229, 0.35);
      transition: transform 0.2s ease;
      border: none;
      cursor: pointer;
    }

    body[data-dashboard-design="vision"] {
      --bg: radial-gradient(circle at 10% -10%, rgba(56, 189, 248, 0.22), transparent 58%),
             radial-gradient(circle at 90% 10%, rgba(167, 139, 250, 0.25), transparent 52%),
             radial-gradient(circle at 50% 90%, rgba(236, 72, 153, 0.18), transparent 55%),
             #030712;
      --surface: rgba(9, 14, 35, 0.78);
      --card: rgba(9, 14, 35, 0.88);
      --border: rgba(148, 163, 184, 0.16);
      --muted: rgba(226, 232, 240, 0.8);
      --accent: linear-gradient(135deg, #38bdf8, #818cf8);
      --shadow: 0 42px 70px rgba(2, 6, 23, 0.55);
      scroll-padding-top: clamp(5rem, 12vh, 8rem);
    }

    body[data-dashboard-design="vision"] main {
      max-width: min(1200px, 94vw);
      margin-inline: auto;
      padding-inline: clamp(1.5rem, 4vw, 2.75rem);
      padding-bottom: clamp(4rem, 8vw, 6rem);
      display: grid;
      gap: clamp(2rem, 5vw, 3rem);
    }

    body[data-dashboard-design="vision"] .welcome {
      position: relative;
      display: grid;
      gap: clamp(1rem, 3vw, 1.6rem);
      padding: clamp(2.4rem, 5vw, 3.4rem);
      border-radius: clamp(28px, 4vw, 36px);
      background: linear-gradient(135deg, rgba(56, 189, 248, 0.16), rgba(129, 140, 248, 0.22));
      overflow: hidden;
      box-shadow: 0 36px 70px rgba(2, 6, 23, 0.45);
    }

    body[data-dashboard-design="vision"] .welcome::after {
      content: '';
      position: absolute;
      inset: auto -20% -55% 55%;
      height: 120%;
      background: radial-gradient(circle, rgba(244, 114, 182, 0.45), transparent 65%);
      opacity: 0.75;
      pointer-events: none;
      transform: rotate(-12deg);
    }

    body[data-dashboard-design="vision"] .welcome h2 {
      margin: 0;
      font-size: clamp(2rem, 5vw, 2.8rem);
      letter-spacing: -0.02em;
    }

    body[data-dashboard-design="vision"] .welcome p {
      margin: 0;
      max-width: 60ch;
      font-size: clamp(1rem, 2.6vw, 1.15rem);
      color: rgba(226, 232, 240, 0.86);
    }

    body[data-dashboard-design="vision"] .studio-card-section {
      position: relative;
      display: grid;
      grid-template-columns: minmax(0, 1fr);
    }

    body[data-dashboard-design="vision"] .studio-card {
      padding: clamp(2.6rem, 5vw, 3.4rem);
      border-radius: clamp(28px, 4vw, 36px);
      border: 1px solid rgba(56, 189, 248, 0.28);
      background: linear-gradient(140deg, rgba(15, 23, 42, 0.85), rgba(8, 47, 73, 0.85));
      box-shadow: 0 44px 70px rgba(2, 6, 23, 0.5);
    }

    body[data-dashboard-design="vision"] .studio-card__badge {
      background: rgba(56, 189, 248, 0.18);
      color: rgba(165, 243, 252, 0.92);
    }

    body[data-dashboard-design="vision"] .studio-card__button {
      background: linear-gradient(135deg, #f97316, #facc15);
      color: #0f172a;
      box-shadow: 0 24px 36px rgba(249, 115, 22, 0.28);
    }

    body[data-dashboard-design="vision"] .cards {
      border-radius: clamp(28px, 4vw, 36px);
      border: 1px solid rgba(148, 163, 184, 0.18);
      padding: clamp(1.8rem, 5vw, 2.6rem);
      background: linear-gradient(145deg, rgba(15, 23, 42, 0.78), rgba(2, 6, 23, 0.85));
      backdrop-filter: blur(24px);
      grid-template-columns: repeat(12, minmax(0, 1fr));
      grid-auto-flow: dense;
      gap: clamp(1.5rem, 4vw, 2.4rem);
    }

    body[data-dashboard-design="vision"] .cards > .card {
      grid-column: span 4;
      position: relative;
      border-radius: clamp(24px, 3vw, 30px);
      border: 1px solid rgba(148, 163, 184, 0.2);
      background: rgba(8, 15, 35, 0.82);
      box-shadow: 0 30px 60px rgba(2, 6, 23, 0.45);
      padding: clamp(1.8rem, 4vw, 2.4rem);
      gap: clamp(0.85rem, 3vw, 1.2rem);
    }

    body[data-dashboard-design="vision"] .cards > .card:first-child,
    body[data-dashboard-design="vision"] .cards > .card:nth-child(2) {
      grid-column: span 6;
    }

    body[data-dashboard-design="vision"] .cards > .card::before {
      opacity: 0.75;
      inset: -45% -25% 40% -25%;
      background: radial-gradient(circle, rgba(129, 140, 248, 0.4), transparent 70%);
    }

    body[data-dashboard-design="vision"] .card a,
    body[data-dashboard-design="vision"] .card button.card-trigger {
      border-radius: 18px;
      background: linear-gradient(135deg, rgba(129, 140, 248, 0.55), rgba(56, 189, 248, 0.55));
      box-shadow: 0 28px 44px rgba(56, 189, 248, 0.28);
    }

    body[data-dashboard-design="vision"] .card--highlight {
      border: 1px solid rgba(236, 72, 153, 0.45);
      background: linear-gradient(160deg, rgba(46, 16, 101, 0.92), rgba(14, 116, 144, 0.88));
    }

    body[data-dashboard-design="vision"] .page-header {
      padding-inline: clamp(2.4rem, 6vw, 4.2rem);
    }

    body[data-dashboard-design="vision"] .page-header--sticky {
      background: rgba(6, 11, 25, 0.92);
      box-shadow: 0 26px 48px rgba(2, 6, 23, 0.65);
    }

    body[data-dashboard-design="vision"] .notifications-toggle {
      border-color: rgba(56, 189, 248, 0.32);
      background: linear-gradient(135deg, rgba(56, 189, 248, 0.18), rgba(129, 140, 248, 0.16));
      box-shadow: 0 24px 36px rgba(56, 189, 248, 0.22);
    }

    body[data-dashboard-design="vision"] .profile-toggle {
      border-color: rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.7);
      box-shadow: 0 18px 28px rgba(2, 6, 23, 0.45);
    }

    body[data-dashboard-design="vision"] footer {
      margin-inline: auto;
      max-width: min(1200px, 94vw);
      padding-inline: clamp(1.5rem, 4vw, 2.75rem);
    }

    body[data-dashboard-design="focus"] {
      background: radial-gradient(circle at 20% -10%, rgba(94, 234, 212, 0.12), transparent 55%),
                  radial-gradient(circle at 80% 0%, rgba(129, 140, 248, 0.16), transparent 52%),
                  radial-gradient(circle at 50% 110%, rgba(56, 189, 248, 0.12), transparent 58%),
                  #030712;
      color: rgba(226, 232, 240, 0.96);
    }

    body[data-dashboard-design="focus"] main {
      width: min(1240px, 94vw);
      margin: 0 auto clamp(3rem, 6vw, 4.5rem);
      display: grid;
      gap: clamp(2.2rem, 5vw, 3.2rem);
    }

    body[data-dashboard-design="focus"] .welcome {
      position: relative;
      display: grid;
      gap: clamp(1rem, 3vw, 1.6rem);
      padding: clamp(2.4rem, 6vw, 3.2rem);
      border-radius: clamp(30px, 5vw, 38px);
      border: 1px solid rgba(148, 163, 184, 0.14);
      background: linear-gradient(145deg, rgba(11, 19, 40, 0.92), rgba(2, 6, 23, 0.78));
      box-shadow: 0 32px 48px rgba(2, 6, 23, 0.38);
      overflow: hidden;
      isolation: isolate;
    }

    body[data-dashboard-design="focus"] .welcome::after {
      content: '';
      position: absolute;
      inset: -40% -25% 42% 35%;
      background: radial-gradient(circle, rgba(129, 140, 248, 0.45), transparent 70%);
      opacity: 0.75;
      pointer-events: none;
      transform: rotate(-8deg);
      z-index: -1;
    }

    body[data-dashboard-design="focus"] .welcome h2 {
      margin: 0;
      font-size: clamp(2.1rem, 6vw, 2.9rem);
      letter-spacing: -0.02em;
    }

    body[data-dashboard-design="focus"] .welcome p {
      margin: 0;
      color: rgba(226, 232, 240, 0.78);
      max-width: 58ch;
      font-size: clamp(1rem, 2.6vw, 1.1rem);
    }

    body[data-dashboard-design="focus"] .studio-card-section {
      margin: 0;
    }

    body[data-dashboard-design="focus"] .studio-card {
      position: relative;
      display: grid;
      gap: clamp(1.6rem, 4vw, 2.4rem);
      grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);
      align-items: center;
      padding: clamp(2.4rem, 6vw, 3.2rem);
      border-radius: clamp(30px, 5vw, 38px);
      border: 1px solid rgba(148, 163, 184, 0.16);
      background: linear-gradient(160deg, rgba(6, 11, 25, 0.92), rgba(3, 7, 18, 0.76));
      box-shadow: 0 36px 52px rgba(2, 6, 23, 0.4);
      overflow: hidden;
      isolation: isolate;
    }

    body[data-dashboard-design="focus"] .studio-card::before {
      content: '';
      position: absolute;
      inset: -35% 10% 35% -20%;
      background: radial-gradient(circle, rgba(56, 189, 248, 0.35), transparent 70%);
      opacity: 0.75;
      pointer-events: none;
      z-index: -1;
      filter: blur(4px);
    }

    body[data-dashboard-design="focus"] .studio-card__badge {
      background: rgba(56, 189, 248, 0.22);
      color: rgba(244, 244, 255, 0.92);
      letter-spacing: 0.2em;
    }

    body[data-dashboard-design="focus"] .studio-card__title {
      font-size: clamp(1.8rem, 4.8vw, 2.3rem);
      letter-spacing: -0.01em;
    }

    body[data-dashboard-design="focus"] .studio-card__subtitle {
      color: rgba(226, 232, 240, 0.75);
      max-width: 56ch;
      font-size: 1rem;
    }

    body[data-dashboard-design="focus"] .studio-card__button {
      justify-self: end;
      background: linear-gradient(135deg, #38bdf8, #a855f7);
      color: #0f172a;
      box-shadow: 0 28px 48px rgba(56, 189, 248, 0.32);
      padding-inline: clamp(1.6rem, 4vw, 2.4rem);
      font-size: 0.82rem;
      letter-spacing: 0.22em;
    }

    body[data-dashboard-design="focus"] .cards {
      border-radius: clamp(28px, 4vw, 36px);
      border: 1px solid rgba(148, 163, 184, 0.16);
      background: rgba(5, 11, 24, 0.72);
      box-shadow: 0 32px 48px rgba(2, 6, 23, 0.32);
      padding: clamp(2rem, 5vw, 2.8rem);
      grid-template-columns: repeat(12, minmax(0, 1fr));
      grid-auto-flow: dense;
      gap: clamp(1.4rem, 4vw, 2.2rem);
    }

    body[data-dashboard-design="focus"] .cards > .card {
      grid-column: span 4;
      background: rgba(8, 15, 30, 0.9);
      border: 1px solid rgba(148, 163, 184, 0.18);
      border-radius: clamp(26px, 4vw, 32px);
      padding: clamp(1.8rem, 4vw, 2.4rem);
      box-shadow: 0 28px 44px rgba(2, 6, 23, 0.36);
      gap: clamp(0.85rem, 3vw, 1.2rem);
    }

    body[data-dashboard-design="focus"] .cards > .card:first-child,
    body[data-dashboard-design="focus"] .cards > .card:nth-child(2) {
      grid-column: span 6;
    }

    body[data-dashboard-design="focus"] .cards > .card::before {
      inset: -55% -20% 55% -20%;
      background: radial-gradient(circle, rgba(59, 130, 246, 0.35), transparent 65%);
      opacity: 0.6;
    }

    body[data-dashboard-design="focus"] .card h3 {
      font-size: clamp(1.2rem, 3vw, 1.4rem);
    }

    body[data-dashboard-design="focus"] .card p {
      color: rgba(203, 213, 225, 0.8);
      font-size: 0.95rem;
    }

    body[data-dashboard-design="focus"] .card a,
    body[data-dashboard-design="focus"] .card button.card-trigger {
      background: rgba(15, 23, 42, 0.72);
      border: 1px solid rgba(148, 163, 184, 0.28);
      color: rgba(244, 244, 255, 0.92);
      border-radius: 16px;
      padding: 0.75rem 1.4rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      box-shadow: 0 18px 28px rgba(15, 23, 42, 0.35);
    }

    body[data-dashboard-design="focus"] .card a:hover,
    body[data-dashboard-design="focus"] .card button.card-trigger:hover {
      border-color: rgba(129, 140, 248, 0.55);
      box-shadow: 0 24px 36px rgba(79, 70, 229, 0.32);
    }

    body[data-dashboard-design="focus"] .card--highlight {
      border: 1px solid rgba(244, 114, 182, 0.45);
      background: linear-gradient(155deg, rgba(59, 7, 100, 0.88), rgba(22, 78, 99, 0.82));
      box-shadow: 0 32px 46px rgba(59, 7, 100, 0.38);
    }

    body[data-dashboard-design="focus"] .page-header {
      width: min(1240px, 94vw);
      margin-inline: auto;
      padding: clamp(1.6rem, 4vw, 2.2rem) clamp(1.6rem, 4vw, 2.4rem);
      border-radius: clamp(26px, 4vw, 34px);
      background: rgba(6, 11, 25, 0.82);
      border: 1px solid rgba(148, 163, 184, 0.14);
      box-shadow: 0 28px 48px rgba(2, 6, 23, 0.36);
      backdrop-filter: blur(22px);
    }

    body[data-dashboard-design="focus"] .page-header--sticky {
      top: clamp(1rem, 3vw, 1.5rem);
      left: 50%;
      right: auto;
      transform: translateX(-50%);
      width: min(1240px, 94vw);
      border-radius: clamp(26px, 4vw, 34px);
      background: rgba(3, 7, 18, 0.92);
      box-shadow: 0 36px 54px rgba(2, 6, 23, 0.45);
    }

    body[data-dashboard-design="focus"] .notifications-toggle {
      border: 1px solid rgba(129, 140, 248, 0.35);
      background: rgba(15, 23, 42, 0.65);
      box-shadow: 0 22px 34px rgba(15, 23, 42, 0.35);
    }

    body[data-dashboard-design="focus"] .profile-toggle {
      border: 1px solid rgba(148, 163, 184, 0.28);
      background: rgba(15, 23, 42, 0.6);
      box-shadow: 0 18px 30px rgba(2, 6, 23, 0.38);
    }

    body[data-dashboard-design="focus"] .notifications-panel {
      margin-top: 0.75rem;
      border-radius: 26px;
      border: 1px solid rgba(129, 140, 248, 0.25);
      background: linear-gradient(160deg, rgba(8, 15, 32, 0.95), rgba(10, 17, 35, 0.85));
      box-shadow: 0 32px 60px rgba(2, 6, 23, 0.5);
    }

    body[data-dashboard-design="focus"] footer {
      margin-inline: auto;
      width: min(1240px, 94vw);
      padding-inline: clamp(1.6rem, 4vw, 2.6rem);
    }

    body[data-dashboard-design="aura"] {
      --surface: rgba(8, 13, 28, 0.78);
      --card: rgba(9, 14, 30, 0.82);
      --border: rgba(99, 102, 241, 0.28);
      --muted: rgba(203, 213, 225, 0.88);
      --accent: linear-gradient(135deg, #6366f1, #22d3ee);
      --aura-sidebar-width: clamp(260px, 22vw, 320px);
      --aura-sidebar-width-collapsed: clamp(76px, 9vw, 96px);
      --aura-gutter: clamp(1.8rem, 3vw, 2.4rem);
      --aura-header-padding: clamp(1rem, 3vw, 1.6rem);
      --aura-content-max-width: min(1180px, calc(100vw - var(--aura-sidebar-width) - (var(--aura-gutter) * 2)));
      --aura-sidebar-align-offset: -0.125rem;
      --aura-sidebar-top-gap: calc(clamp(0.2rem, 0.8vw, 0.35rem) + 0.25rem);
      background:
        radial-gradient(circle at 15% -10%, rgba(129, 140, 248, 0.22), transparent 58%),
        radial-gradient(circle at 85% 0%, rgba(56, 189, 248, 0.18), transparent 55%),
        radial-gradient(circle at 50% 110%, rgba(34, 211, 238, 0.15), transparent 60%),
        #01040f;
      color: rgba(240, 249, 255, 0.98);
      overflow-x: hidden;
    }

    body[data-dashboard-design="aura"] .page-header,
    body[data-dashboard-design="aura"] .page-header--sticky {
      transition: left 0.32s ease, width 0.32s ease, padding 0.32s ease;
    }

    body[data-dashboard-design="aura"] main,
    body[data-dashboard-design="aura"] footer {
      transition: margin-left 0.32s ease, width 0.32s ease, padding 0.32s ease;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar {
      transition: width 0.32s ease, padding 0.32s ease;
    }

    @media (prefers-reduced-motion: reduce) {
      body[data-dashboard-design="aura"] .page-header,
      body[data-dashboard-design="aura"] .page-header--sticky,
      body[data-dashboard-design="aura"] main,
      body[data-dashboard-design="aura"] footer,
      body[data-dashboard-design="aura"] .dashboard-sidebar {
        transition: none !important;
      }
    }

    body[data-dashboard-design="aura"] .page-header {
      position: fixed;
      top: 0;
      left: var(--aura-sidebar-width);
      right: 0;
      width: auto;
      margin: 0;
      padding: var(--aura-header-padding) var(--aura-gutter);
      padding-left: var(--aura-gutter);
      border-radius: 0;
      background: linear-gradient(160deg, rgba(7, 12, 26, 0.94), rgba(10, 18, 36, 0.9));
      border-bottom: 1px solid rgba(99, 102, 241, 0.25);
      box-shadow: 0 32px 58px rgba(5, 10, 20, 0.55);
      backdrop-filter: blur(26px);
      z-index: 60;
    }

    body[data-dashboard-design="aura"] .page-header--sticky {
      top: 0;
      left: var(--aura-sidebar-width);
      right: 0;
      transform: none;
      width: auto;
      border-radius: 0;
      box-shadow: 0 36px 60px rgba(3, 6, 14, 0.6);
    }

    body[data-dashboard-design="aura"] main {
      width: calc(100% - var(--aura-sidebar-width));
      margin: 0;
      margin-left: var(--aura-sidebar-width);
      padding: var(--aura-header-padding) var(--aura-gutter) var(--aura-gutter);
      display: flex;
      justify-content: flex-start;
      box-sizing: border-box;
      min-height: calc(100vh - var(--page-header-height, 0px));
      flex: 1 0 auto;
    }

    body[data-dashboard-design="aura"] .dashboard-shell {
      width: min(var(--aura-content-max-width), 100%);
      display: block;
      position: relative;
      margin-inline: auto;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar {
      display: flex;
      flex-direction: column;
      gap: clamp(1.6rem, 3.6vw, 2.2rem);
      padding: var(--aura-header-padding) var(--aura-gutter) var(--aura-gutter);
      border-radius: 0;
      background: linear-gradient(185deg, rgba(8, 12, 26, 0.95), rgba(8, 12, 26, 0.78));
      border-right: 1px solid rgba(99, 102, 241, 0.26);
      box-shadow: 24px 0 60px rgba(5, 10, 22, 0.45);
      position: fixed;
      top: 0;
      left: 0;
      width: var(--aura-sidebar-width);
      height: 100vh;
      overflow-x: visible;
      overflow-y: auto;
      z-index: 90;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__top {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: clamp(0.9rem, 2.6vw, 1.4rem);
      margin-top: var(--aura-sidebar-top-gap);
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__header {
      align-items: center;
    }

    body[data-dashboard-design="aura"]:not([data-sidebar-state="collapsed"]) .dashboard-sidebar__badge,
    body[data-dashboard-design="aura"]:not([data-sidebar-state="collapsed"]) .dashboard-sidebar__toggle {
      margin-top: 0;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar::-webkit-scrollbar {
      width: 6px;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar::-webkit-scrollbar-thumb {
      background: rgba(148, 163, 184, 0.35);
      border-radius: 999px;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__header {
      display: flex;
      align-items: center;
      gap: clamp(0.6rem, 2vw, 0.85rem);
      flex: 1 1 auto;
      min-width: 0;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__toggle {
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 42px;
      height: 42px;
      padding: 0;
      margin-left: auto;
      border-radius: 999px;
      border: 1px solid rgba(99, 102, 241, 0.35);
      background: rgba(12, 19, 37, 0.82);
      color: rgba(226, 232, 240, 0.92);
      cursor: pointer;
      box-shadow: 0 18px 34px rgba(6, 12, 28, 0.42);
      transition: border 0.2s ease, background 0.2s ease, color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
      z-index: 2;
      flex-shrink: 0;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__toggle:hover,
    body[data-dashboard-design="aura"] .dashboard-sidebar__toggle:focus-visible {
      border-color: rgba(129, 140, 248, 0.65);
      background: rgba(15, 23, 42, 0.95);
      color: rgba(248, 250, 252, 0.98);
      box-shadow: 0 20px 36px rgba(7, 12, 26, 0.5);
      transform: translateY(-1px);
      outline: none;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__toggle-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 22px;
      height: 22px;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__toggle-icon svg {
      width: 22px;
      height: 22px;
    }

    body[data-dashboard-design="aura"] [data-sidebar-toggle][aria-expanded="true"] .dashboard-sidebar__toggle-icon[data-icon="expand"] {
      display: none;
    }

    body[data-dashboard-design="aura"] [data-sidebar-toggle][aria-expanded="false"] .dashboard-sidebar__toggle-icon[data-icon="collapse"] {
      display: none;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__badge {
      width: fit-content;
      padding: 0.35rem 0.9rem;
      border-radius: 999px;
      background: rgba(99, 102, 241, 0.18);
      color: rgba(191, 219, 254, 0.96);
      font-size: 0.72rem;
      letter-spacing: 0.22em;
      text-transform: uppercase;
      font-weight: 700;
      line-height: 1;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__title {
      margin: 0;
      font-size: clamp(1.2rem, 3vw, 1.5rem);
      letter-spacing: -0.01em;
      line-height: 1.1;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__nav {
      display: grid;
      gap: 0.85rem;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__item {
      display: flex;
      align-items: center;
      gap: 1rem;
      width: 100%;
      padding: 0.9rem 1.1rem;
      border-radius: 20px;
      border: 1px solid transparent;
      background: rgba(12, 19, 37, 0.78);
      color: inherit;
      text-decoration: none;
      cursor: pointer;
      transition: border 0.2s ease, background 0.2s ease, transform 0.2s ease;
      font: inherit;
      text-align: left;
      position: relative;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__item:hover,
    body[data-dashboard-design="aura"] .dashboard-sidebar__item:focus-visible {
      border-color: rgba(94, 234, 212, 0.32);
      background: rgba(14, 23, 45, 0.9);
      transform: translateX(4px);
      outline: none;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__item-wrapper {
      width: 100%;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 42px;
      height: 42px;
      border-radius: 14px;
      background: rgba(99, 102, 241, 0.14);
      color: rgba(129, 140, 248, 0.96);
      box-shadow: inset 0 0 0 1px rgba(129, 140, 248, 0.25);
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__icon svg {
      width: 22px;
      height: 22px;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__meta {
      display: grid;
      gap: 0.3rem;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__label {
      font-weight: 700;
      letter-spacing: -0.01em;
      font-size: 0.98rem;
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__hint {
      color: rgba(203, 213, 225, 0.72);
      font-size: 0.82rem;
      line-height: 1.5;
    }

    body[data-dashboard-design="aura"] .dashboard-content {
      display: grid;
      gap: clamp(2.2rem, 4vw, 3.2rem);
    }

    body[data-dashboard-design="aura"] .dashboard-sidebar__item.is-active {
      border-color: rgba(129, 140, 248, 0.5);
      background: linear-gradient(135deg, rgba(30, 41, 99, 0.85), rgba(59, 130, 246, 0.35));
      box-shadow: 0 18px 36px rgba(9, 14, 30, 0.55);
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] {
      --aura-sidebar-width: var(--aura-sidebar-width-collapsed);
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] main {
      justify-content: center;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar {
      align-items: center;
      padding: var(--aura-header-padding) 0.9rem var(--aura-gutter);
      overflow-x: visible;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__top {
      width: 100%;
      justify-content: center;
      gap: 0;
      margin-top: var(--aura-sidebar-top-gap);
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__toggle {
      margin-left: 0;
      margin-top: 0;
      background: rgba(15, 23, 42, 0.92);
      box-shadow: 0 16px 32px rgba(8, 13, 28, 0.5);
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__header,
    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__badge,
    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__title {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__nav {
      justify-items: center;
      width: 100%;
      gap: 0.65rem;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item-wrapper {
      display: flex;
      justify-content: center;
      width: auto;
      overflow: visible;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item {
      justify-content: center;
      gap: 0;
      padding: 0.85rem;
      width: auto;
      min-width: 0;
      max-width: 100%;
      transform: none;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item:hover,
    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item:focus-visible {
      transform: none;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__meta {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__icon {
      width: 46px;
      height: 46px;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__icon svg {
      width: 24px;
      height: 24px;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item::after {
      content: attr(data-sidebar-label);
      position: absolute;
      top: 50%;
      left: calc(100% + 16px);
      transform: translateY(-50%) scale(0.95);
      transform-origin: left center;
      background: linear-gradient(160deg, rgba(7, 12, 26, 0.95), rgba(12, 20, 42, 0.88));
      border-radius: 14px;
      border: 1px solid rgba(99, 102, 241, 0.3);
      box-shadow: 0 18px 36px rgba(9, 14, 30, 0.55);
      padding: 0.55rem 0.9rem;
      color: rgba(226, 232, 240, 0.92);
      white-space: nowrap;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s ease, transform 0.2s ease;
      z-index: 140;
      min-width: max-content;
      font-size: 0.85rem;
      letter-spacing: -0.01em;
    }

    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item:hover::after,
    body[data-dashboard-design="aura"][data-sidebar-state="collapsed"] .dashboard-sidebar__item:focus-visible::after {
      opacity: 1;
      transform: translateY(-50%) scale(1);
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .dashboard-content__pane {
      display: none;
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .dashboard-content__pane[data-dashboard-pane="overview"].is-active {
      display: contents;
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .dashboard-content__pane[data-dashboard-pane="detail"].is-active {
      display: flex;
      flex-direction: column;
      gap: clamp(1.8rem, 3vw, 2.6rem);
    }

    body[data-dashboard-design="aura"] .welcome {
      position: relative;
      padding: clamp(2.8rem, 5vw, 3.6rem);
      border-radius: clamp(30px, 5vw, 38px);
      border: 1px solid rgba(99, 102, 241, 0.28);
      background: linear-gradient(160deg, rgba(7, 12, 26, 0.95), rgba(12, 20, 42, 0.78));
      box-shadow: 0 36px 64px rgba(5, 10, 22, 0.55);
      overflow: hidden;
      isolation: isolate;
    }

    body[data-dashboard-design="aura"] .welcome::after {
      content: '';
      position: absolute;
      inset: -40% 20% 40% -20%;
      background: radial-gradient(circle, rgba(56, 189, 248, 0.35), transparent 68%);
      opacity: 0.7;
      pointer-events: none;
      filter: blur(12px);
    }

    body[data-dashboard-design="aura"] .welcome h2 {
      margin: 0;
      font-size: clamp(2rem, 5vw, 2.7rem);
      letter-spacing: -0.015em;
    }

    body[data-dashboard-design="aura"] .welcome p {
      margin: 0;
      color: rgba(226, 232, 240, 0.78);
      max-width: 62ch;
      font-size: 1.05rem;
    }

    body[data-dashboard-design="aura"] .studio-card-section {
      margin: 0;
    }

    body[data-dashboard-design="aura"] .studio-card {
      grid-template-columns: minmax(0, 2fr) minmax(0, 1fr);
      align-items: center;
      padding: clamp(2.6rem, 5vw, 3.2rem);
      border-radius: clamp(30px, 5vw, 38px);
      border: 1px solid rgba(56, 189, 248, 0.28);
      background: linear-gradient(160deg, rgba(13, 148, 136, 0.22), rgba(99, 102, 241, 0.28));
      box-shadow: 0 38px 70px rgba(6, 11, 24, 0.55);
    }

    body[data-dashboard-design="aura"] .studio-card__button {
      background: linear-gradient(135deg, #22d3ee, #6366f1);
      color: #020617;
      box-shadow: 0 26px 52px rgba(34, 211, 238, 0.35);
    }

    body[data-dashboard-design="aura"] .cards {
      display: grid;
      gap: clamp(1.6rem, 3vw, 2.4rem);
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }

    body[data-dashboard-design="aura"] .card {
      border-radius: clamp(26px, 4vw, 32px);
      border: 1px solid rgba(99, 102, 241, 0.22);
      background: rgba(8, 14, 30, 0.82);
      box-shadow: 0 28px 48px rgba(6, 12, 26, 0.45);
      gap: 1.1rem;
    }

    body[data-dashboard-design="aura"] .card::before {
      inset: -45% -10% 60% -10%;
      background: radial-gradient(circle, rgba(94, 234, 212, 0.35), transparent 65%);
      opacity: 0.75;
    }

    body[data-dashboard-design="aura"] .card a,
    body[data-dashboard-design="aura"] .card button.card-trigger {
      border-radius: 16px;
      border: 1px solid rgba(94, 234, 212, 0.28);
      background: rgba(10, 18, 36, 0.82);
      color: rgba(207, 250, 254, 0.95);
      letter-spacing: 0.12em;
    }

    body[data-dashboard-design="aura"] .card a:hover,
    body[data-dashboard-design="aura"] .card button.card-trigger:hover {
      border-color: rgba(34, 211, 238, 0.55);
      background: rgba(13, 23, 45, 0.92);
      box-shadow: 0 24px 42px rgba(8, 18, 36, 0.4);
    }

    body[data-dashboard-design="aura"] .card--highlight {
      border-color: rgba(192, 132, 252, 0.35);
      background: linear-gradient(160deg, rgba(76, 29, 149, 0.85), rgba(14, 116, 144, 0.8));
      box-shadow: 0 32px 54px rgba(76, 29, 149, 0.45);
    }

    body[data-dashboard-design="aura"] .notifications-toggle {
      border: 1px solid rgba(94, 234, 212, 0.28);
      background: rgba(13, 23, 45, 0.75);
      box-shadow: 0 22px 40px rgba(6, 12, 26, 0.45);
    }

    body[data-dashboard-design="aura"] .profile-toggle {
      border: 1px solid rgba(99, 102, 241, 0.28);
      background: rgba(12, 19, 37, 0.75);
      box-shadow: 0 22px 44px rgba(5, 10, 22, 0.45);
    }

    body[data-dashboard-design="aura"] .notifications-panel {
      margin-top: 1rem;
      border-radius: 30px;
      border: 1px solid rgba(99, 102, 241, 0.28);
      background: linear-gradient(175deg, rgba(7, 12, 26, 0.95), rgba(11, 18, 36, 0.9));
      box-shadow: 0 32px 60px rgba(5, 10, 20, 0.55);
    }

    body[data-dashboard-design="aura"]:not([data-inline-modals="enabled"]) .modal {
      padding: clamp(1.6rem, 4vw, 2.8rem);
      background: rgba(1, 4, 12, 0.7);
      backdrop-filter: blur(28px);
    }

    body[data-dashboard-design="aura"]:not([data-inline-modals="enabled"]) .modal__content {
      width: min(1120px, 96vw);
      height: calc(100vh - clamp(3.2rem, 8vw, 5rem));
      max-height: calc(100vh - clamp(3.2rem, 8vw, 5rem));
      border-radius: clamp(26px, 4vw, 34px);
      box-shadow: 0 42px 80px rgba(3, 6, 18, 0.65);
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .modal:not([data-modal-inline="overlay"]) {
      position: static;
      inset: auto;
      display: none;
      padding: 0;
      background: none;
      backdrop-filter: none;
      box-shadow: none;
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .modal.is-inline-open:not([data-modal-inline="overlay"]) {
      display: block;
    }

    body[data-dashboard-design="aura"][data-inline-modals="enabled"] .dashboard-content__pane[data-dashboard-pane="detail"] .modal__content {
      width: 100%;
      max-width: none;
      height: auto;
      max-height: none;
      border-radius: clamp(30px, 5vw, 38px);
      box-shadow: var(--shadow);
      opacity: 1;
      transform: none;
      transition: none;
    }

    body[data-dashboard-design="aura"] footer {
      width: calc(100% - var(--aura-sidebar-width));
      margin-left: var(--aura-sidebar-width);
      margin-right: 0;
      margin-top: var(--aura-gutter);
      margin-bottom: 0;
      border-radius: 0;
      border: none;
      background: linear-gradient(160deg, rgba(7, 12, 26, 0.94), rgba(10, 18, 36, 0.9));
      box-shadow: none;
      padding: clamp(1.6rem, 4vw, 2.4rem) var(--aura-gutter);
    }

    @media (max-width: 1180px) {
      body[data-dashboard-design="focus"] .studio-card {
        grid-template-columns: 1fr;
        justify-items: start;
      }

      body[data-dashboard-design="focus"] .studio-card__button {
        justify-self: start;
      }

      body[data-dashboard-design="aura"] {
        --aura-sidebar-width: clamp(220px, 38vw, 260px);
        --aura-sidebar-width-collapsed: clamp(70px, 14vw, 92px);
      }

      body[data-dashboard-design="aura"] .page-header {
        left: 0;
        right: 0;
        width: 100%;
        padding-left: var(--aura-gutter);
      }

      body[data-dashboard-design="aura"] .page-header--sticky {
        left: 0;
        right: 0;
        width: 100%;
      }

      body[data-dashboard-design="aura"] main {
        width: 100%;
        padding-left: var(--aura-gutter);
        margin-left: 0;
        justify-content: flex-start;
      }

      body[data-dashboard-design="aura"] .dashboard-shell {
        width: min(100%, 96vw);
      }

      body[data-dashboard-design="aura"] .dashboard-sidebar {
        position: relative;
        top: 0;
        left: 0;
        width: 100%;
        height: auto;
        max-height: none;
        border-radius: clamp(26px, 5vw, 34px);
        border-right: 1px solid rgba(99, 102, 241, 0.28);
        box-shadow: 0 32px 60px rgba(5, 10, 22, 0.55);
        margin-bottom: var(--aura-gutter);
        overflow: visible;
      }

      body[data-dashboard-design="aura"] footer {
        width: 100%;
        margin: var(--aura-gutter) 0 0;
        padding-inline: var(--aura-gutter);
      }
    }

    @media (max-width: 1040px) {
      body[data-dashboard-design="focus"] .cards {
        grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      }

      body[data-dashboard-design="focus"] .cards > .card,
      body[data-dashboard-design="focus"] .cards > .card:first-child,
      body[data-dashboard-design="focus"] .cards > .card:nth-child(2) {
        grid-column: span 1;
      }
    }

    @media (max-width: 880px) {
      body[data-dashboard-design="focus"] main {
        width: min(100%, 94vw);
        margin-bottom: clamp(2.4rem, 8vw, 3.2rem);
      }

      body[data-dashboard-design="focus"] .page-header,
      body[data-dashboard-design="focus"] footer {
        width: min(100%, 96vw);
      }

      body[data-dashboard-design="aura"] {
        --aura-gutter: clamp(1.2rem, 6vw, 1.8rem);
      }

      body[data-dashboard-design="aura"] .page-header {
        padding: clamp(1rem, 5vw, 1.4rem) var(--aura-gutter);
      }

      body[data-dashboard-design="aura"] main {
        width: 100%;
        margin: 0;
        margin-left: 0;
        padding: calc(var(--aura-gutter) + clamp(0.4rem, 3vw, 0.8rem)) var(--aura-gutter) var(--aura-gutter);
      }

      body[data-dashboard-design="aura"] footer {
        width: min(100%, 94vw);
      }
    }

    @media (max-width: 780px) {
      body[data-dashboard-design="focus"] .page-header {
        margin-inline: auto;
        border-radius: clamp(22px, 6vw, 28px);
      }

      body[data-dashboard-design="focus"] .page-header--sticky {
        left: 0;
        right: 0;
        transform: none;
        width: 100%;
        border-radius: 0;
      }

      body[data-dashboard-design="focus"] main {
        width: 100%;
        margin-inline: 0;
        padding-inline: clamp(1.2rem, 6vw, 1.6rem);
      }

      body[data-dashboard-design="focus"] .welcome,
      body[data-dashboard-design="focus"] .studio-card,
      body[data-dashboard-design="focus"] .cards {
        padding: clamp(1.6rem, 6vw, 2.2rem);
      }

      body[data-dashboard-design="focus"] footer {
        width: 100%;
        padding-inline: clamp(1.2rem, 6vw, 1.8rem);
      }

      body[data-dashboard-design="aura"] main {
        padding-inline: clamp(1rem, 6vw, 1.4rem);
      }

      body[data-dashboard-design="aura"] .welcome,
      body[data-dashboard-design="aura"] .studio-card,
      body[data-dashboard-design="aura"] .cards {
        padding: clamp(1.4rem, 6vw, 1.9rem);
      }

      body[data-dashboard-design="aura"] footer {
        padding: clamp(1.1rem, 6vw, 1.6rem);
      }
    }

    @media (max-width: 1024px) {
      body[data-dashboard-design="vision"] .cards {
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      }

      body[data-dashboard-design="vision"] .cards > .card,
      body[data-dashboard-design="vision"] .cards > .card:first-child,
      body[data-dashboard-design="vision"] .cards > .card:nth-child(2) {
        grid-column: span 1;
      }
    }

    @media (max-width: 720px) {
      body[data-dashboard-design="vision"] main {
        padding-inline: clamp(1rem, 6vw, 1.5rem);
      }

      body[data-dashboard-design="vision"] .welcome,
      body[data-dashboard-design="vision"] .studio-card,
      body[data-dashboard-design="vision"] .cards {
        padding: clamp(1.6rem, 6vw, 2rem);
      }
    }

    .card a:hover,
    .card button.card-trigger:hover {
      transform: translateY(-2px);
    }

    .card--highlight {
      border: 1px solid rgba(244, 114, 182, 0.4);
      background: linear-gradient(180deg, rgba(15, 23, 42, 0.95), rgba(30, 41, 59, 0.82));
    }

    .modal {
      position: fixed;
      inset: 0;
      display: grid;
      align-items: center;
      justify-items: center;
      padding: clamp(1.5rem, 4vw, 3rem);
      background: rgba(2, 6, 23, 0.65);
      backdrop-filter: blur(18px);
      z-index: 120;
      opacity: 0;
      pointer-events: none;
      visibility: hidden;
      --modal-origin-x: 50%;
      --modal-origin-y: 50%;
      --modal-animation-duration: 320ms;
      --modal-translate-x: 0px;
      --modal-translate-y: 0px;
      --modal-scale-start: 0.65;
      transition: opacity var(--modal-animation-duration, 320ms) ease;
      overflow: hidden;
      overscroll-behavior: contain;
    }

    .modal.is-visible {
      visibility: visible;
    }

    .modal.is-open {
      opacity: 1;
      pointer-events: auto;
    }

    .modal,
    .modal__content {
      -webkit-overflow-scrolling: touch;
      scrollbar-width: thin;
      scrollbar-color: rgba(148, 163, 184, 0.45) transparent;
    }

    .modal::-webkit-scrollbar,
    .modal__content::-webkit-scrollbar {
      width: 8px;
    }

    .modal::-webkit-scrollbar-track,
    .modal__content::-webkit-scrollbar-track {
      background: transparent;
    }

    .modal::-webkit-scrollbar-thumb,
    .modal__content::-webkit-scrollbar-thumb {
      background: linear-gradient(180deg, rgba(148, 163, 184, 0.6), rgba(99, 102, 241, 0.6));
      border-radius: 999px;
    }

    .modal::-webkit-scrollbar-thumb:hover,
    .modal__content::-webkit-scrollbar-thumb:hover {
      background: linear-gradient(180deg, rgba(148, 163, 184, 0.75), rgba(99, 102, 241, 0.75));
    }

    body.has-open-modal {
      position: fixed;
      width: 100%;
      overflow: hidden;
      left: 0;
      right: 0;
    }

    .modal__content {
      position: relative;
      --modal-content-radius: clamp(28px, 4vw, 34px);
      width: min(920px, 100%);
      border-radius: var(--modal-content-radius);
      background:
        radial-gradient(120% 120% at 0% 0%, rgba(99, 102, 241, 0.28) 0%, rgba(99, 102, 241, 0) 62%),
        radial-gradient(120% 120% at 100% 0%, rgba(236, 72, 153, 0.24) 0%, rgba(236, 72, 153, 0) 65%),
        radial-gradient(140% 140% at 50% 100%, rgba(14, 165, 233, 0.2) 0%, rgba(14, 165, 233, 0) 70%),
        linear-gradient(160deg, rgba(15, 23, 42, 0.98) 0%, rgba(17, 25, 40, 0.95) 40%, rgba(30, 41, 59, 0.9) 100%);
      border: 1px solid rgba(148, 163, 184, 0.22);
      padding: clamp(2rem, 4vw, 3rem);
      box-shadow: 0 50px 100px rgba(2, 6, 23, 0.55);
      transform-origin: var(--modal-origin-x) var(--modal-origin-y);
      transform: translate3d(var(--modal-translate-x, 0), var(--modal-translate-y, 0), 0)
        scale(var(--modal-scale-start, 0.65));
      opacity: 0;
      transition:
        transform var(--modal-animation-duration, 320ms) cubic-bezier(0.16, 1, 0.3, 1),
        opacity var(--modal-animation-duration, 320ms) ease;
      will-change: transform, opacity;
      display: grid;
      grid-template-rows: auto minmax(0, 1fr);
      gap: clamp(1.6rem, 3vw, 2.4rem);
      overflow: hidden;
      max-height: min(90vh, 860px);
      overflow-y: auto;
      scrollbar-gutter: stable both-edges;
    }

    .modal.is-open .modal__content {
      opacity: 1;
      transform: translate3d(0, 0, 0) scale(1);
    }

    @media (prefers-reduced-motion: reduce) {
      .modal {
        transition: none !important;
      }

      .modal__content {
        transition: none !important;
        transform: none !important;
      }

      .modal.is-open .modal__content {
        transform: none !important;
      }
    }

    @supports (clip-path: inset(0 round 10px)) {
      .modal__content {
        clip-path: inset(0 round var(--modal-content-radius));
      }
    }

    .modal__content::before {
      content: '';
      position: absolute;
      inset: -35% -15% 35% -15%;
      background:
        radial-gradient(120% 120% at 20% 15%, rgba(99, 102, 241, 0.55) 0%, rgba(99, 102, 241, 0) 60%),
        radial-gradient(120% 120% at 85% 15%, rgba(236, 72, 153, 0.45) 0%, rgba(236, 72, 153, 0) 65%),
        radial-gradient(160% 140% at 50% 100%, rgba(14, 165, 233, 0.35) 0%, rgba(14, 165, 233, 0) 70%);
      filter: blur(18px);
      opacity: 0.85;
      pointer-events: none;
      border-radius: inherit;
    }

    .modal__inner {
      position: relative;
      display: grid;
      gap: clamp(1.4rem, 3vw, 2rem);
      min-height: 0;
      z-index: 1;
    }

    .modal__close,
    .modal__back {
      position: absolute;
      top: 1.2rem;
      width: 44px;
      height: 44px;
      border-radius: 50%;
      border: 1px solid rgba(148, 163, 184, 0.35);
      background: rgba(2, 6, 23, 0.65);
      color: #f8fafc;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.2s ease, border 0.2s ease;
    }

    .modal__close {
      right: 1.2rem;
    }

    .modal__back {
      left: 1.2rem;
    }

    .modal__close:hover,
    .modal__back:hover,
    .modal__close:focus-visible,
    .modal__back:focus-visible {
      transform: scale(1.05);
      border-color: rgba(99, 102, 241, 0.55);
      outline: none;
    }

    .admin-user-modal__top-bar {
      position: absolute;
      top: clamp(1.6rem, 3.5vw, 2.6rem);
      left: clamp(1.6rem, 3.5vw, 2.6rem);
      right: clamp(1.6rem, 3.5vw, 2.6rem);
      display: flex;
      align-items: center;
      justify-content: space-between;
      pointer-events: none;
      margin: 0;
      padding: 0;
      background: none;
      z-index: 3;
    }

    .admin-user-modal__top-bar > * {
      pointer-events: auto;
    }

    .admin-user-modal {
      padding-top: clamp(2.4rem, 4vw, 3.4rem);
    }

    .admin-user-modal .modal__close,
    .admin-user-modal .modal__back {
      position: static;
      inset: auto;
      min-width: 0;
      padding: 0;
      border: none;
      background: transparent;
      color: inherit;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      transition: transform 0.2s ease, filter 0.2s ease;
    }

    .admin-user-modal .modal__close:focus-visible,
    .admin-user-modal .modal__back:focus-visible {
      outline: none;
    }

    .admin-user-modal .modal__close:hover,
    .admin-user-modal .modal__back:hover,
    .admin-user-modal .modal__close:focus-visible,
    .admin-user-modal .modal__back:focus-visible {
      transform: translateY(-1px);
    }

    .modal__content.mastering-modal {
      width: min(1100px, 100%);
    }

    .modal__content.royalties-modal {
      width: min(1100px, 100%);
      padding-bottom: clamp(2.6rem, 4.5vw, 3.8rem);
    }

    .modal__content.smartlinks-modal {
      width: min(1120px, 100%);
      padding: clamp(2rem, 3vw, 3.4rem);
      background: linear-gradient(150deg, rgba(17, 24, 39, 0.96), rgba(15, 23, 42, 0.92));
    }

    .modal__content.smartlinks-modal > .modal__close {
      position: absolute;
      top: clamp(1rem, 2vw, 1.4rem);
      right: clamp(1rem, 2vw, 1.4rem);
      margin: 0;
      justify-self: auto;
      z-index: 3;
    }

    .modal__content.payments-modal {
      width: min(1080px, 100%);
      padding: clamp(2rem, 3vw, 3.2rem);
      background: linear-gradient(150deg, rgba(17, 24, 39, 0.95), rgba(15, 23, 42, 0.9));
    }

    .modal__content.distribution-modal {
      width: min(640px, 100%);
      padding: clamp(2rem, 3.2vw, 3rem);
      background: linear-gradient(160deg, rgba(15, 23, 42, 0.97), rgba(30, 41, 59, 0.92));
    }

    .distribution-modal__inner {
      position: relative;
      display: grid;
      gap: clamp(1.4rem, 3vw, 2.2rem);
      z-index: 1;
    }

    .distribution-modal__header {
      display: grid;
      gap: 0.75rem;
    }

    .distribution-modal__badge {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      padding: 0.35rem 0.9rem;
      border-radius: 999px;
      background: rgba(129, 140, 248, 0.2);
      color: rgba(196, 210, 255, 0.95);
      font-size: 0.75rem;
      font-weight: 700;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      box-shadow: 0 14px 30px rgba(79, 70, 229, 0.28);
    }

    .distribution-modal__header h2 {
      margin: 0;
      font-size: clamp(1.9rem, 3.6vw, 2.3rem);
      letter-spacing: -0.015em;
    }

    .distribution-modal__subtitle {
      margin: 0;
      color: rgba(203, 213, 225, 0.82);
      font-size: 1rem;
      line-height: 1.6;
    }

    .distribution-modal__features {
      margin: 0;
      padding: 0;
      list-style: none;
      display: grid;
      gap: 0.85rem;
    }

    .distribution-modal__features li {
      display: grid;
      grid-template-columns: auto 1fr;
      gap: 0.9rem;
      align-items: start;
      color: rgba(226, 232, 240, 0.92);
      font-size: 0.98rem;
      line-height: 1.6;
    }

    .distribution-modal__feature-icon {
      width: 36px;
      height: 36px;
      border-radius: 12px;
      background: rgba(99, 102, 241, 0.18);
      color: rgba(129, 140, 248, 0.95);
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    .distribution-modal__footer {
      display: grid;
      gap: 0.75rem;
    }

    .distribution-modal__cta {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.65rem;
      padding: 0.9rem 1.6rem;
      border-radius: 18px;
      border: none;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.95), rgba(147, 51, 234, 0.95));
      color: #f8fafc;
      font-weight: 700;
      font-size: 1rem;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
    }

    .distribution-modal__cta svg {
      flex-shrink: 0;
    }

    .distribution-modal__cta:hover,
    .distribution-modal__cta:focus-visible {
      transform: translateY(-1px);
      box-shadow: 0 24px 42px rgba(59, 130, 246, 0.32);
      outline: none;
    }

    .distribution-modal__cta[disabled] {
      opacity: 0.65;
      cursor: not-allowed;
      box-shadow: none;
      transform: none;
    }

    .distribution-modal__feedback {
      margin: 0;
      min-height: 1.2rem;
      font-size: 0.9rem;
      color: #fca5a5;
    }

    .distribution-modal__checkbox {
      display: inline-flex;
      align-items: center;
      gap: 0.6rem;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.85);
      cursor: pointer;
      user-select: none;
    }

    .distribution-modal__checkbox input {
      width: 18px;
      height: 18px;
      border-radius: 6px;
      border: 1px solid rgba(148, 163, 184, 0.45);
      background: rgba(15, 23, 42, 0.6);
      accent-color: #60a5fa;
    }

    .distribution-modal__footnote {
      margin: 0;
      color: rgba(148, 163, 184, 0.8);
      font-size: 0.85rem;
    }

    .modal__content.publishing-modal {
      width: min(1080px, 100%);
      padding: clamp(2.4rem, 4.5vw, 3.6rem);
      background:
        radial-gradient(120% 160% at 0% 10%, rgba(244, 114, 182, 0.25) 0%, rgba(244, 114, 182, 0) 55%),
        radial-gradient(120% 140% at 90% 10%, rgba(56, 189, 248, 0.24) 0%, rgba(56, 189, 248, 0) 60%),
        radial-gradient(160% 120% at 50% 100%, rgba(45, 212, 191, 0.18) 0%, rgba(45, 212, 191, 0) 70%),
        linear-gradient(160deg, rgba(8, 47, 73, 0.98) 0%, rgba(12, 74, 110, 0.92) 45%, rgba(15, 23, 42, 0.95) 100%);
    }

    .publishing-modal__inner {
      position: relative;
      display: grid;
      gap: clamp(1.8rem, 3.8vw, 3rem);
      z-index: 1;
    }

    .publishing-modal__hero {
      display: grid;
      grid-template-columns: minmax(0, 1.05fr) minmax(0, 0.95fr);
      gap: clamp(1.8rem, 3vw, 2.6rem);
      align-items: stretch;
    }

    .publishing-modal__visual {
      position: relative;
      display: grid;
      border-radius: clamp(26px, 4vw, 34px);
      overflow: hidden;
      min-height: clamp(260px, 40vw, 360px);
      background: linear-gradient(130deg, rgba(15, 118, 110, 0.35), rgba(56, 189, 248, 0.12) 45%, rgba(8, 47, 73, 0.85));
      box-shadow: 0 30px 60px rgba(8, 47, 73, 0.45);
      isolation: isolate;
    }

    .publishing-modal__visual img {
      display: block;
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
    }

    .publishing-modal__visual::before {
      content: '';
      position: absolute;
      inset: 0;
      background: radial-gradient(120% 120% at 30% 20%, rgba(236, 72, 153, 0.35) 0%, rgba(236, 72, 153, 0) 60%);
      mix-blend-mode: screen;
      opacity: 0.9;
    }

    .publishing-modal__hero-copy {
      display: grid;
      gap: 1rem;
      align-content: start;
    }

    .publishing-modal__badge {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.45rem 1.1rem;
      border-radius: 999px;
      font-size: 0.78rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-weight: 700;
      background: rgba(226, 232, 240, 0.15);
      color: rgba(240, 249, 255, 0.92);
      box-shadow: 0 14px 30px rgba(8, 47, 73, 0.45);
    }

    .publishing-modal__subtitle {
      margin: 0;
      color: rgba(226, 232, 240, 0.88);
      font-size: clamp(1.02rem, 2.2vw, 1.18rem);
      line-height: 1.6;
    }

    .publishing-modal__highlight {
      margin: 0;
      color: rgba(240, 249, 255, 0.75);
      font-size: 0.95rem;
      letter-spacing: 0.04em;
      text-transform: uppercase;
    }

    .publishing-modal__stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: 1rem;
    }

    .publishing-modal__stat {
      padding: 1rem 1.1rem;
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.24);
      background: rgba(15, 23, 42, 0.45);
      display: grid;
      gap: 0.3rem;
    }

    .publishing-modal__stat strong {
      font-size: clamp(1.3rem, 2.6vw, 1.75rem);
      color: #f8fafc;
      letter-spacing: -0.02em;
    }

    .publishing-modal__stat span {
      font-size: 0.85rem;
      color: rgba(203, 213, 225, 0.85);
      text-transform: uppercase;
      letter-spacing: 0.08em;
    }

    .publishing-modal__hero-actions {
      display: inline-flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      margin-top: 0.5rem;
    }

    .publishing-modal__cta {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.55rem;
      padding: 0.9rem 1.8rem;
      border-radius: 16px;
      border: none;
      font-weight: 700;
      letter-spacing: 0.01em;
      font-size: 0.95rem;
      text-decoration: none;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.95), rgba(236, 72, 153, 0.95));
      color: #f8fafc;
      box-shadow: 0 22px 45px rgba(37, 99, 235, 0.35);
      transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
      cursor: pointer;
    }

    .publishing-modal__cta:hover,
    .publishing-modal__cta:focus-visible {
      transform: translateY(-1px);
      box-shadow: 0 28px 60px rgba(37, 99, 235, 0.42);
      outline: none;
    }

    .publishing-modal__cta[disabled] {
      opacity: 0.65;
      cursor: not-allowed;
      box-shadow: none;
    }

    .publishing-modal__cta.is-loading {
      position: relative;
      color: rgba(248, 250, 252, 0.8);
    }

    .publishing-modal__cta.is-loading::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 1.2rem;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid rgba(248, 250, 252, 0.45);
      border-top-color: #f8fafc;
      transform: translateY(-50%);
      animation: masteringSpin 0.8s linear infinite;
    }

    .publishing-modal__feedback {
      margin: 0.5rem 0 0;
      font-size: 0.9rem;
      color: rgba(203, 213, 225, 0.85);
    }

    .publishing-modal__feedback[hidden] {
      display: none !important;
    }

    .publishing-modal__feedback.error {
      color: #fda4af;
    }

    .publishing-modal__feedback.success {
      color: #a7f3d0;
    }

    .publishing-modal__section {
      display: grid;
      gap: 1.25rem;
    }

    .publishing-modal__section-header {
      display: grid;
      gap: 0.65rem;
      max-width: 720px;
    }

    .publishing-modal__section-header p {
      margin: 0;
      color: rgba(203, 213, 225, 0.85);
      font-size: 0.98rem;
      line-height: 1.6;
    }

    .publishing-modal__features {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: clamp(1.1rem, 2.5vw, 1.6rem);
    }

    .publishing-feature {
      padding: clamp(1.2rem, 2.5vw, 1.6rem);
      border-radius: 22px;
      background: rgba(15, 23, 42, 0.55);
      border: 1px solid rgba(148, 163, 184, 0.22);
      display: grid;
      gap: 0.65rem;
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.2);
    }

    .publishing-feature h4 {
      margin: 0;
      font-size: 1.1rem;
      letter-spacing: -0.01em;
      color: rgba(248, 250, 252, 0.95);
    }

    .publishing-feature p {
      margin: 0;
      color: rgba(203, 213, 225, 0.85);
      line-height: 1.6;
      font-size: 0.95rem;
    }

    .publishing-modal__royalties-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: clamp(1.1rem, 2.5vw, 1.6rem);
    }

    .publishing-royalty {
      position: relative;
      padding: clamp(1.2rem, 2.5vw, 1.6rem);
      border-radius: 20px;
      background: linear-gradient(150deg, rgba(20, 83, 45, 0.45), rgba(15, 23, 42, 0.75));
      border: 1px solid rgba(74, 222, 128, 0.28);
      display: grid;
      gap: 0.55rem;
      overflow: hidden;
    }

    .publishing-royalty::before {
      content: '';
      position: absolute;
      inset: 0;
      background: radial-gradient(120% 120% at 20% 20%, rgba(74, 222, 128, 0.28) 0%, rgba(74, 222, 128, 0) 60%);
      mix-blend-mode: screen;
      opacity: 0.9;
      pointer-events: none;
    }

    .publishing-royalty h4 {
      margin: 0;
      font-size: 1.05rem;
      color: rgba(240, 253, 244, 0.95);
      letter-spacing: -0.01em;
    }

    .publishing-royalty p {
      margin: 0;
      color: rgba(209, 250, 229, 0.85);
      line-height: 1.55;
      font-size: 0.93rem;
    }

    .publishing-modal__pricing {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: clamp(1rem, 2.4vw, 1.6rem);
    }

    .publishing-pricing-card {
      padding: clamp(1.4rem, 2.8vw, 1.8rem);
      border-radius: 24px;
      background: linear-gradient(160deg, rgba(59, 130, 246, 0.25), rgba(236, 72, 153, 0.2));
      border: 1px solid rgba(148, 163, 184, 0.25);
      display: grid;
      gap: 0.55rem;
      text-align: center;
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.2);
    }

    .publishing-pricing-card strong {
      font-size: clamp(1.6rem, 3.2vw, 2.2rem);
      color: #f8fafc;
      letter-spacing: -0.02em;
    }

    .publishing-pricing-card span {
      display: block;
      font-size: 0.95rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(224, 231, 255, 0.85);
    }

    .publishing-pricing-card p {
      margin: 0;
      color: rgba(226, 232, 240, 0.85);
      font-size: 0.95rem;
      line-height: 1.5;
    }

    .publishing-modal__testimonial {
      padding: clamp(1.6rem, 3.2vw, 2rem);
      border-radius: 26px;
      background: linear-gradient(140deg, rgba(12, 74, 110, 0.6), rgba(30, 64, 175, 0.55));
      border: 1px solid rgba(148, 163, 184, 0.28);
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.2);
      display: grid;
      gap: 0.8rem;
    }

    .publishing-modal__testimonial blockquote {
      margin: 0;
      font-size: clamp(1.05rem, 2.4vw, 1.3rem);
      line-height: 1.6;
      color: rgba(248, 250, 252, 0.95);
      font-style: italic;
    }

    .publishing-modal__testimonial cite {
      font-style: normal;
      color: rgba(224, 231, 255, 0.85);
      font-size: 0.95rem;
    }

    .publishing-modal__footnote {
      margin: 0;
      color: rgba(203, 213, 225, 0.75);
      font-size: 0.85rem;
    }

    @media (max-width: 980px) {
      .publishing-modal__hero {
        grid-template-columns: minmax(0, 1fr);
      }
      .publishing-modal__visual {
        min-height: clamp(200px, 60vw, 320px);
      }
    }

    @media (max-width: 640px) {
      .publishing-modal__hero-actions {
        width: 100%;
      }
      .publishing-modal__cta,
      .publishing-modal__cta--secondary {
        flex: 1 1 100%;
        justify-content: center;
      }
      .publishing-modal__stats {
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
      }
    }

    .modal__content.cloud-modal {
      width: min(1040px, 100%);
      padding: clamp(2.2rem, 4vw, 3.6rem);
      background: linear-gradient(160deg, rgba(15, 23, 42, 0.97), rgba(15, 23, 42, 0.92) 45%, rgba(17, 24, 39, 0.9) 100%);
    }

    .cloud-modal__inner {
      position: relative;
      display: grid;
      gap: clamp(1.8rem, 3.6vw, 2.8rem);
      z-index: 1;
    }

    .cloud-modal__hero {
      display: grid;
      gap: 0.75rem;
      max-width: 640px;
    }

    .cloud-modal__badge {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      padding: 0.4rem 0.95rem;
      border-radius: 999px;
      font-size: 0.78rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-weight: 700;
      background: rgba(129, 140, 248, 0.18);
      color: rgba(196, 210, 255, 0.92);
      box-shadow: 0 12px 30px rgba(79, 70, 229, 0.25);
    }

    .cloud-modal__hero h2 {
      margin: 0;
      font-size: clamp(2rem, 4vw, 2.6rem);
      letter-spacing: -0.02em;
    }

    .cloud-modal__subtitle {
      margin: 0;
      color: rgba(203, 213, 225, 0.82);
      font-size: clamp(1rem, 2.1vw, 1.15rem);
      max-width: 56ch;
    }

    .cloud-modal__layout {
      display: grid;
      grid-template-columns: minmax(0, 1fr) minmax(0, 1.35fr);
      gap: clamp(1.8rem, 3.8vw, 3rem);
      align-items: stretch;
    }

    .cloud-modal__visual {
      position: relative;
      border-radius: clamp(24px, 4vw, 32px);
      padding: clamp(1.8rem, 3.5vw, 2.4rem);
      display: grid;
      place-items: center;
      isolation: isolate;
      overflow: hidden;
      background:
        linear-gradient(155deg, rgba(2, 132, 199, 0.18), rgba(99, 102, 241, 0.08)),
        rgba(15, 23, 42, 0.72);
      border: 1px solid rgba(148, 163, 184, 0.18);
      min-height: 280px;
    }

    .cloud-modal__glow {
      position: absolute;
      border-radius: 50%;
      filter: blur(38px);
      opacity: 0.7;
      transform: translate(-50%, -50%);
      z-index: -1;
    }

    .cloud-modal__glow--primary {
      width: 220px;
      height: 220px;
      top: 20%;
      left: 28%;
      background: radial-gradient(circle, rgba(99, 102, 241, 0.55) 0%, rgba(99, 102, 241, 0) 70%);
    }

    .cloud-modal__glow--secondary {
      width: 260px;
      height: 260px;
      bottom: -10%;
      right: -5%;
      background: radial-gradient(circle, rgba(236, 72, 153, 0.45) 0%, rgba(236, 72, 153, 0) 70%);
    }

    .cloud-modal__illustration {
      width: min(100%, 340px);
      height: auto;
    }

    .cloud-modal__content {
      display: grid;
      gap: clamp(1.6rem, 3vw, 2.4rem);
    }

    .cloud-modal__section {
      display: grid;
      gap: 1.1rem;
    }

    .cloud-modal__section h3 {
      margin: 0;
      font-size: clamp(1.3rem, 2.5vw, 1.5rem);
    }

    .cloud-modal__features,
    .cloud-modal__highlights {
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: clamp(0.8rem, 2vw, 1.1rem);
    }

    .cloud-modal__feature {
      display: grid;
      grid-template-columns: auto minmax(0, 1fr);
      gap: 1rem;
      align-items: flex-start;
      padding: clamp(0.95rem, 2vw, 1.2rem);
      border-radius: clamp(18px, 3vw, 22px);
      background: rgba(15, 23, 42, 0.7);
      border: 1px solid rgba(148, 163, 184, 0.16);
      box-shadow: 0 14px 45px rgba(2, 6, 23, 0.38);
    }

    .cloud-modal__feature-icon {
      width: 44px;
      height: 44px;
      border-radius: 14px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.85), rgba(236, 72, 153, 0.85));
      color: #f8fafc;
      box-shadow: 0 16px 35px rgba(79, 70, 229, 0.35);
    }

    .cloud-modal__feature-copy h4 {
      margin: 0;
      font-size: 1.05rem;
    }

    .cloud-modal__feature-copy p {
      margin: 0.4rem 0 0;
      color: rgba(203, 213, 225, 0.78);
      line-height: 1.55;
    }

    .cloud-modal__highlights li {
      display: grid;
      grid-template-columns: auto minmax(0, 1fr);
      gap: 0.75rem;
      align-items: flex-start;
      padding: 0.75rem 1rem;
      border-radius: 16px;
      background: rgba(15, 23, 42, 0.6);
      border: 1px solid rgba(148, 163, 184, 0.16);
      color: rgba(203, 213, 225, 0.78);
      font-size: 0.98rem;
      line-height: 1.5;
    }

    .cloud-modal__pricing {
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: clamp(0.75rem, 2vw, 1rem);
    }

    .cloud-modal__pricing-item {
      display: grid;
      gap: 0.4rem;
      padding: clamp(0.95rem, 2vw, 1.2rem);
      border-radius: clamp(16px, 3vw, 20px);
      background: rgba(15, 23, 42, 0.68);
      border: 1px solid rgba(148, 163, 184, 0.18);
      box-shadow: 0 12px 30px rgba(2, 6, 23, 0.32);
    }

    .cloud-modal__pricing-label {
      font-size: 0.95rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.95);
    }

    .cloud-modal__pricing-value {
      margin: 0;
      font-size: 1.05rem;
      font-weight: 600;
      color: #f8fafc;
    }

    .cloud-modal__highlight-icon {
      width: 28px;
      height: 28px;
      border-radius: 50%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background: rgba(99, 102, 241, 0.24);
      color: rgba(196, 210, 255, 0.9);
    }

    .cloud-modal__cta {
      display: grid;
      gap: 0.85rem;
    }

    .cloud-modal__cta-button {
      display: inline-flex;
      align-items: center;
      justify-content: flex-start;
      gap: 0.75rem;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      color: #fff;
      padding: 0.95rem 1.6rem;
      border-radius: 18px;
      font-weight: 700;
      text-decoration: none;
      box-shadow: 0 24px 55px rgba(79, 70, 229, 0.35);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .cloud-modal__cta-button:hover,
    .cloud-modal__cta-button:focus-visible {
      transform: translateY(-2px);
      box-shadow: 0 32px 60px rgba(79, 70, 229, 0.45);
      outline: none;
    }

    .cloud-modal__checkbox {
      display: inline-flex;
      align-items: center;
      gap: 0.6rem;
      font-size: 0.92rem;
      color: rgba(203, 213, 225, 0.76);
      cursor: pointer;
      user-select: none;
    }

    .cloud-modal__checkbox input {
      width: 18px;
      height: 18px;
      border-radius: 6px;
      border: 1px solid rgba(148, 163, 184, 0.45);
      background: rgba(15, 23, 42, 0.6);
      accent-color: #6366f1;
    }

    .cloud-modal__footnote {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.7);
    }

    @media (max-width: 1024px) {
      .cloud-modal__layout {
        grid-template-columns: 1fr;
      }

      .cloud-modal__visual {
        order: -1;
      }

      .cloud-modal__illustration {
        max-width: 300px;
      }
    }

    @media (max-width: 640px) {
      .cloud-modal__content {
        gap: 1.4rem;
      }

      .cloud-modal__feature,
      .cloud-modal__highlights li {
        grid-template-columns: minmax(0, 1fr);
      }

      .cloud-modal__feature-icon,
      .cloud-modal__highlight-icon {
        width: 36px;
        height: 36px;
      }
    }

    .modal__content.login-history-modal,
    .admin-user-modal__view .login-history-modal {
      width: min(720px, 100%);
      padding: clamp(1.8rem, 3vw, 2.6rem);
      background: linear-gradient(150deg, rgba(15, 23, 42, 0.96), rgba(10, 12, 26, 0.92));
      gap: clamp(1.2rem, 3vw, 1.8rem);
    }

    .login-history-modal__inner {
      position: relative;
      display: flex;
      flex-direction: column;
      gap: clamp(1.4rem, 2.4vw, 2rem);
      z-index: 1;
    }

    .login-history-modal__header {
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      gap: 1.2rem;
      flex-wrap: wrap;
    }

    .login-history-modal__titles {
      display: grid;
      gap: 0.6rem;
    }

    .login-history-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      padding: 0.3rem 0.75rem;
      border-radius: 999px;
      text-transform: uppercase;
      font-size: 0.72rem;
      letter-spacing: 0.08em;
      font-weight: 700;
      background: rgba(99, 102, 241, 0.18);
      color: rgba(165, 180, 252, 0.95);
    }

    .login-history-modal__titles h2 {
      margin: 0;
      font-size: clamp(1.4rem, 3vw, 1.8rem);
    }

    .login-history-modal__titles p {
      margin: 0;
      color: rgba(148, 163, 184, 0.85);
      max-width: 420px;
    }

    .login-history-modal__body {
      display: grid;
      gap: 1.2rem;
    }

    .login-history-empty {
      border-radius: 18px;
      padding: clamp(1rem, 3vw, 1.2rem);
    }

    .login-history-status {
      margin: 0;
      text-align: center;
      color: rgba(148, 163, 184, 0.88);
      font-size: 0.95rem;
    }

    .login-history-list {
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: 1rem;
      max-height: min(420px, 60vh);
      overflow-y: auto;
      padding-right: 0.25rem;
    }

    .login-history-list::-webkit-scrollbar {
      width: 8px;
    }

    .login-history-list::-webkit-scrollbar-thumb {
      background: rgba(148, 163, 184, 0.35);
      border-radius: 999px;
    }

    .login-history-item {
      display: grid;
      gap: 0.65rem;
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.18);
      background: rgba(7, 12, 29, 0.82);
      padding: 1rem 1.1rem;
    }

    .login-history-item__header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 0.6rem;
      flex-wrap: wrap;
    }

    .login-history-item__ip {
      font-weight: 700;
      font-size: 1rem;
      color: rgba(226, 232, 240, 0.95);
    }

    .login-history-item__badge {
      display: inline-flex;
      align-items: center;
      padding: 0.25rem 0.65rem;
      border-radius: 999px;
      background: rgba(34, 197, 94, 0.18);
      color: rgba(134, 239, 172, 0.95);
      font-size: 0.72rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-weight: 700;
    }

    .login-history-item__device {
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .login-history-item__time {
      display: flex;
      align-items: baseline;
      gap: 0.5rem;
      flex-wrap: wrap;
      font-size: 0.85rem;
      color: rgba(203, 213, 225, 0.85);
    }

    .login-history-item__time time {
      font-weight: 600;
      color: rgba(226, 232, 240, 0.95);
    }

    .login-history-item__relative {
      font-size: 0.8rem;
      color: rgba(148, 163, 184, 0.75);
    }

    .login-history-item__agent {
      display: grid;
      gap: 0.3rem;
      font-size: 0.8rem;
      color: rgba(148, 163, 184, 0.75);
      word-break: break-word;
    }

    .login-history-item__agent-label {
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-weight: 600;
    }

    .login-history-item__agent-value {
      font-family: 'JetBrains Mono', 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
      font-size: 0.75rem;
      color: rgba(203, 213, 225, 0.82);
    }

    .login-history-empty {
      border: 1px dashed rgba(148, 163, 184, 0.28);
      background: rgba(15, 23, 42, 0.55);
      text-align: center;
      color: rgba(148, 163, 184, 0.88);
      font-size: 0.95rem;
    }

    .login-history-modal__footer {
      font-size: 0.82rem;
      color: rgba(148, 163, 184, 0.75);
      text-align: center;
    }

    .modal__content.admin-user-modal {
      max-width: 640px;
      background: rgba(7, 11, 27, 0.96);
      border-radius: 26px;
      border: 1px solid rgba(99, 102, 241, 0.22);
      box-shadow: 0 40px 80px rgba(2, 6, 23, 0.55);
      padding: clamp(1.6rem, 3.5vw, 2.6rem);
      padding-top: clamp(2.4rem, 4vw, 3rem);
      grid-template-columns: minmax(0, 1fr);
      align-content: start;
    }

    .admin-user-modal__inner {
      display: grid;
      gap: 1.75rem;
    }

    .admin-user-modal__header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 1.5rem;
      flex-wrap: wrap;
    }

    .admin-user-modal__titles {
      display: grid;
      gap: 0.55rem;
      min-width: 220px;
    }

    .admin-user-modal__action {
      position: relative;
      display: inline-flex;
      align-items: center;
      will-change: transform;
      font-size: 0.9rem;
      font-weight: 500;
      letter-spacing: 0;
      text-transform: none;
      color: rgba(226, 232, 240, 0.92);
      border-radius: 999px;
    }

    .admin-user-modal__action::before {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      padding: 1px;
      background: linear-gradient(135deg, rgba(165, 180, 252, 0.55), rgba(96, 165, 250, 0.35), rgba(192, 132, 252, 0.5));
      opacity: 0.85;
      transition: opacity 0.2s ease;
      pointer-events: none;
      z-index: 0;
      -webkit-mask:
        linear-gradient(#fff 0 0) content-box,
        linear-gradient(#fff 0 0);
      -webkit-mask-composite: xor;
      mask-composite: exclude;
    }

    .admin-user-modal__action-content {
      position: relative;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
      padding: 0.45rem;
      border-radius: inherit;
      background: linear-gradient(155deg, rgba(15, 23, 42, 0.97), rgba(30, 41, 59, 0.82));
      box-shadow: 0 20px 40px rgba(2, 6, 23, 0.55);
      transition: background 0.2s ease, box-shadow 0.2s ease;
      z-index: 1;
    }

    .admin-user-modal__action-icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 999px;
      background: linear-gradient(145deg, rgba(59, 130, 246, 0.28), rgba(139, 92, 246, 0.32));
      border: 1px solid rgba(148, 163, 184, 0.45);
      box-shadow:
        inset 0 1px 0 rgba(255, 255, 255, 0.12),
        0 10px 24px rgba(2, 6, 23, 0.45);
      color: rgba(226, 232, 240, 0.95);
    }

    .admin-user-modal__action svg {
      width: 16px;
      height: 16px;
      pointer-events: none;
    }

    .admin-user-modal__action-label {
      display: inline-flex;
      align-items: center;
      color: rgba(226, 232, 240, 0.92);
      font-weight: 500;
      line-height: 1;
    }

    .admin-user-modal__action--close .admin-user-modal__action-label,
    .admin-user-modal__back .admin-user-modal__action-label {
      display: none;
    }

    .admin-user-modal .modal__close:hover .admin-user-modal__action-content,
    .admin-user-modal .modal__back:hover .admin-user-modal__action-content,
    .admin-user-modal .modal__close:focus-visible .admin-user-modal__action-content,
    .admin-user-modal .modal__back:focus-visible .admin-user-modal__action-content {
      background: linear-gradient(155deg, rgba(30, 41, 59, 0.96), rgba(15, 23, 42, 0.88));
      box-shadow: 0 28px 52px rgba(15, 23, 42, 0.6);
    }

    .admin-user-modal .modal__close:hover .admin-user-modal__action::before,
    .admin-user-modal .modal__back:hover .admin-user-modal__action::before,
    .admin-user-modal .modal__close:focus-visible .admin-user-modal__action::before,
    .admin-user-modal .modal__back:focus-visible .admin-user-modal__action::before {
      opacity: 1;
    }

    .admin-user-modal__badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      font-size: 0.72rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-weight: 700;
      padding: 0.35rem 0.9rem;
      border-radius: 999px;
      background: rgba(99, 102, 241, 0.18);
      color: rgba(226, 232, 240, 0.85);
    }

    .admin-user-modal__titles h2 {
      margin: 0;
      font-size: clamp(1.2rem, 3vw, 1.5rem);
    }

    .admin-user-modal__titles p {
      margin: 0;
      color: rgba(203, 213, 225, 0.85);
      font-size: 0.9rem;
    }

    .admin-user-modal__identity {
      display: grid;
      gap: 0.35rem;
      text-align: right;
      min-width: 180px;
    }

    .admin-user-modal__name {
      font-weight: 700;
      font-size: 1.1rem;
    }

    .admin-user-modal__email {
      color: rgba(148, 163, 184, 0.9);
      font-size: 0.82rem;
      word-break: break-all;
    }

    .admin-user-modal__id {
      font-size: 0.72rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.75);
    }

    .admin-user-modal__body {
      display: grid;
      gap: 1.5rem;
    }

    .admin-user-modal__grid {
      display: grid;
      gap: 1.2rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      align-items: flex-start;
    }

    .admin-user-modal__section {
      display: grid;
      gap: 1rem;
      background: rgba(15, 23, 42, 0.6);
      border-radius: 18px;
      padding: 1.1rem 1.2rem;
      border: 1px solid rgba(99, 102, 241, 0.12);
      align-self: flex-start;
    }

    .admin-user-modal__list {
      margin: 0;
      padding: 0;
      list-style: none;
      display: grid;
      gap: 0.9rem;
    }

    .admin-user-modal__item {
      display: grid;
      gap: 0.35rem;
    }

    .admin-user-modal__item dt {
      margin: 0;
      font-size: 0.72rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.78);
    }

    .admin-user-modal__item dd {
      margin: 0;
      font-size: 0.95rem;
      font-weight: 600;
      color: var(--text);
      white-space: pre-line;
      word-break: break-word;
    }

    .admin-user-modal__helper {
      margin: 1rem 0 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.78);
      text-align: center;
    }

    .payments-modal__inner {
      display: flex;
      flex-direction: column;
      gap: clamp(1.6rem, 2.8vw, 2.4rem);
    }

    .payments-modal__header {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      justify-content: space-between;
      gap: 1.25rem;
    }

    .payments-modal__titles {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }

    .payments-modal__titles h2 {
      margin: 0;
      font-size: clamp(1.8rem, 3vw, 2.25rem);
      letter-spacing: -0.01em;
    }

    .payments-modal__titles p {
      margin: 0;
      font-size: clamp(1rem, 1.8vw, 1.1rem);
      color: rgba(226, 232, 240, 0.82);
      max-width: 62ch;
    }

    .payments-modal__actions {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-left: auto;
    }

    .icon-button {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      border: 1px solid rgba(148, 163, 184, 0.28);
      border-radius: 999px;
      background: rgba(15, 23, 42, 0.78);
      color: var(--text);
      padding: 0.55rem 1.1rem;
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
      transition: border 0.2s ease, transform 0.2s ease, color 0.2s ease;
    }

    .icon-button svg {
      width: 1rem;
      height: 1rem;
    }

    .icon-button:hover,
    .icon-button:focus-visible {
      border-color: rgba(129, 140, 248, 0.65);
      color: #fff;
      transform: translateY(-1px);
      outline: none;
    }

    .payments-modal__meta {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      flex-wrap: wrap;
      color: rgba(148, 163, 184, 0.85);
      font-size: 0.9rem;
    }

    .payments-modal__meta svg {
      width: 1rem;
      height: 1rem;
      color: rgba(129, 140, 248, 0.9);
    }

    .payments-content {
      display: flex;
      flex-direction: column;
      gap: clamp(1.8rem, 3vw, 2.4rem);
    }

    .payments-loading,
    .payments-empty,
    .payments-upcoming__empty {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.85rem;
      padding: 1.6rem;
      border-radius: 1.25rem;
      border: 1px dashed rgba(99, 102, 241, 0.28);
      color: rgba(199, 210, 254, 0.9);
      background: rgba(15, 23, 42, 0.6);
      font-weight: 600;
      text-align: center;
    }

    .payments-upcoming__empty {
      font-weight: 500;
      color: rgba(148, 163, 184, 0.85);
      border-color: rgba(148, 163, 184, 0.25);
      background: rgba(15, 23, 42, 0.5);
    }

    .payments-spinner {
      width: 1.75rem;
      height: 1.75rem;
      border-radius: 50%;
      border: 3px solid rgba(99, 102, 241, 0.25);
      border-top-color: rgba(99, 102, 241, 0.9);
      animation: payments-spin 0.9s linear infinite;
    }

    @keyframes payments-spin {
      to {
        transform: rotate(360deg);
      }
    }

    .payments-error {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding: 1.6rem;
      border-radius: 1.2rem;
      border: 1px solid rgba(248, 113, 113, 0.4);
      background: rgba(30, 41, 59, 0.78);
      color: rgba(254, 202, 202, 0.95);
      text-align: center;
    }

    .payments-error__icon {
      width: 52px;
      height: 52px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      border: 1px solid rgba(248, 113, 113, 0.45);
      background: rgba(248, 113, 113, 0.12);
      margin: 0 auto;
    }

    .payments-error__message {
      margin: 0;
      font-size: 0.95rem;
    }

    .payments-error__actions {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    .payments-error button {
      border: none;
      border-radius: 0.9rem;
      padding: 0.6rem 1.5rem;
      font-weight: 700;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.92), rgba(236, 72, 153, 0.92));
      color: #fff;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .payments-error button:hover,
    .payments-error button:focus-visible {
      outline: none;
      transform: translateY(-1px);
      box-shadow: 0 18px 36px rgba(99, 102, 241, 0.28);
    }

    .payments-section-header {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
      margin-bottom: 1.1rem;
    }

    .payments-section-header h3 {
      margin: 0;
      font-size: 1.2rem;
    }

    .payments-section-header p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .payments-upcoming__list {
      display: grid;
      gap: 1.2rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .payments-upcoming__card {
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      padding: 1.2rem 1.4rem;
      border-radius: 1.2rem;
      background: rgba(15, 23, 42, 0.78);
      border: 1px solid rgba(99, 102, 241, 0.2);
      overflow: hidden;
    }

    .payments-upcoming__card::after {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.15), rgba(236, 72, 153, 0.12));
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.2s ease;
    }

    .payments-upcoming__card:hover::after {
      opacity: 1;
    }

    .payments-upcoming__card--alert {
      border-color: rgba(248, 113, 113, 0.5);
      box-shadow: 0 18px 38px rgba(248, 113, 113, 0.12);
    }

    .payments-upcoming__card--success {
      border-color: rgba(16, 185, 129, 0.45);
    }

    .payments-upcoming__title {
      margin: 0;
      font-weight: 700;
      font-size: 1.05rem;
      color: rgba(248, 250, 252, 0.95);
    }

    .payments-upcoming__meta {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
      align-items: center;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.9);
    }

    .payments-upcoming__amount {
      font-size: 1.25rem;
      font-weight: 700;
      color: #fff;
    }

    .payments-upcoming__actions {
      margin-top: auto;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .payments-upcoming__note {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(203, 213, 225, 0.75);
    }

    .payments-history {
      display: flex;
      flex-direction: column;
      gap: 1.1rem;
    }

    .payments-table {
      border-radius: 1.4rem;
      border: 1px solid rgba(148, 163, 184, 0.18);
      overflow: hidden;
      background: rgba(6, 12, 31, 0.82);
    }

    .payments-table table {
      width: 100%;
      border-collapse: collapse;
    }

    .payments-table th,
    .payments-table td {
      padding: 0.95rem 1.2rem;
      border-bottom: 1px solid rgba(148, 163, 184, 0.12);
      font-size: 0.95rem;
      text-align: left;
      vertical-align: top;
    }

    [dir='rtl'] .payments-table th,
    [dir='rtl'] .payments-table td {
      text-align: right;
    }

    .payments-table th {
      font-weight: 700;
      font-size: 0.8rem;
      letter-spacing: 0.06em;
      text-transform: uppercase;
      color: rgba(203, 213, 225, 0.75);
      background: rgba(15, 23, 42, 0.85);
    }

    .payments-table tbody tr:hover td {
      background: rgba(99, 102, 241, 0.12);
    }

    .payments-empty {
      color: rgba(148, 163, 184, 0.85);
      font-weight: 500;
    }

    .payments-service {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
    }

    .payments-service__name {
      font-weight: 600;
      color: rgba(248, 250, 252, 0.95);
    }

    .payments-service__meta {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .payments-row-status {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
      align-items: center;
    }

    .payments-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 0.45rem;
      align-items: center;
      justify-content: flex-end;
    }

    .payments-action-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      border-radius: 0.9rem;
      border: 1px solid rgba(148, 163, 184, 0.32);
      background: rgba(15, 23, 42, 0.78);
      color: rgba(226, 232, 240, 0.9);
      transition: border 0.2s ease, transform 0.2s ease, color 0.2s ease;
    }

    .payments-action-button svg {
      width: 1rem;
      height: 1rem;
    }

    .payments-action-button:hover,
    .payments-action-button:focus-visible {
      border-color: rgba(129, 140, 248, 0.75);
      color: #fff;
      transform: translateY(-1px);
      outline: none;
    }

    .payments-updated {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .payments-badge,
    .payments-upcoming__badge,
    .payments-tag {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      padding: 0.25rem 0.65rem;
      border-radius: 0.75rem;
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      font-weight: 700;
      background: rgba(99, 102, 241, 0.2);
      color: rgba(199, 210, 254, 0.92);
    }

    .payments-tag {
      background: rgba(148, 163, 184, 0.18);
      color: rgba(203, 213, 225, 0.9);
      font-weight: 600;
    }

    .payments-actions .visually-hidden {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      border: 0;
    }

    .payments-modal__footer {
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
      gap: 0.85rem;
      align-items: center;
    }

    .smartlinks-modal__inner {
      display: flex;
      flex-direction: column;
      gap: clamp(1.8rem, 3vw, 2.6rem);
    }

    .smartlinks-modal__header {
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
    }

    .smartlinks-modal__badge {
      align-self: flex-start;
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      background: rgba(99, 102, 241, 0.25);
      border: 1px solid rgba(99, 102, 241, 0.45);
      font-size: 0.8rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(199, 210, 254, 0.95);
    }

    .smartlinks-modal__header h2 {
      margin: 0;
      font-size: clamp(1.8rem, 3vw, 2.3rem);
      letter-spacing: -0.01em;
    }

    .smartlinks-modal__header p {
      margin: 0;
      font-size: clamp(1rem, 1.8vw, 1.1rem);
      color: rgba(226, 232, 240, 0.82);
      max-width: 62ch;
    }

    .modal__content.ai-composer-modal {
      position: relative;
      background: linear-gradient(140deg, rgba(12, 18, 34, 0.96) 0%, rgba(8, 47, 73, 0.94) 45%, rgba(14, 116, 144, 0.9) 100%);
      border-radius: clamp(28px, 5vw, 36px);
      border: 1px solid rgba(125, 211, 252, 0.22);
      color: #e2e8f0;
      box-shadow: 0 34px 90px rgba(2, 6, 23, 0.65);
      overflow: hidden;
      display: flex;
      flex-direction: column;
      min-height: min(95vh, 980px);
    }

    .modal__content.ai-composer-modal::before,
    .modal__content.ai-composer-modal::after {
      content: '';
      position: absolute;
      border-radius: 999px;
      filter: blur(80px);
      opacity: 0.4;
      pointer-events: none;
    }

    .modal__content.ai-composer-modal::before {
      width: 320px;
      height: 320px;
      background: rgba(94, 234, 212, 0.25);
      top: -140px;
      left: 18%;
    }

    .modal__content.ai-composer-modal::after {
      width: 280px;
      height: 280px;
      background: rgba(56, 189, 248, 0.28);
      bottom: -120px;
      right: 12%;
    }

    .ai-composer-modal__inner {
      position: relative;
      z-index: 1;
      display: flex;
      flex-direction: column;
      gap: 2rem;
      padding: clamp(2rem, 4vw, 2.75rem);
    }

    .ai-composer-modal__header {
      display: grid;
      gap: 0.8rem;
    }

    .ai-composer-modal__badge {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.4rem 1.2rem;
      border-radius: 999px;
      background: rgba(125, 211, 252, 0.18);
      border: 1px solid rgba(165, 243, 252, 0.3);
      font-size: 0.7rem;
      letter-spacing: 0.28em;
      text-transform: uppercase;
      font-weight: 700;
      color: rgba(224, 242, 254, 0.92);
    }

    .ai-composer-modal__title {
      margin: 0;
      font-size: clamp(1.75rem, 3vw, 2.2rem);
      font-family: 'Space Grotesk', sans-serif;
    }

    .ai-composer-modal__subtitle {
      margin: 0;
      color: rgba(226, 232, 240, 0.82);
      font-size: 0.98rem;
      line-height: 1.6;
      max-width: 60ch;
    }

    .ai-composer-modal__layout {
      display: grid;
      gap: clamp(1.6rem, 3vw, 2.4rem);
      grid-template-columns: minmax(0, 1.45fr) minmax(0, 1fr);
    }

    .ai-composer-modal__main {
      display: grid;
      gap: 1.5rem;
    }

    .ai-composer-modal__aside {
      display: grid;
      gap: 1.5rem;
      background: rgba(15, 23, 42, 0.35);
      border: 1px solid rgba(148, 163, 184, 0.16);
      border-radius: 26px;
      padding: clamp(1.5rem, 3vw, 2rem);
      backdrop-filter: blur(12px);
    }

    .ai-composer-mode-toggle {
      display: flex;
      gap: 0.6rem;
      padding: 0.35rem;
      border-radius: 999px;
      background: rgba(15, 23, 42, 0.45);
      border: 1px solid rgba(148, 163, 184, 0.18);
    }

    .ai-composer-mode-button {
      flex: 1;
      border: none;
      background: transparent;
      color: rgba(226, 232, 240, 0.78);
      font: inherit;
      letter-spacing: 0.28em;
      text-transform: uppercase;
      font-size: 0.7rem;
      padding: 0.8rem 1rem;
      border-radius: 999px;
      cursor: pointer;
      transition: background 0.2s ease, color 0.2s ease, box-shadow 0.2s ease;
    }

    .ai-composer-mode-button.is-active {
      background: linear-gradient(135deg, rgba(94, 234, 212, 0.95), rgba(45, 212, 191, 0.9));
      color: #022c22;
      box-shadow: 0 16px 34px rgba(45, 212, 191, 0.38);
    }

    .ai-composer-panel {
      display: grid;
      gap: 0.75rem;
    }

    .ai-composer-field {
      display: grid;
      gap: 0.6rem;
    }

    .ai-composer-field__header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .ai-composer-field__header label {
      margin: 0;
    }

    .ai-composer-field label {
      font-size: 0.72rem;
      letter-spacing: 0.32em;
      text-transform: uppercase;
      font-weight: 700;
      color: rgba(226, 232, 240, 0.76);
    }

    .ai-composer-textarea {
      width: 100%;
      min-height: 150px;
      border-radius: 24px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.55);
      color: #f8fafc;
      padding: 1rem 1.25rem;
      font: inherit;
      font-size: 0.95rem;
      line-height: 1.6;
      resize: vertical;
      box-shadow: inset 0 0 0 1px rgba(14, 165, 233, 0.08);
      transition: border 0.2s ease, box-shadow 0.2s ease;
    }

    .ai-composer-textarea::placeholder {
      color: rgba(148, 163, 184, 0.55);
    }

    .ai-composer-textarea:focus-visible {
      outline: none;
      border-color: rgba(94, 234, 212, 0.6);
      box-shadow: 0 0 0 3px rgba(94, 234, 212, 0.25);
    }

    .ai-composer-helper {
      margin: 0;
      font-size: 0.78rem;
      color: rgba(226, 232, 240, 0.6);
      line-height: 1.5;
    }

    .ai-composer-generate {
      border-radius: 999px;
      border: 1px solid rgba(94, 234, 212, 0.42);
      background: rgba(45, 212, 191, 0.14);
      color: rgba(236, 253, 245, 0.96);
      font-size: 0.7rem;
      letter-spacing: 0.32em;
      text-transform: uppercase;
      font-weight: 600;
      padding: 0.6rem 1.4rem;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease, border 0.2s ease, background 0.2s ease;
    }

    .ai-composer-generate:hover,
    .ai-composer-generate:focus-visible {
      transform: translateY(-1px);
      box-shadow: 0 14px 28px rgba(45, 212, 191, 0.28);
      border-color: rgba(94, 234, 212, 0.65);
      background: rgba(45, 212, 191, 0.22);
      outline: none;
    }

    .ai-composer-generate:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .ai-composer-instrument-chips {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
    }

    .ai-composer-instrument-chip {
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.24);
      background: rgba(15, 23, 42, 0.55);
      color: rgba(226, 232, 240, 0.82);
      font-size: 0.75rem;
      padding: 0.55rem 1rem;
      cursor: pointer;
      transition: border 0.2s ease, background 0.2s ease, color 0.2s ease;
    }

    .ai-composer-instrument-chip.is-active {
      border-color: rgba(94, 234, 212, 0.8);
      background: rgba(45, 212, 191, 0.18);
      color: rgba(236, 253, 245, 0.96);
      box-shadow: 0 12px 22px rgba(45, 212, 191, 0.28);
    }

    .ai-composer-style-list,
    .ai-composer-voice-list {
      display: grid;
      gap: 0.75rem;
    }

    .ai-composer-style-button,
    .ai-composer-voice-button {
      width: 100%;
      border: 1px solid rgba(148, 163, 184, 0.2);
      border-radius: 22px;
      background: rgba(15, 23, 42, 0.45);
      padding: 0.9rem 1.1rem;
      text-align: left;
      color: inherit;
      cursor: pointer;
      font: inherit;
      display: grid;
      gap: 0.35rem;
      transition: border 0.2s ease, background 0.2s ease, color 0.2s ease, box-shadow 0.2s ease;
    }

    .ai-composer-style-button.is-active,
    .ai-composer-voice-button.is-active {
      border-color: rgba(94, 234, 212, 0.65);
      background: rgba(94, 234, 212, 0.16);
      box-shadow: 0 16px 30px rgba(13, 148, 136, 0.3);
      color: rgba(240, 253, 244, 0.96);
    }

    .ai-composer-style-button strong,
    .ai-composer-voice-button strong {
      font-size: 0.95rem;
      font-weight: 600;
    }

    .ai-composer-style-button span,
    .ai-composer-voice-button span {
      font-size: 0.78rem;
      color: rgba(226, 232, 240, 0.7);
    }

    .ai-composer-style-helper {
      margin: 0;
      font-size: 0.72rem;
      letter-spacing: 0.16em;
      text-transform: uppercase;
      color: rgba(226, 232, 240, 0.6);
      display: flex;
      flex-wrap: wrap;
      gap: 0.35rem;
    }

    .ai-composer-style-helper span {
      color: rgba(190, 242, 255, 0.95);
      text-transform: none;
      letter-spacing: normal;
      font-size: 0.78rem;
    }

    .ai-composer-style-heading {
      margin: 0 0 0.6rem;
      font-size: 0.72rem;
      letter-spacing: 0.32em;
      text-transform: uppercase;
      color: rgba(226, 232, 240, 0.68);
    }

    .ai-composer-duration-list {
      display: flex;
      gap: 0.6rem;
    }

    .ai-composer-duration-button {
      flex: 1;
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.55);
      color: rgba(226, 232, 240, 0.88);
      padding: 0.75rem 0.5rem;
      font: inherit;
      font-size: 0.85rem;
      cursor: pointer;
      transition: border 0.2s ease, background 0.2s ease, color 0.2s ease;
    }

    .ai-composer-duration-button.is-active {
      border-color: rgba(94, 234, 212, 0.65);
      background: rgba(94, 234, 212, 0.18);
      color: rgba(14, 116, 144, 0.95);
      box-shadow: 0 12px 24px rgba(45, 212, 191, 0.28);
    }

    .ai-composer-tempo {
      display: grid;
      gap: 0.4rem;
    }

    .ai-composer-tempo input[type="range"] {
      width: 100%;
      accent-color: #5eead4;
    }

    .ai-composer-tempo-value {
      font-size: 0.75rem;
      color: rgba(226, 232, 240, 0.72);
    }

    .ai-composer-feedback {
      display: grid;
      gap: 0.45rem;
    }

    .ai-composer-status {
      font-size: 0.82rem;
      color: rgba(190, 242, 255, 0.9);
      min-height: 1.2em;
    }

    .ai-composer-error {
      font-size: 0.82rem;
      color: rgba(248, 113, 113, 0.92);
      min-height: 1.2em;
    }

    .ai-composer-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 0.9rem;
      align-items: center;
      justify-content: flex-start;
    }

    .ai-composer-actions button {
      border-radius: 999px;
      padding: 0.85rem 1.8rem;
      font: inherit;
      font-size: 0.72rem;
      letter-spacing: 0.32em;
      text-transform: uppercase;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease, border 0.2s ease;
    }

    .ai-composer-reset {
      border: 1px solid rgba(148, 163, 184, 0.26);
      background: rgba(15, 23, 42, 0.5);
      color: rgba(226, 232, 240, 0.85);
    }

    .ai-composer-reset:hover,
    .ai-composer-reset:focus-visible {
      border-color: rgba(94, 234, 212, 0.6);
      color: rgba(190, 242, 255, 0.95);
      transform: translateY(-1px);
    }

    .ai-composer-submit {
      background: linear-gradient(135deg, rgba(94, 234, 212, 0.95), rgba(34, 211, 238, 0.9));
      border: none;
      color: #022c22;
      box-shadow: 0 20px 42px rgba(13, 148, 136, 0.32);
    }

    .ai-composer-submit:hover,
    .ai-composer-submit:focus-visible {
      transform: translateY(-1px);
      box-shadow: 0 26px 48px rgba(13, 148, 136, 0.42);
    }

    .ai-composer-submit:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .ai-composer-result,
    .ai-composer-preview {
      border-radius: 24px;
      border: 1px solid rgba(94, 234, 212, 0.35);
      background: rgba(16, 185, 129, 0.12);
      padding: 1.4rem;
      display: grid;
      gap: 0.75rem;
    }

    .ai-composer-result h3,
    .ai-composer-preview h3 {
      margin: 0;
      letter-spacing: 0.28em;
      text-transform: uppercase;
      font-size: 0.72rem;
      color: rgba(167, 243, 208, 0.9);
    }

    .ai-composer-result pre {
      margin: 0;
      white-space: pre-wrap;
      font: inherit;
      color: rgba(240, 253, 244, 0.92);
      line-height: 1.6;
    }

    .ai-composer-job-label {
      font-size: 0.75rem;
      color: rgba(226, 232, 240, 0.65);
    }

    .ai-composer-preview audio {
      width: 100%;
    }

    .ai-composer-preview-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 0.75rem;
      flex-wrap: wrap;
    }

    @media (max-width: 1100px) {
      .ai-composer-modal__layout {
        grid-template-columns: minmax(0, 1fr);
      }

      .ai-composer-modal__aside {
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      }
    }

    @media (max-width: 780px) {
      .modal__content.ai-composer-modal {
        min-height: auto;
      }

      .ai-composer-modal__inner {
        padding: 1.75rem;
      }

      .ai-composer-modal__aside {
        grid-template-columns: minmax(0, 1fr);
      }

      .ai-composer-actions {
        justify-content: stretch;
      }

      .ai-composer-actions button {
        flex: 1 1 auto;
      }
    }

    .modal__content.express-modal {
      max-width: min(920px, 96vw);
      background: radial-gradient(circle at top right, rgba(79, 70, 229, 0.25), transparent 55%), rgba(15, 23, 42, 0.96);
      border: 1px solid rgba(99, 102, 241, 0.18);
      box-shadow: 0 28px 80px rgba(15, 23, 42, 0.45);
      padding: clamp(1.5rem, 3vw, 2rem) clamp(1.5rem, 4vw, 2.5rem);
    }

    .express-modal__inner {
      display: grid;
      gap: clamp(1.5rem, 3vw, 2.4rem);
    }

    .express-modal__header {
      display: grid;
      gap: 1rem;
    }

    .express-modal__badge {
      justify-self: flex-start;
      display: inline-flex;
      align-items: center;
      gap: 0.35rem;
      padding: 0.25rem 0.75rem;
      border-radius: 999px;
      background: rgba(34, 197, 94, 0.18);
      border: 1px solid rgba(34, 197, 94, 0.3);
      color: rgba(187, 247, 208, 0.95);
      font-size: 0.8rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      font-weight: 700;
    }

    .express-modal__header h2 {
      margin: 0;
      font-size: clamp(1.8rem, 3vw, 2.4rem);
      letter-spacing: -0.01em;
    }

    .express-modal__header p {
      margin: 0;
      font-size: clamp(1rem, 1.7vw, 1.1rem);
      color: rgba(226, 232, 240, 0.82);
      max-width: 64ch;
    }

    .express-modal__layout {
      display: grid;
      gap: clamp(1.4rem, 3vw, 2.2rem);
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      align-items: start;
    }

    .express-modal__highlights {
      display: grid;
      gap: 1rem;
    }

    .express-highlight {
      display: grid;
      gap: 0.35rem;
      padding: 1.15rem 1.2rem;
      border-radius: 1.1rem;
      background: rgba(30, 41, 59, 0.85);
      border: 1px solid rgba(148, 163, 184, 0.25);
      box-shadow: inset 0 0 0 1px rgba(15, 23, 42, 0.55);
    }

    .express-highlight strong {
      font-size: 1rem;
      color: rgba(226, 232, 240, 0.94);
    }

    .express-highlight p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.9);
    }

    .express-modal__form {
      display: grid;
      gap: 1.25rem;
      padding: 1.4rem 1.6rem;
      border-radius: 1.2rem;
      background: rgba(15, 23, 42, 0.82);
      border: 1px solid rgba(99, 102, 241, 0.2);
      box-shadow: inset 0 0 0 1px rgba(30, 41, 59, 0.6);
    }

    .express-modal__form-header {
      display: grid;
      gap: 0.5rem;
    }

    .express-modal__form-header h3 {
      margin: 0;
      font-size: 1.25rem;
      letter-spacing: -0.01em;
    }

    .express-modal__form-header p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .express-form-grid {
      display: grid;
      gap: 1.1rem;
    }

    .express-form-row {
      display: grid;
      gap: 1rem;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }

    .express-field {
      display: grid;
      gap: 0.45rem;
    }

    .express-field label {
      font-weight: 600;
      font-size: 0.95rem;
      color: rgba(226, 232, 240, 0.9);
    }

    .express-field input,
    .express-field select,
    .express-field textarea {
      appearance: none;
      background: rgba(15, 23, 42, 0.75);
      border: 1px solid rgba(148, 163, 184, 0.32);
      border-radius: 0.9rem;
      padding: 0.85rem 1rem;
      font-size: 1rem;
      color: rgba(226, 232, 240, 0.95);
      transition: border 0.2s ease, box-shadow 0.2s ease;
    }

    .express-field input:focus,
    .express-field textarea:focus {
      outline: none;
      border-color: rgba(129, 140, 248, 0.75);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.28);
    }

    .express-field input[readonly] {
      background: rgba(15, 23, 42, 0.6);
      color: rgba(203, 213, 225, 0.9);
    }

    .express-type-options {
      display: grid;
      gap: 0.9rem;
    }

    .express-type-option {
      position: relative;
      display: grid;
      gap: 0.4rem;
      padding: 0.95rem 1.1rem;
      border-radius: 1rem;
      border: 1px solid rgba(148, 163, 184, 0.3);
      background: rgba(15, 23, 42, 0.7);
      box-shadow: inset 0 0 0 1px rgba(15, 23, 42, 0.45);
      cursor: pointer;
      transition: border 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
    }

    .express-type-option:hover,
    .express-type-option:focus-within {
      border-color: rgba(129, 140, 248, 0.75);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.24);
    }

    .express-type-option input {
      position: absolute;
      inset: 0;
      opacity: 0;
      cursor: pointer;
    }

    .express-type-option strong {
      font-size: 1.05rem;
      color: rgba(248, 250, 252, 0.95);
    }

    .express-type-option span {
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.9);
    }

    .express-type-price {
      font-weight: 600;
      color: rgba(226, 232, 240, 0.95);
    }

    .express-type-option[data-selected="true"] {
      border-color: rgba(129, 140, 248, 0.85);
      background: linear-gradient(135deg, rgba(79, 70, 229, 0.25), rgba(236, 72, 153, 0.15));
      box-shadow: 0 18px 44px rgba(79, 70, 229, 0.28);
    }

    .express-button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      border-radius: 0.95rem;
      padding: 0.95rem 1.5rem;
      font-size: 1rem;
      font-weight: 600;
      border: none;
      cursor: pointer;
      background: linear-gradient(135deg, rgba(79, 70, 229, 0.92), rgba(236, 72, 153, 0.9));
      color: #fff;
      transition: transform 0.2s ease, box-shadow 0.2s ease, opacity 0.2s ease;
    }

    .express-button:hover:enabled,
    .express-button:focus-visible:enabled {
      transform: translateY(-1px);
      box-shadow: 0 18px 50px rgba(79, 70, 229, 0.4);
      outline: none;
    }

    .express-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .express-feedback {
      margin: 0;
      font-size: 0.9rem;
      min-height: 1.4em;
    }

    .express-feedback.error {
      color: #fca5a5;
    }

    .express-feedback.success {
      color: #bbf7d0;
    }

    @media (max-width: 640px) {
      .modal__content.express-modal {
        padding: 1.3rem;
      }

      .express-modal__form {
        padding: 1.1rem 1.2rem;
      }
    }

    .smartlinks-tabs {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.4rem;
      background: rgba(15, 23, 42, 0.65);
      border: 1px solid rgba(148, 163, 184, 0.22);
      border-radius: 999px;
      box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.08);
    }

    .smartlinks-tab {
      border: none;
      background: transparent;
      color: rgba(203, 213, 225, 0.7);
      font-size: 0.95rem;
      font-weight: 600;
      padding: 0.5rem 1.25rem;
      border-radius: 999px;
      cursor: pointer;
      transition: background 0.2s ease, color 0.2s ease, transform 0.2s ease;
    }

    .smartlinks-tab.is-active {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.92), rgba(236, 72, 153, 0.92));
      color: #fff;
      box-shadow: 0 18px 40px rgba(79, 70, 229, 0.28);
    }

    .smartlinks-tab:not(.is-active):hover {
      color: rgba(248, 250, 252, 0.85);
    }

    [data-smartlinks-view] {
      display: none;
    }

    [data-smartlinks-view].is-active {
      display: block;
    }

    .smartlinks-create-layout {
      display: grid;
      gap: clamp(1.8rem, 3vw, 2.5rem);
      grid-template-columns: minmax(0, 1fr);
    }

    .smartlinks-form {
      display: grid;
      gap: 1.3rem;
    }

    .smartlinks-fields {
      display: grid;
      gap: 1.2rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .smartlinks-field {
      display: flex;
      flex-direction: column;
      gap: 0.45rem;
    }

    .smartlinks-field label {
      font-weight: 600;
      font-size: 0.95rem;
      color: rgba(226, 232, 240, 0.88);
    }

    .smartlinks-field input {
      background: rgba(15, 23, 42, 0.75);
      border: 1px solid rgba(148, 163, 184, 0.3);
      border-radius: 0.85rem;
      padding: 0.85rem 1rem;
      font-size: 1rem;
      color: var(--text);
      transition: border 0.2s ease, box-shadow 0.2s ease;
    }

    .smartlinks-field input:focus {
      outline: none;
      border-color: rgba(129, 140, 248, 0.75);
      box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.28);
    }

    .smartlinks-hint {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-platforms {
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
    }

    .smartlinks-platforms__grid {
      display: grid;
      gap: 0.75rem;
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }

    .smartlinks-platform {
      position: relative;
      display: flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.75rem 0.95rem;
      background: rgba(15, 23, 42, 0.72);
      border: 1px solid rgba(148, 163, 184, 0.28);
      border-radius: 0.95rem;
      cursor: pointer;
      transition: border 0.2s ease, transform 0.2s ease;
    }

    .smartlinks-platform:hover {
      border-color: rgba(129, 140, 248, 0.6);
      transform: translateY(-2px);
    }

    .smartlinks-platform input {
      position: absolute;
      opacity: 0;
      pointer-events: none;
    }

    .smartlinks-platform__indicator {
      width: 1.4rem;
      height: 1.4rem;
      border-radius: 0.45rem;
      border: 1px solid rgba(148, 163, 184, 0.4);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background: rgba(15, 23, 42, 0.9);
      transition: background 0.2s ease, border 0.2s ease;
    }

    .smartlinks-platform input:checked + .smartlinks-platform__indicator {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.9), rgba(236, 72, 153, 0.9));
      border-color: transparent;
    }

    .smartlinks-platform__indicator svg {
      width: 0.85rem;
      height: 0.85rem;
      fill: transparent;
      stroke: rgba(248, 250, 252, 0.95);
      stroke-width: 2;
      stroke-dasharray: 18;
      stroke-dashoffset: 18;
      transition: stroke-dashoffset 0.2s ease;
    }

    .smartlinks-platform input:checked + .smartlinks-platform__indicator svg {
      stroke-dashoffset: 0;
    }

    .smartlinks-platform__logo {
      width: 1.85rem;
      height: 1.85rem;
      border-radius: 0.6rem;
      background: rgba(15, 23, 42, 0.85);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.3rem;
    }

    .smartlinks-platform__logo img {
      max-width: 100%;
      height: auto;
      display: block;
    }

    .smartlinks-platform__name {
      font-weight: 600;
      font-size: 0.95rem;
      color: rgba(226, 232, 240, 0.9);
    }

    .smartlinks-feedback {
      margin: 0;
      font-size: 0.9rem;
      color: rgba(248, 250, 252, 0.85);
      min-height: 1.4rem;
    }

    .smartlinks-feedback.error {
      color: #fda4af;
    }

    .smartlinks-feedback.success {
      color: #86efac;
    }

    .smartlinks-actions {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 0.75rem;
    }

    .smartlinks-actions button[type="submit"] {
      border: none;
      border-radius: 999px;
      padding: 0.9rem 1.8rem;
      font-weight: 700;
      font-size: 1rem;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      color: #fff;
      cursor: pointer;
      box-shadow: 0 20px 40px rgba(79, 70, 229, 0.3);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .smartlinks-actions button[type="submit"]:hover {
      transform: translateY(-2px);
      box-shadow: 0 24px 50px rgba(79, 70, 229, 0.35);
    }

    .smartlinks-actions button[type="submit"]:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .smartlinks-preview,
    .smartlinks-create-layout aside {
      border-radius: 1.25rem;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: linear-gradient(165deg, rgba(15, 23, 42, 0.92), rgba(2, 6, 23, 0.88));
      padding: clamp(1.4rem, 2.2vw, 1.9rem);
      display: flex;
      flex-direction: column;
      gap: 1.4rem;
    }

    .smartlinks-preview__header h3 {
      margin: 0;
      font-size: 1.25rem;
    }

    .smartlinks-preview__header p {
      margin: 0;
      color: rgba(203, 213, 225, 0.78);
      font-size: 0.95rem;
    }

    .smartlinks-preview__link {
      display: grid;
      gap: 0.75rem;
      background: rgba(15, 23, 42, 0.85);
      border: 1px solid rgba(148, 163, 184, 0.25);
      border-radius: 1rem;
      padding: 0.95rem 1.1rem;
    }

    .smartlinks-preview__link label {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
      font-weight: 600;
      letter-spacing: 0.05em;
      text-transform: uppercase;
    }

    .smartlinks-preview__controls {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      align-items: center;
    }

    .smartlinks-preview__controls input {
      flex: 1 1 240px;
      background: rgba(2, 6, 23, 0.9);
      border: 1px solid rgba(148, 163, 184, 0.3);
      border-radius: 0.9rem;
      padding: 0.7rem 1rem;
      color: rgba(226, 232, 240, 0.95);
      font-size: 0.95rem;
    }

    .smartlinks-preview__controls button {
      border: none;
      border-radius: 999px;
      padding: 0.65rem 1.35rem;
      font-weight: 600;
      background: rgba(99, 102, 241, 0.2);
      color: rgba(199, 210, 254, 0.95);
      cursor: pointer;
      transition: background 0.2s ease;
    }

    .smartlinks-preview__controls button:hover {
      background: rgba(99, 102, 241, 0.35);
    }

    .smartlinks-preview__copy-feedback {
      font-size: 0.85rem;
      color: #a5b4fc;
    }

    .smartlinks-preview__hero {
      display: grid;
      gap: 1.1rem;
      background: radial-gradient(circle at 20% 20%, rgba(236, 72, 153, 0.12), transparent 55%),
        radial-gradient(circle at 80% 15%, rgba(59, 130, 246, 0.16), transparent 60%),
        rgba(2, 6, 23, 0.9);
      border-radius: 1.1rem;
      padding: 1.3rem;
    }

    .smartlinks-preview__album {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .smartlinks-preview__cover {
      width: clamp(76px, 12vw, 96px);
      aspect-ratio: 1 / 1;
      border-radius: 0.9rem;
      background: linear-gradient(135deg, rgba(236, 72, 153, 0.85), rgba(59, 130, 246, 0.85));
      box-shadow: 0 18px 40px rgba(236, 72, 153, 0.25);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 800;
      font-size: clamp(1.4rem, 3vw, 1.8rem);
      overflow: hidden;
      position: relative;
      background-size: cover;
      background-position: center;
    }

    .smartlinks-preview__cover[data-has-cover="true"] {
      color: transparent;
      text-shadow: none;
      box-shadow: 0 18px 40px rgba(15, 23, 42, 0.45);
    }

    .smartlinks-preview__meta {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }

    .smartlinks-preview__title {
      margin: 0;
      font-size: clamp(1.1rem, 2vw, 1.35rem);
      font-weight: 700;
    }

    .smartlinks-preview__subtitle {
      margin: 0;
      color: rgba(203, 213, 225, 0.75);
      font-size: 0.9rem;
    }

    .smartlinks-preview__platforms {
      display: grid;
      gap: 0.65rem;
    }

    .smartlinks-preview__platform {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: rgba(15, 23, 42, 0.75);
      border-radius: 0.9rem;
      padding: 0.8rem 1rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      transition: transform 0.2s ease, border 0.2s ease;
    }

    .smartlinks-preview__platform:hover {
      transform: translateY(-1px);
      border-color: rgba(129, 140, 248, 0.5);
    }

    .smartlinks-preview__platform span {
      font-weight: 600;
    }

    .smartlinks-preview__cta {
      font-size: 0.85rem;
      color: rgba(165, 180, 252, 0.9);
      letter-spacing: 0.05em;
      text-transform: uppercase;
    }

    .smartlinks-success {
      border-radius: 0.9rem;
      border: 1px solid rgba(74, 222, 128, 0.35);
      background: rgba(22, 101, 52, 0.2);
      padding: 1rem 1.1rem;
      display: none;
    }

    .smartlinks-success.is-visible {
      display: block;
    }

    .smartlinks-success strong {
      display: block;
      color: #86efac;
      margin-bottom: 0.4rem;
    }

    .smartlinks-history {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .smartlinks-history h3 {
      margin: 0;
      font-size: 1.05rem;
    }

    .smartlinks-history__list {
      display: flex;
      flex-direction: column;
      gap: 0.85rem;
      margin: 0;
      padding: 0;
      list-style: none;
    }

    .smartlinks-history__item {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem 1rem;
      align-items: center;
      justify-content: space-between;
      background: rgba(15, 23, 42, 0.7);
      border: 1px solid rgba(148, 163, 184, 0.2);
      border-radius: 1rem;
      padding: 0.9rem 1rem;
    }

    .smartlinks-history__meta {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
      min-width: 200px;
    }

    .smartlinks-history__name {
      font-weight: 600;
      color: rgba(226, 232, 240, 0.95);
    }

    .smartlinks-history__date {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-history__actions {
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .smartlinks-history__actions button {
      border: none;
      border-radius: 999px;
      padding: 0.55rem 1.1rem;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      background: rgba(99, 102, 241, 0.2);
      color: rgba(199, 210, 254, 0.95);
      transition: background 0.2s ease;
    }

    .smartlinks-history__actions button:hover {
      background: rgba(99, 102, 241, 0.35);
    }

    .smartlinks-history__actions button[data-smartlink-history-delete] {
      background: rgba(239, 68, 68, 0.18);
      color: rgba(254, 226, 226, 0.95);
    }

    .smartlinks-history__actions button[data-smartlink-history-delete]:hover {
      background: rgba(239, 68, 68, 0.32);
    }

    .smartlinks-history__empty {
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-analytics {
      display: grid;
      gap: clamp(1.8rem, 3vw, 2.4rem);
      grid-template-columns: minmax(0, 1fr);
    }

    .smartlinks-analytics__layout {
      display: grid;
      gap: clamp(1.5rem, 2.5vw, 2.2rem);
    }

    .smartlinks-analytics__sidebar {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .smartlinks-analytics__list {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }

    .smartlinks-analytics__item {
      border-radius: 0.9rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.72);
      padding: 0.75rem 0.95rem;
      display: flex;
      justify-content: flex-start;
      align-items: center;
      gap: 0.8rem;
      cursor: pointer;
      transition: border 0.2s ease, transform 0.2s ease;
    }

    .smartlinks-analytics__item:hover {
      border-color: rgba(129, 140, 248, 0.5);
    }

    .smartlinks-analytics__item.is-active {
      border-color: rgba(99, 102, 241, 0.65);
      background: rgba(67, 56, 202, 0.35);
      box-shadow: 0 16px 36px rgba(79, 70, 229, 0.25);
    }

    .smartlinks-analytics__item-cover {
      width: 2.65rem;
      height: 2.65rem;
      border-radius: 0.65rem;
      background: rgba(30, 41, 59, 0.88);
      border: 1px solid rgba(148, 163, 184, 0.18);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: 0.8rem;
      color: rgba(226, 232, 240, 0.92);
      text-transform: uppercase;
      background-size: cover;
      background-position: center;
      flex-shrink: 0;
    }

    .smartlinks-analytics__item-cover[data-has-cover="true"] {
      background-color: transparent;
      border-color: rgba(148, 163, 184, 0.3);
      color: transparent;
    }

    .smartlinks-analytics__item-main {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
      min-width: 0;
      flex: 1 1 auto;
    }

    .smartlinks-analytics__item strong {
      font-size: 0.95rem;
      line-height: 1.3;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .smartlinks-analytics__item-main span {
      font-size: 0.8rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-analytics__item-date {
      margin-left: auto;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.78);
      white-space: nowrap;
    }

    .smartlinks-analytics__empty,
    .smartlinks-analytics__empty-list {
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.88);
    }

    .smartlinks-analytics__details {
      display: flex;
      flex-direction: column;
      gap: clamp(1.6rem, 2.4vw, 2.4rem);
    }

    .smartlinks-analytics__header {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: space-between;
      gap: clamp(0.9rem, 2vw, 1.4rem);
    }

    .smartlinks-analytics__header-main {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
      min-width: 0;
      flex: 1 1 220px;
    }

    .smartlinks-analytics__header-main h3 {
      margin: 0;
      font-size: clamp(1.2rem, 2.1vw, 1.6rem);
    }

    .smartlinks-analytics__header-main span {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-analytics__artwork {
      width: clamp(5rem, 12vw, 7.5rem);
      aspect-ratio: 1 / 1;
      border-radius: 1rem;
      background: rgba(30, 41, 59, 0.88);
      border: 1px solid rgba(148, 163, 184, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: 600;
      font-size: clamp(1rem, 1.8vw, 1.3rem);
      color: rgba(226, 232, 240, 0.92);
      text-transform: uppercase;
      background-size: cover;
      background-position: center;
      box-shadow: 0 18px 38px rgba(15, 23, 42, 0.45);
      flex-shrink: 0;
    }

    .smartlinks-analytics__artwork[data-has-cover="true"] {
      background-color: transparent;
      border-color: rgba(148, 163, 184, 0.32);
      color: transparent;
    }

    .smartlinks-summary {
      display: grid;
      gap: clamp(1rem, 2vw, 1.4rem);
      grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    }

    .smartlinks-summary__card {
      border-radius: 1rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.8);
      padding: 1rem 1.2rem;
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }

    .smartlinks-summary__label {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
      letter-spacing: 0.04em;
      text-transform: uppercase;
    }

    .smartlinks-summary__value {
      font-size: 1.6rem;
      font-weight: 700;
    }

    .smartlinks-summary__delta {
      font-size: 0.8rem;
      color: #86efac;
    }

    .smartlinks-map {
      position: relative;
      border-radius: 1.2rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.14), transparent 60%),
        radial-gradient(circle at 70% 30%, rgba(236, 72, 153, 0.12), transparent 65%),
        rgba(15, 23, 42, 0.82);
      overflow: hidden;
      min-height: 260px;
      padding: 1rem;
    }

    .smartlinks-map__header {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
      margin-bottom: 0.75rem;
    }

    .smartlinks-map__header strong {
      font-size: 1rem;
    }

    .smartlinks-map__header span {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-map__image {
      width: 100%;
      height: auto;
      opacity: 0.65;
      display: block;
    }

    .smartlinks-map__pulses {
      position: absolute;
      inset: 0;
      pointer-events: none;
    }

    .smartlinks-map__pulse {
      position: absolute;
      width: clamp(10px, 1.5vw, 14px);
      height: clamp(10px, 1.5vw, 14px);
      border-radius: 50%;
      background: rgba(129, 140, 248, 0.5);
      transform: translate(-50%, -50%);
      animation: smartlinkPulse 3.2s infinite;
      box-shadow: 0 0 0 rgba(129, 140, 248, 0.3);
    }

    .smartlinks-map__pulse::after {
      content: '';
      position: absolute;
      inset: -6px;
      border-radius: 50%;
      border: 1px solid rgba(129, 140, 248, 0.4);
      opacity: 0.6;
    }

    @keyframes smartlinkPulse {
      0% {
        box-shadow: 0 0 0 0 rgba(129, 140, 248, 0.35);
      }
      70% {
        box-shadow: 0 0 0 14px rgba(129, 140, 248, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(129, 140, 248, 0);
      }
    }

    .smartlinks-platforms-breakdown,
    .smartlinks-cities,
    .smartlinks-highlights {
      border-radius: 1.1rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.78);
      padding: 1.1rem 1.3rem;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
    }

    .smartlinks-platforms-breakdown ul,
    .smartlinks-cities ul,
    .smartlinks-highlights ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      gap: 0.55rem;
    }

    .smartlinks-platforms-breakdown li,
    .smartlinks-cities li,
    .smartlinks-highlights li {
      display: flex;
      align-items: center;
      gap: 0.6rem;
      justify-content: space-between;
    }

    .smartlinks-platforms-breakdown .bar {
      position: relative;
      flex: 1;
      height: 0.55rem;
      border-radius: 999px;
      background: rgba(30, 41, 59, 0.8);
      overflow: hidden;
    }

    .smartlinks-platforms-breakdown .bar span {
      position: absolute;
      inset: 0;
      border-radius: inherit;
    }

    .smartlinks-platforms-breakdown strong,
    .smartlinks-cities strong,
    .smartlinks-highlights strong {
      font-size: 0.95rem;
    }

    .smartlinks-cities span,
    .smartlinks-highlights span {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .smartlinks-timeline {
      position: relative;
      overflow: hidden;
      border-radius: 1.1rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.92), rgba(15, 23, 42, 0.72));
      padding: 1.2rem 1.4rem;
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      box-shadow: 0 18px 45px rgba(15, 23, 42, 0.35), inset 0 0 0 1px rgba(148, 163, 184, 0.08);
      backdrop-filter: blur(12px);
    }

    .smartlinks-timeline::before {
      content: '';
      position: absolute;
      top: -30%;
      right: -18%;
      width: 55%;
      height: 140%;
      background: radial-gradient(circle at center, rgba(59, 130, 246, 0.32), rgba(59, 130, 246, 0));
      opacity: 0.75;
      transform: rotate(8deg);
      pointer-events: none;
    }

    .smartlinks-timeline strong {
      position: relative;
      font-size: 0.95rem;
      letter-spacing: 0.01em;
    }

    .smartlinks-timeline__svg {
      width: 100%;
      height: 120px;
      filter: drop-shadow(0 10px 18px rgba(37, 99, 235, 0.12));
    }

    .smartlinks-grid {
      display: grid;
      gap: clamp(1.3rem, 2vw, 1.8rem);
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    }

    .smartlinks-analytics__split {
      display: grid;
      gap: clamp(1.3rem, 2vw, 1.6rem);
      grid-template-columns: minmax(0, 1fr);
    }

    @media (min-width: 980px) {
      .smartlinks-create-layout {
        grid-template-columns: minmax(0, 0.95fr) minmax(0, 1fr);
      }

      .smartlinks-analytics__layout {
        grid-template-columns: minmax(0, 0.5fr) minmax(0, 1fr);
      }

      .smartlinks-analytics__sidebar {
        position: sticky;
        top: clamp(1.5rem, 2.5vw, 2.2rem);
        align-self: flex-start;
      }

      .smartlinks-analytics__split {
        grid-template-columns: repeat(2, minmax(0, 1fr));
      }
    }

    @media (max-width: 720px) {
      .impersonation-banner {
        margin: 0 clamp(1.5rem, 6vw, 2.5rem) 1.5rem;
        flex-direction: column;
        align-items: stretch;
      }

      .impersonation-banner__button {
        width: 100%;
        text-align: center;
      }

      .smartlinks-preview__controls {
        flex-direction: column;
        align-items: stretch;
      }

      .smartlinks-history__item {
        flex-direction: column;
        align-items: flex-start;
      }

      .smartlinks-history__actions {
        width: 100%;
        justify-content: flex-start;
      }

      .login-history-modal__header {
        flex-direction: column;
        align-items: stretch;
      }

      .login-history-modal__user {
        text-align: left;
      }

      [dir='rtl'] .login-history-modal__user {
        text-align: right;
      }

      .login-history-modal__titles p {
        max-width: none;
      }
    }

    .mastering-modal__header {
      display: grid;
      gap: 0.85rem;
      max-width: 720px;
    }

    .mastering-modal__header h2 {
      margin: 0;
      font-size: clamp(2rem, 4.2vw, 2.6rem);
    }

    .mastering-modal__header p {
      margin: 0;
      color: rgba(203, 213, 225, 0.86);
      line-height: 1.7;
      font-size: 1rem;
    }

    .mastering-layout {
      display: flex;
      flex-direction: column;
      gap: clamp(1.8rem, 3.2vw, 3rem);
    }

    .mastering-stage {
      display: grid;
      gap: clamp(1.4rem, 3vw, 2.4rem);
    }

    .mastering-upload,
    .mastering-analysis,
    .mastering-preview {
      position: relative;
      border-radius: clamp(24px, 4vw, 32px);
      border: 1px solid rgba(148, 163, 184, 0.18);
      padding: clamp(2rem, 4vw, 2.8rem);
      background:
        radial-gradient(140% 140% at 10% 0%, rgba(99, 102, 241, 0.32) 0%, rgba(99, 102, 241, 0) 70%),
        radial-gradient(180% 180% at 90% 0%, rgba(236, 72, 153, 0.26) 0%, rgba(236, 72, 153, 0) 75%),
        rgba(15, 23, 42, 0.62);
      overflow: hidden;
    }

    .mastering-upload {
      display: grid;
      gap: clamp(1.1rem, 2.6vw, 1.6rem);
      align-items: center;
      justify-items: center;
      text-align: center;
    }

    .mastering-upload[hidden],
    .mastering-analysis[hidden],
    .mastering-preview[hidden] {
      display: none;
    }

    .mastering-dropzone {
      position: relative;
      border: 1.5px dashed rgba(148, 163, 184, 0.32);
      border-radius: clamp(28px, 5vw, 36px);
      padding: clamp(2.6rem, 5vw, 3.4rem);
      overflow: hidden;
      background-clip: padding-box;
      background:
        radial-gradient(120% 160% at 10% 0%, rgba(59, 130, 246, 0.36) 0%, rgba(59, 130, 246, 0) 70%),
        radial-gradient(140% 180% at 90% 0%, rgba(236, 72, 153, 0.3) 0%, rgba(236, 72, 153, 0) 75%),
        rgba(15, 23, 42, 0.65);
      cursor: pointer;
      transition: border 0.2s ease, transform 0.2s ease, box-shadow 0.35s ease;
      width: 100%;
      max-width: 640px;
    }

    .mastering-dropzone::after {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: linear-gradient(120deg, rgba(94, 234, 212, 0.22), rgba(59, 130, 246, 0.18));
      opacity: 0;
      transition: opacity 0.25s ease;
      pointer-events: none;
    }

    .mastering-dropzone.is-dragging,
    .mastering-dropzone:focus-visible {
      border-color: rgba(94, 234, 212, 0.9);
      box-shadow: 0 28px 48px rgba(13, 148, 136, 0.28);
      transform: translateY(-3px);
    }

    .mastering-dropzone.is-dragging::after,
    .mastering-dropzone:focus-visible::after,
    .mastering-dropzone:hover::after {
      opacity: 0.3;
    }

    .mastering-dropzone input[type="file"] {
      position: absolute;
      inset: 0;
      opacity: 0;
      pointer-events: none;
    }

    .mastering-dropzone__content {
      position: relative;
      z-index: 1;
      display: grid;
      gap: 0.75rem;
      justify-items: center;
      color: rgba(226, 232, 240, 0.9);
    }

    .mastering-dropzone__icon {
      width: clamp(82px, 12vw, 94px);
      height: clamp(82px, 12vw, 94px);
      border-radius: 30px;
      display: grid;
      place-items: center;
      background:
        radial-gradient(80% 80% at 30% 20%, rgba(236, 72, 153, 0.6) 0%, rgba(236, 72, 153, 0) 70%),
        radial-gradient(90% 90% at 70% 30%, rgba(59, 130, 246, 0.55) 0%, rgba(59, 130, 246, 0) 70%),
        rgba(30, 41, 59, 0.78);
      box-shadow: 0 26px 48px rgba(79, 70, 229, 0.38);
    }

    .mastering-dropzone__title {
      margin: 0;
      font-size: clamp(1.2rem, 2.8vw, 1.5rem);
      font-weight: 700;
    }

    .mastering-dropzone__subtitle,
    .mastering-dropzone__hint {
      margin: 0;
      font-size: 0.98rem;
      color: rgba(203, 213, 225, 0.82);
    }

    .mastering-dropzone__button {
      margin-top: 1rem;
      display: inline-flex;
      align-items: center;
      gap: 0.55rem;
      padding: 0.68rem 1.1rem;
      border-radius: 999px;
      background: rgba(94, 234, 212, 0.14);
      color: rgba(226, 232, 240, 0.95);
      font-weight: 600;
      border: 1px solid rgba(148, 163, 184, 0.3);
      transition: transform 0.2s ease, background 0.2s ease, border 0.2s ease;
    }

    .mastering-dropzone__button:hover {
      transform: translateY(-1px);
      background: rgba(94, 234, 212, 0.24);
      border-color: rgba(94, 234, 212, 0.6);
    }

    .mastering-analysis {
      display: grid;
      gap: 1.4rem;
      align-items: start;
      text-align: left;
    }

    [dir='rtl'] .mastering-analysis {
      text-align: right;
    }

    .mastering-analysis__header {
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }

    .mastering-analysis__title {
      margin: 0;
      font-size: clamp(1.15rem, 2.5vw, 1.45rem);
      font-weight: 700;
    }

    .mastering-status {
      margin: 0;
      font-size: 0.98rem;
      color: rgba(203, 213, 225, 0.82);
      transition: color 0.2s ease;
    }

    .mastering-status.is-error {
      color: #fda4af;
    }

    .mastering-status.is-success {
      color: #bbf7d0;
    }

    .mastering-progress {
      display: grid;
      gap: 1rem;
      border-radius: 22px;
      border: 1px solid rgba(148, 163, 184, 0.24);
      padding: 1.3rem 1.5rem;
      background: rgba(2, 6, 23, 0.62);
      opacity: 0;
      pointer-events: none;
      transform: translateY(6px);
      transition: opacity 0.25s ease, transform 0.25s ease;
    }

    .mastering-progress.is-active {
      opacity: 1;
      pointer-events: auto;
      transform: translateY(0);
    }

    .mastering-progress__visual {
      position: relative;
      display: grid;
      grid-auto-flow: column;
      gap: 0.4rem;
      align-items: end;
      height: 46px;
    }

    .mastering-progress__bar {
      display: block;
      width: 9px;
      border-radius: 999px;
      background: linear-gradient(180deg, rgba(94, 234, 212, 0.92), rgba(59, 130, 246, 0.4));
      height: 14px;
      animation: masteringEqualizer 1.4s ease-in-out infinite;
      animation-play-state: paused;
    }

    .mastering-progress.is-active .mastering-progress__bar {
      animation-play-state: running;
    }

    .mastering-progress__bar:nth-child(2) {
      animation-delay: 0.18s;
    }

    .mastering-progress__bar:nth-child(3) {
      animation-delay: 0.36s;
    }

    .mastering-progress__bar:nth-child(4) {
      animation-delay: 0.54s;
    }

    .mastering-progress__bar:nth-child(5) {
      animation-delay: 0.72s;
    }

    .mastering-progress__label {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.92);
    }

    .mastering-preview {
      --mastering-preview-padding: clamp(2rem, 4vw, 2.8rem);
      --mastering-player-padding-start: var(--mastering-preview-padding);
      --mastering-player-padding-end: var(--mastering-preview-padding);
      --mastering-player-margin-start: calc(var(--mastering-player-padding-start) * -1);
      --mastering-player-margin-end: calc(var(--mastering-player-padding-end) * -1);
      padding: var(--mastering-preview-padding);
      display: grid;
      gap: clamp(1.4rem, 3vw, 2rem);
      background:
        radial-gradient(140% 160% at 0% 0%, rgba(59, 130, 246, 0.28) 0%, rgba(59, 130, 246, 0) 70%),
        radial-gradient(160% 200% at 100% 0%, rgba(236, 72, 153, 0.28) 0%, rgba(236, 72, 153, 0) 70%),
        rgba(2, 6, 23, 0.7);
      overflow: visible;
    }

    .mastering-preview.has-pinned-player {
      padding-top: calc(var(--mastering-preview-padding) + clamp(0.4rem, 1vw, 0.85rem));
    }

    .mastering-preview__header {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      gap: 1rem;
    }

    .mastering-track-meta {
      display: grid;
      gap: 0.4rem;
    }

    .mastering-track-meta h3 {
      margin: 0;
      font-size: clamp(1.2rem, 2.6vw, 1.55rem);
    }

    .mastering-track-meta span {
      font-size: 0.96rem;
      color: rgba(148, 163, 184, 0.86);
    }

    .mastering-player__subtitle {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(203, 213, 225, 0.76);
    }

    .mastering-new-file {
      align-self: center;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.65rem 1.1rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.3);
      background: rgba(15, 23, 42, 0.55);
      color: rgba(226, 232, 240, 0.92);
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s ease, border 0.2s ease, background 0.2s ease;
    }

    .mastering-new-file:hover {
      transform: translateY(-1px);
      border-color: rgba(94, 234, 212, 0.6);
      background: rgba(94, 234, 212, 0.18);
    }

    .mastering-icon {
      width: 1.1em;
      height: 1.1em;
      flex-shrink: 0;
      display: block;
    }

    .mastering-icon--upload {
      width: 1em;
      height: 1em;
    }

    .mastering-player {
      display: grid;
      gap: 1.1rem;
      position: sticky;
      top: var(--mastering-sticky-active-offset, clamp(2rem, 4vw, 3rem));
      z-index: 5;
      width: 100%;
      padding-inline: clamp(0.85rem, 3vw, 1.5rem);
      --mastering-player-max-width: min(100%, clamp(40rem, 85vw, 70rem));
      --mastering-player-pinned-max-width: 100%;
      --mastering-player-inline-offset: 0px;
      margin-inline-start: var(--mastering-player-margin-start, 0px);
      margin-inline-end: var(--mastering-player-margin-end, 0px);
      margin-left: var(--mastering-player-margin-start, 0px);
      margin-right: var(--mastering-player-margin-end, 0px);
      transition:
        top 0.3s ease,
        margin 0.3s ease,
        padding 0.3s ease,
        background 0.3s ease,
        box-shadow 0.3s ease,
        border-radius 0.3s ease,
        gap 0.3s ease,
        transform 0.3s ease;
      isolation: isolate;
      transform: translate3d(
        var(--mastering-player-inline-offset, 0px),
        var(--mastering-sticky-transform, 0px),
        0px
      );
      transform-origin: top center;
    }

    .mastering-player:not(.is-pinned) {
      justify-items: center;
      width: var(--mastering-player-max-width);
      margin-inline: auto;
    }

    .mastering-player:not(.is-pinned) .mastering-waveform-wrapper,
    .mastering-player:not(.is-pinned) .mastering-player__controls {
      width: 100%;
      margin-inline: auto;
    }

    .mastering-player:not(.is-pinned) .mastering-player__controls {
      justify-content: center;
    }

    .mastering-player.is-pinned-animating {
      animation: masteringPlayerPinReveal 0.4s cubic-bezier(0.33, 1, 0.68, 1) both;
    }

    .mastering-player.is-pinned {
      --mastering-sticky-active-offset: 0px;
      --mastering-sticky-transform: 0px;
      --mastering-pinned-padding-start: var(--mastering-player-padding-start, var(--mastering-preview-padding));
      --mastering-pinned-padding-end: var(--mastering-player-padding-end, var(--mastering-preview-padding));
      --mastering-player-max-width: var(--mastering-player-pinned-max-width, 100%);
      margin-inline: auto;
      margin-inline-start: auto;
      margin-inline-end: auto;
      margin-left: auto;
      margin-right: auto;
      padding-top: clamp(1rem, 2.4vw, 1.6rem);
      padding-bottom: clamp(1rem, 2.4vw, 1.6rem);
      padding-inline-start: var(--mastering-pinned-padding-start);
      padding-inline-end: var(--mastering-pinned-padding-end);
      padding-left: var(--mastering-pinned-padding-start);
      padding-right: var(--mastering-pinned-padding-end);
      border-radius: clamp(24px, 4vw, 28px);
      background:
        linear-gradient(135deg, rgba(15, 23, 42, 0.96), rgba(15, 23, 42, 0.82));
      background-color: rgba(15, 23, 42, 0.92);
      box-shadow:
        inset 0 0 0 1px rgba(148, 163, 184, 0.24),
        0 32px 64px rgba(15, 23, 42, 0.55);
      backdrop-filter: blur(18px);
      gap: clamp(0.85rem, 2vw, 1.1rem);
    }

    [dir='rtl'] .mastering-player.is-pinned {
      margin-left: auto;
      margin-right: auto;
      padding-left: var(--mastering-pinned-padding-end);
      padding-right: var(--mastering-pinned-padding-start);
    }

    .mastering-player.is-pinned::before {
      content: '';
      position: absolute;
      inset: 0;
      background:
        radial-gradient(140% 140% at 10% -20%, rgba(59, 130, 246, 0.2), transparent 65%),
        radial-gradient(120% 120% at 90% 0%, rgba(236, 72, 153, 0.22), transparent 70%);
      opacity: 0.9;
      pointer-events: none;
      border-radius: inherit;
      z-index: -1;
    }

    .mastering-player::after {
      content: none;
    }

    @keyframes masteringPlayerPinReveal {
      0% {
        transform: translateY(calc(var(--mastering-sticky-transform, 0px) + 14px)) scale(0.94);
        opacity: 0;
      }

      50% {
        opacity: 1;
      }

      100% {
        transform: translateY(var(--mastering-sticky-transform, 0px)) scale(1);
        opacity: 1;
      }
    }

    .mastering-player.is-pinned .mastering-waveform-wrapper {
      border-radius: clamp(18px, 3vw, 22px);
      box-shadow:
        inset 0 0 0 1px rgba(148, 163, 184, 0.22),
        0 18px 32px rgba(8, 47, 73, 0.55);
      width: 100%;
      margin-inline: 0;
    }

    .mastering-player.is-pinned .mastering-waveform {
      height: clamp(48px, 14vw, 80px);
      filter: drop-shadow(0 12px 24px rgba(14, 116, 144, 0.28));
    }

    .mastering-player.is-pinned .mastering-player__controls {
      width: 100%;
      justify-content: space-between;
      flex-wrap: nowrap;
      gap: clamp(0.75rem, 1.5vw, 1.2rem);
    }

    .mastering-player.is-pinned .mastering-time {
      font-size: 0.98rem;
    }

    .mastering-player.is-pinned .mastering-toggle {
      white-space: nowrap;
    }

    .mastering-player.is-pinned .mastering-player__button {
      box-shadow: 0 20px 32px rgba(79, 70, 229, 0.38);
    }

    @media (max-width: 640px) {
      .mastering-player.is-pinned {
        --mastering-pinned-padding-start: calc(var(--mastering-preview-padding, 0px) * 0.6);
        --mastering-pinned-padding-end: calc(var(--mastering-preview-padding, 0px) * 0.6);
        margin-inline: calc(var(--mastering-preview-padding, 0px) * -0.6);
        margin-left: calc(var(--mastering-preview-padding, 0px) * -0.6);
        margin-right: calc(var(--mastering-preview-padding, 0px) * -0.6);
        padding-inline: calc(var(--mastering-preview-padding, 0px) * 0.6);
      }

      .mastering-player.is-pinned .mastering-player__controls {
        flex-wrap: wrap;
      }
    }

    .mastering-waveform-wrapper {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 24px;
      overflow: hidden;
      background: linear-gradient(135deg, rgba(15, 23, 42, 0.85), rgba(30, 41, 59, 0.55));
      box-shadow: 0 24px 45px rgba(15, 23, 42, 0.45);
      isolation: isolate;
      margin-inline: auto;
      margin-left: auto;
      margin-right: auto;
      justify-self: center;
      width: var(--mastering-player-max-width, min(100%, clamp(36rem, 80vw, 64rem)));
    }

    .mastering-waveform-wrapper::before,
    .mastering-waveform-wrapper::after {
      content: '';
      position: absolute;
      inset: 0;
      pointer-events: none;
    }

    .mastering-waveform-wrapper::before {
      background:
        radial-gradient(120% 120% at 10% 10%, rgba(59, 130, 246, 0.22), transparent 65%),
        radial-gradient(140% 140% at 90% 20%, rgba(236, 72, 153, 0.22), transparent 70%);
      mix-blend-mode: screen;
      opacity: 0.85;
    }

    .mastering-waveform-wrapper::after {
      background: linear-gradient(180deg, rgba(15, 23, 42, 0) 35%, rgba(15, 23, 42, 0.55) 100%);
    }

    .mastering-waveform {
      display: block;
      width: 100%;
      max-width: 100%;
      margin-inline: auto;
      height: clamp(140px, 22vw, 190px);
      filter: drop-shadow(0 18px 38px rgba(14, 116, 144, 0.35));
      mix-blend-mode: lighten;
      transition: height 0.35s cubic-bezier(0.4, 0, 0.2, 1), filter 0.35s ease;
    }

    @supports (backdrop-filter: blur(0.3rem)) {
      .mastering-waveform-wrapper {
        background: linear-gradient(135deg, rgba(15, 23, 42, 0.68), rgba(15, 23, 42, 0.35));
        backdrop-filter: blur(22px);
      }
    }

    .mastering-playhead {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      width: 2px;
      background: linear-gradient(180deg, rgba(94, 234, 212, 0.95), rgba(59, 130, 246, 0.9));
      box-shadow: 0 0 18px rgba(94, 234, 212, 0.45);
      transform: translateX(-1px);
    }

    .mastering-player__controls {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 0.85rem;
    }

    .mastering-player__button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 48px;
      height: 48px;
      border-radius: 16px;
      border: none;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(236, 72, 153, 0.95));
      color: #f8fafc;
      font-size: 1.05rem;
      cursor: pointer;
      box-shadow: 0 18px 28px rgba(79, 70, 229, 0.35);
      transition: transform 0.2s ease, opacity 0.2s ease;
    }

    .mastering-player__button:hover {
      transform: translateY(-2px);
    }

    .mastering-time {
      display: flex;
      align-items: baseline;
      gap: 0.35rem;
      font-weight: 600;
      color: rgba(226, 232, 240, 0.9);
    }

    .mastering-toggle {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      padding: 0.55rem 0.85rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.28);
      background: rgba(15, 23, 42, 0.65);
      color: rgba(226, 232, 240, 0.9);
      cursor: pointer;
      transition: transform 0.2s ease, border 0.2s ease, background 0.2s ease;
    }

    .mastering-toggle[aria-pressed="true"] {
      background: rgba(94, 234, 212, 0.18);
      border-color: rgba(94, 234, 212, 0.6);
      color: rgba(226, 232, 240, 0.95);
    }

    .mastering-toggle:hover {
      transform: translateY(-1px);
    }

    .mastering-presets {
      display: grid;
      gap: 1.2rem;
    }

    .mastering-presets__header {
      display: flex;
      flex-direction: column;
      gap: 0.45rem;
    }

    .mastering-presets__header h3 {
      margin: 0;
      font-size: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.86);
    }

    .mastering-presets__header p {
      margin: 0;
      font-size: 0.92rem;
      color: rgba(203, 213, 225, 0.78);
    }

    .mastering-presets__grid {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: minmax(160px, 1fr);
      gap: 0.85rem;
      overflow-x: auto;
      overflow-y: hidden;
      padding-bottom: 0.4rem;
      scrollbar-width: thin;
      scroll-snap-type: x mandatory;
      -webkit-mask-image: linear-gradient(to right, transparent 0, rgba(0, 0, 0, 0.75) 4%, rgba(0, 0, 0, 0.75) 96%, transparent 100%);
      mask-image: linear-gradient(to right, transparent 0, rgba(0, 0, 0, 0.75) 4%, rgba(0, 0, 0, 0.75) 96%, transparent 100%);
    }

    .mastering-presets__grid::-webkit-scrollbar {
      height: 6px;
    }

    .mastering-presets__grid::-webkit-scrollbar-thumb {
      background: rgba(148, 163, 184, 0.32);
      border-radius: 999px;
    }

    .mastering-visualizer {
      margin-top: clamp(1.6rem, 3vw, 2.4rem);
      border-radius: 26px;
      border: 1px solid rgba(148, 163, 184, 0.2);
      padding: clamp(1.6rem, 3vw, 2.4rem);
      background:
        radial-gradient(140% 140% at 8% 0%, rgba(56, 189, 248, 0.2) 0%, rgba(56, 189, 248, 0) 70%),
        radial-gradient(160% 160% at 92% 0%, rgba(236, 72, 153, 0.22) 0%, rgba(236, 72, 153, 0) 78%),
        rgba(15, 23, 42, 0.55);
      display: grid;
      gap: clamp(1.2rem, 2.4vw, 1.8rem);
      position: relative;
      overflow: hidden;
    }

    .mastering-visualizer::after {
      content: '';
      position: absolute;
      inset: 0;
      pointer-events: none;
      background: linear-gradient(120deg, rgba(148, 163, 184, 0.06), rgba(94, 234, 212, 0.05));
      mix-blend-mode: screen;
    }

    .mastering-visualizer__header {
      position: relative;
      display: flex;
      flex-direction: column;
      gap: 0.4rem;
    }

    .mastering-visualizer__header h3 {
      margin: 0;
      font-size: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(226, 232, 240, 0.92);
    }

    .mastering-visualizer__header p {
      margin: 0;
      font-size: 0.92rem;
      color: rgba(203, 213, 225, 0.78);
      max-width: 520px;
    }

    .mastering-visualizer__toggles {
      position: relative;
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
      margin-top: clamp(0.8rem, 1.2vw, 1rem);
    }

    .mastering-visualizer__toggle {
      appearance: none;
      border: 1px solid rgba(148, 163, 184, 0.24);
      background: rgba(15, 23, 42, 0.66);
      color: rgba(203, 213, 225, 0.82);
      border-radius: 999px;
      padding: 0.45rem 1rem;
      font-size: 0.72rem;
      letter-spacing: 0.16em;
      text-transform: uppercase;
      font-weight: 600;
      cursor: pointer;
      transition: border 0.2s ease, background 0.2s ease, color 0.2s ease, box-shadow 0.2s ease;
    }

    .mastering-visualizer__toggle.is-active {
      border-color: rgba(56, 189, 248, 0.65);
      background: linear-gradient(135deg, rgba(56, 189, 248, 0.24), rgba(59, 130, 246, 0.28));
      color: rgba(226, 232, 240, 0.95);
      box-shadow: 0 12px 24px rgba(56, 189, 248, 0.18);
    }

    .mastering-visualizer__toggle:focus-visible {
      outline: 2px solid rgba(56, 189, 248, 0.65);
      outline-offset: 3px;
    }

    .mastering-visualizer__toggle[disabled] {
      cursor: not-allowed;
      opacity: 0.7;
    }

    .mastering-visualizer__grid {
      position: relative;
      display: grid;
      gap: clamp(1.1rem, 2.2vw, 1.6rem);
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .mastering-visualizer__grid[data-visualizer-active-count='1'] {
      grid-template-columns: minmax(0, 1fr);
    }

    .mastering-visualizer__card {
      position: relative;
      border-radius: 22px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background:
        linear-gradient(145deg, rgba(15, 23, 42, 0.82), rgba(2, 6, 23, 0.7));
      padding: clamp(1.1rem, 2.4vw, 1.6rem);
      display: grid;
      gap: 1rem;
      overflow: hidden;
    }

    .mastering-visualizer__card[data-visualizer-active='false'] {
      display: none;
    }

    .mastering-visualizer__card::after {
      content: '';
      position: absolute;
      inset: 0;
      background: radial-gradient(160% 120% at 50% 0%, rgba(56, 189, 248, 0.14) 0%, transparent 72%);
      mix-blend-mode: screen;
      pointer-events: none;
    }

    .mastering-visualizer__card-title {
      position: relative;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.75rem;
      letter-spacing: 0.28em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.82);
    }

    .mastering-visualizer__canvas {
      position: relative;
      width: 100%;
      height: clamp(200px, 26vw, 260px);
      border-radius: 18px;
      background: rgba(2, 6, 23, 0.75);
    }

    .mastering-visualizer__canvas--stereo {
      height: auto;
      aspect-ratio: 1 / 1;
      min-height: clamp(200px, 26vw, 260px);
      background: rgba(2, 6, 23, 0.8);
    }

    .mastering-visualizer__bars {
      position: relative;
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: minmax(6px, 1fr);
      gap: clamp(0.35rem, 1.4vw, 0.6rem);
      align-items: end;
      height: clamp(200px, 26vw, 260px);
      padding: 0.6rem 0;
    }

    .mastering-visualizer__bar {
      position: relative;
      display: block;
      width: 100%;
      height: 100%;
      border-radius: 999px;
      background: linear-gradient(180deg, rgba(94, 234, 212, 0.85), rgba(56, 189, 248, 0.55), rgba(99, 102, 241, 0.4));
      transform-origin: 50% 100%;
      transform: scaleY(var(--bar-scale, 0.2));
      opacity: var(--bar-opacity, 0.4);
      box-shadow: 0 18px 32px rgba(56, 189, 248, 0.18);
      transition: transform 0.25s ease, opacity 0.3s ease;
    }

    .mastering-visualizer__bar::after {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: linear-gradient(0deg, rgba(244, 114, 182, 0.15), rgba(56, 189, 248, 0.05));
      opacity: 0.6;
      mix-blend-mode: screen;
      pointer-events: none;
    }

    @media (max-width: 960px) {
      .mastering-visualizer__grid {
        grid-template-columns: minmax(0, 1fr);
      }
    }

    .mastering-preset {
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(15, 23, 42, 0.72);
      padding: 0.95rem 1.15rem;
      color: rgba(226, 232, 240, 0.92);
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s ease, border 0.2s ease, background 0.2s ease;
      text-align: left;
      min-height: 88px;
      display: grid;
      align-content: center;
      gap: 0.35rem;
      scroll-snap-align: start;
    }

    [dir='rtl'] .mastering-preset {
      text-align: right;
    }

    .mastering-preset span {
      font-size: 0.82rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.75);
    }

    .mastering-preset strong {
      font-size: 0.98rem;
    }

    .mastering-preset:hover {
      transform: translateY(-2px);
      border-color: rgba(94, 234, 212, 0.65);
    }

    .mastering-preset.is-active {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(236, 72, 153, 0.92));
      border-color: transparent;
      color: #f8fafc;
      box-shadow: 0 18px 32px rgba(79, 70, 229, 0.38);
    }

    .mastering-preset.is-active span {
      color: rgba(248, 250, 252, 0.8);
    }

    .mastering-controls {
      display: grid;
      gap: 1.1rem;
      padding: 1.4rem 1.6rem;
      border-radius: 22px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.6);
      box-shadow: inset 0 0 0 1px rgba(15, 23, 42, 0.45);
    }

    .mastering-controls__header {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
    }

    .mastering-controls__header h3 {
      margin: 0;
      font-size: 1rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.9);
    }

    .mastering-controls__header p {
      margin: 0;
      font-size: 0.92rem;
      color: rgba(203, 213, 225, 0.78);
    }

    .mastering-control-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      gap: 1.1rem;
    }

    .mastering-control {
      display: grid;
      gap: 0.5rem;
    }

    .mastering-control label {
      font-size: 0.9rem;
      color: rgba(226, 232, 240, 0.85);
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      align-items: baseline;
      gap: 0.4rem;
    }

    .mastering-control__value {
      font-size: 0.82rem;
      color: rgba(148, 163, 184, 0.85);
      font-weight: 500;
    }

    .mastering-control input[type="range"] {
      width: 100%;
      -webkit-appearance: none;
      appearance: none;
      height: 6px;
      border-radius: 999px;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.5), rgba(236, 72, 153, 0.45));
      outline: none;
      cursor: pointer;
    }

    .mastering-control input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: #f8fafc;
      box-shadow: 0 6px 16px rgba(79, 70, 229, 0.35);
      border: 2px solid rgba(99, 102, 241, 0.6);
    }

    .mastering-control input[type="range"]::-moz-range-thumb {
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: #f8fafc;
      border: 2px solid rgba(99, 102, 241, 0.6);
      box-shadow: 0 6px 16px rgba(79, 70, 229, 0.35);
    }

    .mastering-control input[type="range"]::-moz-range-track {
      background: transparent;
    }

    .mastering-control input[type="range"]:focus-visible {
      outline: none;
      box-shadow: 0 0 0 3px rgba(94, 234, 212, 0.35);
    }

    .mastering-checkout {
      display: grid;
      gap: 1.1rem;
      background:
        radial-gradient(120% 120% at 100% 0%, rgba(236, 72, 153, 0.32) 0%, rgba(236, 72, 153, 0) 70%),
        rgba(15, 23, 42, 0.6);
      border: 1px solid rgba(244, 114, 182, 0.25);
      border-radius: clamp(24px, 4vw, 28px);
      padding: clamp(1.8rem, 3.4vw, 2.4rem);
      position: relative;
      overflow: hidden;
    }

    .mastering-checkout::before {
      content: '';
      position: absolute;
      inset: -40% -20% 20% -20%;
      background: radial-gradient(90% 90% at 50% 0%, rgba(59, 130, 246, 0.45) 0%, rgba(59, 130, 246, 0) 70%);
      opacity: 0.7;
      pointer-events: none;
    }

    .mastering-checkout h3 {
      margin: 0;
      font-size: clamp(1.2rem, 2.6vw, 1.5rem);
    }

    .mastering-checkout__hint {
      margin: 0;
      color: rgba(226, 232, 240, 0.78);
      font-size: 0.95rem;
    }

    .mastering-checkout__options {
      display: grid;
      gap: 1.1rem;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      align-items: stretch;
      position: relative;
      z-index: 1;
    }

    .mastering-download {
      position: relative;
      z-index: 1;
      display: grid;
      gap: 1rem;
      border-radius: 20px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(2, 6, 23, 0.55);
      padding: 1.3rem 1.4rem;
    }

    .mastering-download p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(226, 232, 240, 0.78);
    }

    .mastering-option {
      border-radius: 20px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(2, 6, 23, 0.55);
      padding: 1.1rem 1.2rem 1.3rem;
      display: grid;
      gap: 0.75rem;
    }

    .mastering-option h4 {
      margin: 0;
      font-size: 1rem;
      color: rgba(224, 231, 255, 0.95);
    }

    .mastering-option p {
      margin: 0;
      color: rgba(203, 213, 225, 0.8);
      font-size: 0.9rem;
      line-height: 1.55;
    }

    .mastering-cta {
      width: 100%;
      border-radius: 14px;
      border: none;
      padding: 0.85rem 1rem;
      font-weight: 700;
      font-size: 0.95rem;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(236, 72, 153, 0.95));
      color: #f8fafc;
      cursor: pointer;
      box-shadow: 0 16px 32px rgba(79, 70, 229, 0.35);
      transition: transform 0.2s ease, opacity 0.2s ease;
    }

    .mastering-cta:hover:not([disabled]) {
      transform: translateY(-2px);
    }

    .mastering-cta[disabled] {
      opacity: 0.65;
      cursor: not-allowed;
      box-shadow: none;
    }

    .mastering-cta.is-loading {
      position: relative;
      color: rgba(248, 250, 252, 0.75);
    }

    .mastering-cta.is-loading::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 1.2rem;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid rgba(248, 250, 252, 0.45);
      border-top-color: #f8fafc;
      transform: translateY(-50%);
      animation: masteringSpin 0.8s linear infinite;
    }

    .mastering-feedback {
      margin: 0;
      font-size: 0.9rem;
      text-align: center;
      color: rgba(203, 213, 225, 0.85);
    }

    .mastering-feedback.error {
      color: #fda4af;
    }

    .mastering-feedback.success {
      color: #86efac;
    }

    @keyframes masteringEqualizer {
      0% { transform: scaleY(0.35); }
      20% { transform: scaleY(1); }
      40% { transform: scaleY(0.45); }
      60% { transform: scaleY(0.9); }
      80% { transform: scaleY(0.5); }
      100% { transform: scaleY(0.85); }
    }

    @keyframes masteringSpin {
      to { transform: translateY(-50%) rotate(360deg); }
    }

    @media (max-width: 1080px) {
      .mastering-layout {
        gap: clamp(1.5rem, 4vw, 2.4rem);
      }

      .mastering-checkout {
        order: initial;
      }
    }

    @media (max-width: 720px) {
      .mastering-dropzone {
        padding: 1.9rem;
      }

      .mastering-waveform {
        height: 160px;
      }

      .mastering-player__controls {
        flex-direction: column;
        align-items: flex-start;
      }

      .mastering-presets__grid {
        grid-auto-columns: minmax(140px, 1fr);
      }

      .mastering-track-meta {
        gap: 0.25rem;
      }
    }

    @media (prefers-reduced-motion: reduce) {
      .mastering-dropzone,
      .mastering-preset,
      .mastering-cta {
        transition: none !important;
      }

      .mastering-progress__bar {
        animation: none;
      }

      .mastering-cta.is-loading::after {
        animation: none;
      }
    }

    .royalties-layout {
      display: grid;
      grid-template-columns: minmax(0, 1.2fr) minmax(0, 0.8fr);
      gap: clamp(1.8rem, 4vw, 3rem);
      align-items: stretch;
    }

    .royalties-intro {
      display: grid;
      gap: clamp(1.1rem, 2.5vw, 1.8rem);
      position: relative;
    }

    .royalties-badges {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
    }

    .royalties-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      padding: 0.55rem 0.9rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 700;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      background: rgba(15, 23, 42, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.2);
      color: rgba(226, 232, 240, 0.85);
    }

    .royalties-badge svg {
      width: 16px;
      height: 16px;
      flex-shrink: 0;
    }

    .royalties-badge--accent {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(236, 72, 153, 0.95));
      color: #f8fafc;
      box-shadow: 0 18px 38px rgba(79, 70, 229, 0.35);
      border-color: transparent;
    }

    .royalties-headline {
      display: grid;
      gap: 0.8rem;
    }

    .royalties-headline h2 {
      margin: 0;
      font-size: clamp(1.9rem, 4.2vw, 2.6rem);
    }

    .royalties-headline p {
      margin: 0;
      color: rgba(203, 213, 225, 0.9);
      font-size: 1rem;
      line-height: 1.65;
    }

    .royalties-divider {
      height: 1px;
      width: 100%;
      background: linear-gradient(90deg, rgba(99, 102, 241, 0), rgba(236, 72, 153, 0.45), rgba(14, 165, 233, 0));
      border-radius: 999px;
    }

    .royalties-features-title {
      margin: 0;
      font-size: 0.95rem;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.12em;
      color: rgba(148, 163, 184, 0.85);
    }

    .royalties-feature-grid {
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: 1rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .royalties-feature {
      position: relative;
      display: grid;
      gap: 0.55rem;
      padding: 1.05rem 1.2rem 1.15rem;
      border-radius: 22px;
      background: linear-gradient(150deg, rgba(15, 23, 42, 0.92), rgba(30, 41, 59, 0.75));
      border: 1px solid rgba(148, 163, 184, 0.18);
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.22);
    }

    .royalties-feature__icon {
      width: 38px;
      height: 38px;
      border-radius: 14px;
      background: radial-gradient(circle at 30% 30%, rgba(99, 102, 241, 0.45), rgba(15, 23, 42, 0.1));
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: rgba(129, 140, 248, 0.95);
      box-shadow: inset 0 1px 0 rgba(129, 140, 248, 0.35);
    }

    .royalties-feature__icon svg {
      width: 20px;
      height: 20px;
    }

    .royalties-feature p {
      margin: 0;
      font-size: 0.95rem;
      line-height: 1.6;
      color: rgba(226, 232, 240, 0.92);
    }

    .royalties-plan {
      display: flex;
      align-items: stretch;
    }

    .royalties-plan-card {
      position: relative;
      display: grid;
      gap: clamp(1.1rem, 2.6vw, 1.9rem);
      width: 100%;
      padding: clamp(1.8rem, 3vw, 2.4rem);
      border-radius: clamp(26px, 4vw, 32px);
      background: linear-gradient(160deg, rgba(30, 41, 59, 0.98), rgba(15, 23, 42, 0.88));
      border: 1px solid rgba(99, 102, 241, 0.28);
      box-shadow: 0 35px 80px rgba(2, 6, 23, 0.55);
      overflow: hidden;
    }

    .royalties-plan-card::before {
      content: '';
      position: absolute;
      inset: -45% -20% -25% -25%;
      background: radial-gradient(circle at 20% 10%, rgba(236, 72, 153, 0.55), transparent 65%),
        radial-gradient(circle at 85% 25%, rgba(14, 165, 233, 0.45), transparent 65%),
        radial-gradient(circle at 40% 100%, rgba(99, 102, 241, 0.35), transparent 65%);
      opacity: 0.7;
      pointer-events: none;
    }

    .royalties-plan-card > * {
      position: relative;
      z-index: 1;
    }

    .royalties-plan-header {
      display: grid;
      gap: 0.65rem;
    }

    .royalties-plan-label {
      font-size: 0.85rem;
      font-weight: 700;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      color: rgba(203, 213, 225, 0.78);
    }

    .plan-meta {
      display: grid;
      gap: 0.9rem;
    }

    .plan-meta__pill {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      padding: 0.75rem 1rem;
      border-radius: 18px;
      background: rgba(2, 6, 23, 0.55);
      border: 1px solid rgba(148, 163, 184, 0.18);
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.18);
    }

    .plan-meta__badge {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      font-size: 0.9rem;
      font-weight: 700;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(226, 232, 240, 0.92);
    }

    .plan-meta__tagline {
      font-size: 0.9rem;
      font-weight: 600;
      color: rgba(148, 163, 184, 0.95);
      text-align: right;
    }

    .plan-switch {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 0.4rem;
      background: rgba(2, 6, 23, 0.55);
      border-radius: 999px;
      padding: 0.4rem;
      border: 1px solid rgba(148, 163, 184, 0.22);
      width: 100%;
    }

    .plan-switch button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      border: none;
      padding: 0.55rem 1.35rem;
      border-radius: 999px;
      background: transparent;
      color: rgba(226, 232, 240, 0.8);
      font-weight: 700;
      font-size: 0.9rem;
      white-space: nowrap;
      cursor: pointer;
      transition: background 0.2s ease, color 0.2s ease, transform 0.2s ease;
      width: 100%;
    }

    .plan-switch button.is-active {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(236, 72, 153, 0.95));
      color: #0f172a;
      box-shadow: 0 16px 32px rgba(79, 70, 229, 0.35);
      transform: translateY(-1px);
    }

    .plan-price-block {
      display: inline-flex;
      align-items: baseline;
      gap: clamp(0.45rem, 1vw, 0.75rem);
      flex-wrap: nowrap;
    }

    .plan-pricing {
      display: inline-flex;
      align-items: baseline;
      gap: 0.35rem;
      font-weight: 800;
      font-size: clamp(2.6rem, 6vw, 3.6rem);
      white-space: nowrap;
    }

    .plan-pricing__currency {
      font-size: clamp(1.3rem, 4vw, 1.6rem);
      color: rgba(226, 232, 240, 0.92);
    }

    .plan-pricing__amount--decimal {
      font-size: clamp(1.4rem, 4vw, 2rem);
      align-self: baseline;
      line-height: 1;
    }

    .plan-pricing__frequency {
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.9);
      font-weight: 600;
      letter-spacing: 0.04em;
      white-space: nowrap;
    }

    .plan-note {
      margin: 0;
      color: rgba(148, 163, 184, 0.92);
      font-size: 0.92rem;
      line-height: 1.5;
    }

    .plan-includes {
      display: grid;
      gap: 0.75rem;
    }

    .plan-includes__label {
      font-size: 0.85rem;
      font-weight: 700;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      color: rgba(203, 213, 225, 0.75);
    }

    .plan-highlights {
      list-style: none;
      margin: 0;
      padding: 0;
      display: grid;
      gap: 0.7rem;
    }

    .plan-highlights__item {
      display: grid;
      grid-template-columns: auto 1fr;
      align-items: start;
      gap: 0.65rem;
      font-size: 0.92rem;
      line-height: 1.5;
      color: rgba(226, 232, 240, 0.88);
    }

    .plan-highlights__icon {
      width: 26px;
      height: 26px;
      border-radius: 10px;
      background: radial-gradient(circle at 30% 30%, rgba(129, 140, 248, 0.55), rgba(15, 23, 42, 0.2));
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: rgba(129, 140, 248, 0.95);
      box-shadow: inset 0 1px 0 rgba(129, 140, 248, 0.32);
    }

    .plan-highlights__icon svg {
      width: 14px;
      height: 14px;
    }

    .plan-cta {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      border: none;
      border-radius: 18px;
      padding: 1rem 1.6rem;
      font-weight: 700;
      font-size: 1rem;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      color: #f8fafc;
      cursor: pointer;
      box-shadow: 0 26px 52px rgba(79, 70, 229, 0.4);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      width: 100%;
    }

    .plan-cta:hover {
      transform: translateY(-2px);
      box-shadow: 0 30px 60px rgba(79, 70, 229, 0.45);
    }

    .plan-cta.is-loading {
      pointer-events: none;
      opacity: 0.8;
    }

    .plan-feedback {
      min-height: 1.25rem;
      font-size: 0.9rem;
      color: rgba(226, 232, 240, 0.88);
      font-weight: 600;
    }

    .plan-feedback.error {
      color: rgba(248, 113, 113, 0.92);
    }

    .plan-feedback.success {
      color: rgba(94, 234, 212, 0.9);
    }

    .plan-divider {
      height: 1px;
      width: 100%;
      background: linear-gradient(90deg, rgba(236, 72, 153, 0), rgba(236, 72, 153, 0.6), rgba(20, 184, 166, 0));
      border-radius: 999px;
    }

    .plan-footer {
      display: grid;
      gap: 0.6rem;
    }

    .modal-guarantee {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(203, 213, 225, 0.88);
      text-transform: uppercase;
      letter-spacing: 0.08em;
      text-align: center;
    }

    @media (max-width: 960px) {
      .royalties-layout {
        grid-template-columns: 1fr;
      }

      .royalties-plan {
        order: -1;
      }
    }

    @media (max-width: 640px) {
      .royalties-plan-card {
        padding: clamp(1.6rem, 6vw, 2rem);
      }

      .plan-switch {
        width: 100%;
      }

      .plan-switch button {
        text-align: center;
      }

      .royalties-feature-grid {
        grid-template-columns: minmax(0, 1fr);
      }
    }

    .admin-grid {
      display: grid;
      gap: clamp(1.5rem, 3vw, 2rem);
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }

    .admin-panel[data-admin-panel="design"] .admin-grid {
      grid-template-columns: minmax(0, 1fr);
    }

    .admin-card {
      background: rgba(15, 23, 42, 0.78);
      border-radius: 22px;
      border: 1px solid rgba(148, 163, 184, 0.18);
      padding: clamp(1.6rem, 3vw, 2rem);
      display: grid;
      gap: 1rem;
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.15);
    }

    .admin-card h3 {
      margin: 0;
      font-size: 1.2rem;
    }

    .admin-card p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(203, 213, 225, 0.85);
    }

    .admin-card form {
      display: grid;
      gap: 1rem;
    }

    .admin-card label {
      font-size: 0.85rem;
      font-weight: 600;
      color: rgba(148, 163, 184, 0.95);
    }

    .admin-card input,
    .admin-card select,
    .admin-card textarea {
      width: 100%;
      border-radius: 14px;
      border: 1px solid var(--select-border);
      background: rgba(15, 23, 42, 0.9);
      padding: 0.75rem 1rem;
      color: #f8fafc;
      font-size: 0.95rem;
      transition: border 0.2s ease, box-shadow 0.2s ease, background-position 0.4s ease;
    }

    .admin-card select {
      appearance: none;
      background-color: var(--select-surface);
      background-image: linear-gradient(135deg, rgba(99, 102, 241, 0.16), rgba(236, 72, 153, 0.12)), var(--select-arrow);
      background-repeat: no-repeat, no-repeat;
      background-size: 260% 260%, 1.1rem;
      background-position: left center, calc(100% - 1rem) center;
      padding-right: 2.75rem;
      cursor: pointer;
    }

    .admin-card select[multiple] {
      appearance: none;
      background-image: none;
      padding-right: 1rem;
      cursor: default;
    }

    .admin-card select:hover {
      border-color: var(--select-hover-border);
      background-position: center center, calc(100% - 1rem) center;
    }

    .admin-card input:focus,
    .admin-card select:focus,
    .admin-card textarea:focus {
      border-color: var(--select-hover-border);
      box-shadow: 0 0 0 3px var(--select-focus-ring);
      outline: none;
    }

    .admin-card textarea {
      min-height: 180px;
      resize: vertical;
    }

    .admin-card select option {
      background: rgba(15, 23, 42, 0.95);
      color: var(--text);
    }

    .admin-card select::-ms-expand {
      display: none;
    }

    .admin-card button[type="submit"] {
      justify-self: start;
      border-radius: 14px;
      border: none;
      padding: 0.75rem 1.4rem;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      color: #f8fafc;
      font-weight: 700;
      cursor: pointer;
      box-shadow: 0 16px 32px rgba(79, 70, 229, 0.35);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-card button[type="submit"]:hover {
      transform: translateY(-1px);
      box-shadow: 0 20px 40px rgba(79, 70, 229, 0.4);
    }

    .admin-card button[type="submit"].is-loading {
      pointer-events: none;
      opacity: 0.75;
    }

    .admin-card small {
      color: rgba(148, 163, 184, 0.75);
      font-size: 0.8rem;
    }

    .admin-newsletter {
      display: grid;
      gap: 1.5rem;
    }

    .admin-newsletter__fieldset {
      border: 1px solid rgba(148, 163, 184, 0.18);
      border-radius: 18px;
      padding: 1.25rem 1.4rem;
      background: rgba(9, 17, 36, 0.65);
      display: grid;
      gap: 1rem;
    }

    .admin-newsletter__fieldset legend {
      padding: 0.25rem 0.75rem;
      font-size: 0.85rem;
      font-weight: 700;
      letter-spacing: 0.05em;
      text-transform: uppercase;
      color: rgba(224, 231, 255, 0.92);
      background: rgba(2, 6, 23, 0.85);
      border-radius: 12px;
    }

    .admin-newsletter__field {
      display: grid;
      gap: 0.45rem;
    }

    .admin-newsletter__group-grid {
      display: grid;
      gap: 1rem;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
    }

    .admin-newsletter__choices {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .admin-newsletter__choice {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      font-size: 0.85rem;
      color: rgba(203, 213, 225, 0.9);
    }

    .admin-newsletter__choice input {
      accent-color: #6366f1;
    }

    .admin-newsletter__select {
      min-height: 200px;
    }

    .admin-newsletter__hint {
      margin: 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.75);
    }

    .admin-newsletter__delivery-grid {
      display: grid;
      gap: 1rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    }

    .admin-newsletter__smtp {
      display: grid;
      gap: 1rem;
    }

    .admin-distribution-provider {
      display: grid;
      gap: 1rem;
    }

    .admin-monetization {
      margin-top: 0.5rem;
      display: grid;
      gap: 1.5rem;
    }

    .admin-monetization__group {
      padding: 1.25rem 1.5rem;
      border-radius: 18px;
      border: 1px solid rgba(148, 163, 184, 0.18);
      background: rgba(9, 17, 36, 0.75);
      display: grid;
      gap: 1rem;
    }

    .admin-monetization__group-header h4 {
      margin: 0;
      font-size: 1rem;
    }

    .admin-monetization__group-header p {
      margin: 0.35rem 0 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-monetization__toggle {
      margin: 0.25rem 0 0;
    }

    .admin-monetization__options {
      display: grid;
      gap: 0.5rem;
    }

    .admin-monetization__legend {
      margin: 0 0 0.35rem;
      font-size: 0.85rem;
      font-weight: 600;
      color: rgba(226, 232, 240, 0.92);
    }

    .admin-monetization__options--currencies {
      gap: 0.75rem;
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
    }

    .admin-toggle {
      display: inline-flex;
      align-items: center;
      gap: 0.85rem;
      cursor: pointer;
      user-select: none;
      position: relative;
      width: fit-content;
    }

    .admin-toggle input {
      position: absolute;
      width: 1px;
      height: 1px;
      margin: -1px;
      padding: 0;
      border: 0;
      clip: rect(0 0 0 0);
      overflow: hidden;
    }

    .admin-toggle__control {
      width: 46px;
      height: 26px;
      border-radius: 999px;
      background: rgba(30, 41, 59, 0.8);
      border: 1px solid rgba(148, 163, 184, 0.3);
      position: relative;
      transition: background 0.25s ease, border 0.25s ease;
    }

    .admin-toggle__control::after {
      content: '';
      position: absolute;
      top: 3px;
      left: 3px;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background: #0f172a;
      box-shadow: 0 4px 12px rgba(15, 23, 42, 0.4);
      transition: transform 0.25s ease, background 0.25s ease;
    }

    .admin-toggle input:checked + .admin-toggle__control {
      background: linear-gradient(135deg, #6366f1, #ec4899);
      border-color: rgba(236, 72, 153, 0.4);
    }

    .admin-toggle input:checked + .admin-toggle__control::after {
      transform: translateX(18px);
      background: #f8fafc;
    }

    .admin-toggle.is-disabled {
      cursor: not-allowed;
      opacity: 0.7;
    }

    [data-currency-options][data-currency-enabled='0'] {
      opacity: 0.85;
    }

    .admin-toggle input:focus-visible + .admin-toggle__control {
      outline: 2px solid rgba(147, 197, 253, 0.85);
      outline-offset: 3px;
    }

    .admin-toggle__label {
      font-size: 0.9rem;
      color: rgba(226, 232, 240, 0.92);
      font-weight: 600;
    }

    .admin-monetization__state {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-monetization__grid {
      display: grid;
      gap: 1.25rem;
    }

    .admin-monetization__field {
      display: grid;
      gap: 0.5rem;
    }

    .admin-monetization__field--full {
      width: 100%;
    }

    .admin-monetization__field--full .admin-monetization__input {
      width: 100%;
    }

    .admin-monetization__field label {
      font-size: 0.78rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: rgba(191, 219, 254, 0.82);
    }

    .admin-monetization__input {
      margin-top: 0.5rem;
      display: flex;
      align-items: center;
      border-radius: 14px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.82);
      padding: 0.6rem 0.85rem;
      transition: border 0.2s ease, background 0.2s ease, opacity 0.2s ease;
    }

    .admin-monetization__input--select {
      padding: 0;
      display: block;
    }

    .admin-monetization__input--select .enhanced-select {
      display: block;
      width: 100%;
    }

    .admin-monetization__input--select select {
      width: 100%;
      background: transparent;
      border: none;
      color: #f8fafc;
      font-size: 0.95rem;
      padding: 0.6rem 0.85rem;
      outline: none;
      min-height: 2.6rem;
    }

    .admin-monetization__input--select select:disabled {
      color: rgba(148, 163, 184, 0.7);
      cursor: not-allowed;
    }

    [data-currency-options][data-currency-enabled='0'] .admin-monetization__input--select {
      opacity: 0.6;
    }

    .admin-monetization__input input {
      background: transparent;
      border: none;
      color: #f8fafc;
      font-size: 0.95rem;
      flex: 1;
      min-width: 0;
      outline: none;
    }

    .admin-monetization__input input:disabled {
      color: rgba(148, 163, 184, 0.7);
      cursor: not-allowed;
    }

    .admin-monetization__suffix {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.88);
      font-weight: 600;
      margin-left: 0.5rem;
    }

    .admin-monetization__helper {
      margin: 0.4rem 0 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.75);
    }

    .admin-cloud {
      margin-top: 1.5rem;
      padding: 1.4rem;
      border-radius: 20px;
      border: 1px solid rgba(148, 163, 184, 0.16);
      background: rgba(9, 17, 36, 0.7);
      display: grid;
      gap: 1.4rem;
    }

    .admin-cloud__header h4 {
      margin: 0;
      font-size: 1.05rem;
      font-weight: 700;
      color: rgba(224, 231, 255, 0.96);
    }

    .admin-cloud__header p {
      margin: 0.35rem 0 0;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.82);
    }

    .admin-cloud__section {
      display: grid;
      gap: 1rem;
      padding: 1.2rem 1.25rem;
      border-radius: 16px;
      border: 1px solid rgba(99, 102, 241, 0.18);
      background: linear-gradient(150deg, rgba(79, 70, 229, 0.08), rgba(15, 23, 42, 0.8));
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.02);
    }

    .admin-cloud__section-header {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }

    .admin-cloud__section-header h5 {
      margin: 0;
      font-size: 0.95rem;
      font-weight: 700;
      color: rgba(224, 231, 255, 0.94);
    }

    .admin-cloud__section-header p {
      margin: 0.35rem 0 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-cloud__state {
      margin: 0;
      font-size: 0.8rem;
      letter-spacing: 0.05em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.75);
    }

    .admin-cloud__grid {
      display: grid;
      gap: 1.2rem;
    }

    .admin-cloud__field label {
      display: block;
      font-size: 0.78rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      color: rgba(191, 219, 254, 0.82);
    }

    .admin-cloud__input {
      margin-top: 0.55rem;
      display: flex;
      align-items: center;
      gap: 0.65rem;
      border-radius: 14px;
      border: 1px solid rgba(148, 163, 184, 0.22);
      background: rgba(15, 23, 42, 0.82);
      padding: 0.6rem 0.85rem;
      transition: border 0.2s ease, background 0.2s ease, opacity 0.2s ease;
    }

    .admin-cloud__input--plain {
      justify-content: space-between;
    }

    .admin-cloud__input input {
      background: transparent;
      border: none;
      color: #f8fafc;
      font-size: 0.95rem;
      flex: 1;
      min-width: 0;
      outline: none;
    }

    .admin-cloud__input input:disabled {
      color: rgba(148, 163, 184, 0.68);
      cursor: not-allowed;
    }

    .admin-cloud__suffix {
      font-size: 0.85rem;
      font-weight: 600;
      color: rgba(148, 163, 184, 0.88);
    }

    .admin-cloud__helper {
      margin: 0.35rem 0 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.74);
    }

    .admin-cloud__grid[data-cloud-grid="disabled"] .admin-cloud__input,
    .admin-cloud__grid[data-cloud-grid="disabled"] .admin-cloud__helper {
      opacity: 0.6;
    }

    .admin-cloud__grid[data-cloud-grid="disabled"] input {
      pointer-events: none;
    }

    .admin-configuration {
      margin-top: 1.5rem;
      display: grid;
      gap: 1.75rem;
    }

    .admin-configuration__options--languages {
      display: grid;
      gap: 0.65rem;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      transition: opacity 0.2s ease;
    }

    .admin-configuration__options--languages[data-multilingual="0"] {
      opacity: 0.6;
    }

    .admin-configuration__field {
      margin-top: 1rem;
      display: grid;
      gap: 0.45rem;
    }

    .admin-configuration__field--toggle {
      align-items: flex-start;
    }

    .admin-configuration__helper {
      margin: 0;
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.74);
    }

    .admin-toggle__flag {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 1.2rem;
      font-size: 1.05rem;
      margin-right: 0.35rem;
    }

    .admin-configuration__actions {
      margin-top: 1rem;
      display: flex;
    }

    .admin-configuration__translations-button {
      display: inline-flex;
      align-items: center;
      gap: 0.45rem;
      padding: 0.55rem 1.15rem;
      border-radius: 999px;
      border: 1px solid rgba(99, 102, 241, 0.45);
      background: rgba(15, 23, 42, 0.65);
      color: rgba(226, 232, 240, 0.96);
      font-weight: 600;
      font-size: 0.85rem;
      cursor: pointer;
      transition: background 0.2s ease, border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-configuration__translations-button:hover {
      border-color: rgba(129, 140, 248, 0.85);
      background: rgba(30, 41, 59, 0.78);
    }

    .admin-configuration__translations-button:focus-visible {
      outline: none;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.35);
    }

    .translations-modal {
      width: min(95vw, 1100px);
      background: linear-gradient(135deg, rgba(15, 23, 42, 0.98), rgba(30, 41, 59, 0.92));
      border: 1px solid rgba(99, 102, 241, 0.28);
      box-shadow: 0 28px 68px rgba(8, 11, 30, 0.55);
    }

    .translations-modal__inner {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .translations-modal__header {
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(99, 102, 241, 0.18);
    }

    .translations-modal__titles h2 {
      margin: 0;
      font-size: clamp(1.4rem, 2vw, 1.6rem);
      font-weight: 700;
      color: rgba(224, 231, 255, 0.98);
    }

    .translations-modal__titles p {
      margin: 0;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.85);
      max-width: 46ch;
    }

    .translations-modal__search {
      display: flex;
      align-items: center;
      gap: 0.85rem;
      padding: 0.75rem 0.85rem;
      border-radius: 999px;
      border: 1px solid rgba(99, 102, 241, 0.24);
      background: rgba(15, 23, 42, 0.85);
      box-shadow: inset 0 1px 0 rgba(148, 163, 184, 0.12);
      max-width: min(100%, 380px);
    }

    .translations-modal__search input {
      flex: 1 1 auto;
      border: none;
      background: transparent;
      color: rgba(226, 232, 240, 0.98);
      font-size: 0.95rem;
      outline: none;
    }

    .translations-modal__body {
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
    }

    .translations-modal__content {
      display: grid;
      gap: 1rem;
    }

    .translations-modal__table-container {
      position: relative;
      overflow: auto;
      max-height: min(68vh, 720px);
      border-radius: 20px;
      border: 1px solid rgba(99, 102, 241, 0.25);
      background: linear-gradient(160deg, rgba(15, 23, 42, 0.92), rgba(17, 24, 46, 0.88));
      box-shadow: inset 0 0 0 1px rgba(148, 163, 184, 0.08);
      --translations-key-width: 260px;
      --translations-locale-min-width: 260px;
    }

    .translations-modal__table-container::-webkit-scrollbar {
      width: 10px;
      height: 10px;
    }

    .translations-modal__table-container::-webkit-scrollbar-thumb {
      background: rgba(99, 102, 241, 0.35);
      border-radius: 999px;
    }

    .translations-table {
      width: 100%;
      min-width: var(--translations-table-min-width, 720px);
      border-collapse: separate;
      border-spacing: 0;
      table-layout: fixed;
      --translations-languages: 1;
    }

    .translations-table__head th {
      position: sticky;
      top: 0;
      z-index: 3;
      background: linear-gradient(180deg, rgba(15, 23, 42, 0.98), rgba(15, 23, 42, 0.92));
      backdrop-filter: blur(12px);
      padding: 0.85rem 1rem;
      text-align: left;
      font-size: 0.78rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.85);
      border-bottom: 1px solid rgba(99, 102, 241, 0.25);
      box-shadow: 0 1px 0 rgba(15, 23, 42, 0.9);
    }

    .translations-table__header--key {
      min-width: var(--translations-key-width, 260px);
      width: var(--translations-key-width, 260px);
      position: sticky;
      left: 0;
      z-index: 4;
      border-right: 1px solid rgba(99, 102, 241, 0.18);
    }

    .translations-table__header--locale,
    .translations-table__cell--locale {
      min-width: var(--translations-locale-min-width, 260px);
      width: max(
        var(--translations-locale-min-width, 260px),
        calc((100% - var(--translations-key-width, 260px)) / var(--translations-languages, 1))
      );
    }

    .translations-table__row {
      background: rgba(15, 23, 42, 0.82);
      transition: background 0.2s ease, box-shadow 0.2s ease;
    }

    .translations-table__row:nth-child(even) {
      background: rgba(15, 23, 42, 0.88);
    }

    .translations-table__row:hover {
      background: rgba(30, 41, 59, 0.85);
    }

    .translations-table__cell {
      padding: 0.75rem 1rem;
      border-bottom: 1px solid rgba(71, 85, 105, 0.35);
      vertical-align: top;
    }

    .translations-table__cell--key {
      position: sticky;
      left: 0;
      z-index: 2;
      width: var(--translations-key-width, 260px);
      min-width: var(--translations-key-width, 260px);
      background: linear-gradient(180deg, rgba(15, 23, 42, 0.95), rgba(15, 23, 42, 0.9));
      box-shadow: 1px 0 0 rgba(99, 102, 241, 0.2);
      overflow: hidden;
      border-radius: 0;
    }

    .translations-table__row:nth-child(even) .translations-table__cell--key {
      background: linear-gradient(180deg, rgba(15, 23, 42, 0.92), rgba(15, 23, 42, 0.88));
    }

    .translations-key {
      display: flex;
      flex-direction: column;
      gap: 0.35rem;
    }

    .translations-key__label {
      font-weight: 700;
      color: rgba(224, 231, 255, 0.94);
      word-break: break-word;
    }

    .translations-key__meta {
      font-size: 0.7rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.7);
    }

    .translations-locale {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .translations-locale__flag {
      font-size: 1.1rem;
    }

    .translations-locale__label {
      font-weight: 600;
      color: rgba(226, 232, 240, 0.92);
      font-size: 0.85rem;
    }

    .translations-locale__code {
      font-size: 0.7rem;
      letter-spacing: 0.08em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.65);
    }

    .translations-table__input {
      width: 100%;
      min-height: 4.5rem;
      padding: 0.65rem 0.75rem;
      border-radius: 12px;
      border: 1px solid rgba(71, 85, 105, 0.45);
      background: rgba(9, 17, 36, 0.75);
      color: rgba(226, 232, 240, 0.95);
      font-size: 0.92rem;
      line-height: 1.5;
      resize: vertical;
      transition: border-color 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
    }

    .translations-table__input:focus {
      outline: none;
      border-color: rgba(129, 140, 248, 0.65);
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.25);
      background: rgba(15, 23, 42, 0.92);
    }

    .translations-table__row--modified .translations-table__cell--key::before {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: 16px 0 0 16px;
      border-left: 3px solid rgba(94, 234, 212, 0.75);
      pointer-events: none;
    }

    .translations-table__row--modified .translations-table__cell--key .translations-key__label {
      color: rgba(94, 234, 212, 0.95);
    }

    .translations-table__row--modified .translations-table__input {
      border-color: rgba(94, 234, 212, 0.55);
      background: rgba(6, 182, 212, 0.1);
    }

    .translations-modal__empty {
      margin: 0;
      padding: 1.5rem;
      border-radius: 16px;
      text-align: center;
      font-size: 0.95rem;
      color: rgba(148, 163, 184, 0.85);
      background: rgba(15, 23, 42, 0.82);
      border: 1px dashed rgba(99, 102, 241, 0.35);
    }

    .translations-modal__footer {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      padding-top: 1.25rem;
      border-top: 1px solid rgba(99, 102, 241, 0.18);
    }

    .translations-modal__buttons {
      display: flex;
      justify-content: flex-end;
      flex-wrap: wrap;
      gap: 0.75rem;
    }

    .translations-modal__feedback {
      min-height: 1.25rem;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .translations-modal__feedback.success {
      color: rgba(52, 211, 153, 0.95);
    }

    .translations-modal__feedback.error {
      color: rgba(248, 113, 113, 0.95);
    }

    .translations-modal__primary,
    .translations-modal__secondary {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      border-radius: 14px;
      font-weight: 700;
      font-size: 0.9rem;
      padding: 0.75rem 1.5rem;
      transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease, border-color 0.2s ease;
      cursor: pointer;
    }

    .translations-modal__primary {
      border: none;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      color: #f8fafc;
      box-shadow: 0 16px 32px rgba(79, 70, 229, 0.35);
    }

    .translations-modal__primary:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow: 0 20px 40px rgba(79, 70, 229, 0.4);
    }

    .translations-modal__primary:focus-visible {
      outline: none;
      box-shadow: 0 0 0 3px rgba(129, 140, 248, 0.45);
    }

    .translations-modal__primary:disabled,
    .translations-modal__primary.is-loading {
      cursor: not-allowed;
      opacity: 0.75;
      box-shadow: 0 16px 32px rgba(79, 70, 229, 0.2);
      transform: none;
    }

    .translations-modal__primary.is-loading {
      pointer-events: none;
    }

    .translations-modal__primary.is-loading::after {
      content: '';
      width: 1rem;
      height: 1rem;
      border-radius: 999px;
      border: 2px solid rgba(248, 250, 252, 0.6);
      border-top-color: #ffffff;
      animation: payments-spin 0.9s linear infinite;
      margin-left: 0.5rem;
    }

    .translations-modal__secondary {
      border: 1px solid rgba(129, 140, 248, 0.45);
      background: rgba(15, 23, 42, 0.75);
      color: rgba(226, 232, 240, 0.94);
      box-shadow: 0 12px 24px rgba(15, 23, 42, 0.45);
    }

    .translations-modal__secondary:hover:not(:disabled) {
      background: rgba(79, 70, 229, 0.28);
      border-color: rgba(129, 140, 248, 0.65);
      transform: translateY(-1px);
    }

    .translations-modal__secondary:focus-visible {
      outline: none;
      box-shadow: 0 0 0 3px rgba(129, 140, 248, 0.35);
    }

    .translations-modal__secondary:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .translations-pagination {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      padding: 0.85rem 1rem;
      border-radius: 16px;
      border: 1px solid rgba(99, 102, 241, 0.24);
      background: rgba(15, 23, 42, 0.82);
    }

    .translations-pagination__button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.45rem;
      padding: 0.55rem 1.15rem;
      border-radius: 999px;
      border: 1px solid rgba(129, 140, 248, 0.45);
      background: rgba(30, 41, 59, 0.78);
      color: rgba(226, 232, 240, 0.94);
      font-weight: 600;
      font-size: 0.85rem;
      cursor: pointer;
      transition: background 0.2s ease, border-color 0.2s ease, transform 0.2s ease;
    }

    .translations-pagination__button:hover:not(:disabled) {
      background: rgba(79, 70, 229, 0.35);
      border-color: rgba(129, 140, 248, 0.65);
      transform: translateY(-1px);
    }

    .translations-pagination__button:disabled {
      cursor: not-allowed;
      opacity: 0.55;
    }

    .translations-pagination__status {
      flex: 1 1 auto;
      text-align: center;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .translations-pagination--single {
      justify-content: center;
    }

    .translations-pagination--single .translations-pagination__button {
      display: none;
    }

    .translations-pagination--single .translations-pagination__status {
      text-align: center;
    }

    @media (max-width: 900px) {
      .translations-modal__table-container {
        --translations-key-width: 200px;
      }

      .translations-table {
        min-width: 600px;
      }
    }

    @media (max-width: 640px) {
      .translations-modal {
        width: min(100vw, 640px);
      }

      .translations-modal__search {
        width: 100%;
      }

      .translations-pagination {
        flex-direction: column;
        align-items: stretch;
      }

      .translations-pagination__status {
        text-align: left;
      }
    }

    .admin-configuration__group {
      display: grid;
      gap: 0.75rem;
    }

    .admin-configuration__group h4 {
      margin: 0;
      font-size: 1rem;
      font-weight: 700;
      color: rgba(224, 231, 255, 0.95);
    }

    .admin-configuration__group p {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.82);
    }

    .admin-configuration__options {
      display: grid;
      gap: 0.75rem;
    }

    @media (min-width: 56rem) {
      .admin-configuration__options {
        grid-template-columns: repeat(2, minmax(0, 1fr));
      }
    }

    .admin-configuration__empty {
      margin: 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.82);
    }

    @media (min-width: 720px) {
      .admin-cloud__section-header {
        flex-direction: row;
        align-items: center;
        justify-content: space-between;
      }

      .admin-cloud__grid {
        grid-template-columns: repeat(2, minmax(0, 1fr));
      }
    }

    @media (max-width: 640px) {
      .admin-cloud__section {
        padding: 1rem;
      }

      .admin-cloud__grid {
        grid-template-columns: 1fr;
      }
    }

    .admin-notifications__helper {
      margin: 0.35rem 0 1.1rem;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.8);
    }

    .admin-notifications__group {
      margin-top: 1.4rem;
      padding: 1.1rem 1.2rem;
      border-radius: 16px;
      border: 1px solid rgba(99, 102, 241, 0.22);
      background: rgba(15, 23, 42, 0.6);
      display: flex;
      flex-direction: column;
      gap: 0.8rem;
      transition: opacity 0.2s ease;
    }

    .admin-notifications__group[data-notifications-enabled="0"] {
      opacity: 0.55;
    }

    .admin-notifications__header h4 {
      margin: 0;
      font-size: 1rem;
      font-weight: 700;
      color: rgba(226, 232, 240, 0.95);
    }

    .admin-notifications__header p {
      margin: 0.35rem 0 0;
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-broadcast {
      margin-top: 1.8rem;
      padding: 1.6rem;
      border-radius: 20px;
      border: 1px solid rgba(56, 189, 248, 0.22);
      background: linear-gradient(145deg, rgba(56, 189, 248, 0.16), rgba(129, 140, 248, 0.12));
      box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05);
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .admin-broadcast__intro h4 {
      margin: 0;
      font-size: 1.05rem;
      font-weight: 700;
      color: rgba(224, 231, 255, 0.96);
    }

    .admin-broadcast__intro p {
      margin: 0.4rem 0 0;
      font-size: 0.9rem;
      color: rgba(191, 219, 254, 0.85);
      line-height: 1.5;
    }

    .admin-broadcast__link {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .admin-broadcast__link label {
      font-size: 0.9rem;
      font-weight: 600;
      color: rgba(224, 231, 255, 0.95);
    }

    .admin-broadcast__link input {
      width: 100%;
      padding: 0.7rem 0.85rem;
      border-radius: 12px;
      border: 1px solid rgba(148, 163, 184, 0.32);
      background: rgba(15, 23, 42, 0.78);
      color: #f8fafc;
      font-size: 0.9rem;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-broadcast__link input::placeholder {
      color: rgba(148, 163, 184, 0.65);
    }

    .admin-broadcast__link input:focus {
      outline: none;
      border-color: rgba(59, 130, 246, 0.55);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.22);
    }

    .admin-broadcast__link small {
      font-size: 0.78rem;
      color: rgba(148, 163, 184, 0.8);
    }

    .admin-broadcast__translations {
      display: flex;
      flex-direction: column;
      gap: 1.1rem;
    }

    .admin-broadcast__translations-header h5 {
      margin: 0;
      font-size: 0.95rem;
      font-weight: 700;
      color: rgba(224, 231, 255, 0.92);
    }

    .admin-broadcast__translations-header p {
      margin: 0.3rem 0 0;
      font-size: 0.82rem;
      color: rgba(191, 219, 254, 0.75);
      line-height: 1.5;
    }

    .admin-broadcast__locales {
      display: grid;
      gap: 1rem;
    }

    .admin-broadcast__locale {
      border-radius: 16px;
      border: 1px solid rgba(148, 163, 184, 0.28);
      background: rgba(15, 23, 42, 0.68);
      overflow: hidden;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-broadcast__locale[open] {
      border-color: rgba(129, 140, 248, 0.55);
      box-shadow: 0 6px 18px rgba(15, 23, 42, 0.35);
    }

    .admin-broadcast__locale summary {
      list-style: none;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      padding: 0.95rem 1.1rem;
      font-size: 0.92rem;
      font-weight: 600;
      color: rgba(224, 231, 255, 0.9);
    }

    .admin-broadcast__locale summary::-webkit-details-marker {
      display: none;
    }

    .admin-broadcast__locale summary::after {
      content: '';
      display: inline-block;
      width: 0.75rem;
      height: 0.75rem;
      border-right: 2px solid rgba(191, 219, 254, 0.7);
      border-bottom: 2px solid rgba(191, 219, 254, 0.7);
      transform: rotate(-45deg);
      transition: transform 0.2s ease;
    }

    .admin-broadcast__locale[open] summary::after {
      transform: rotate(45deg);
    }

    .admin-broadcast__locale-label {
      display: flex;
      align-items: center;
      gap: 0.6rem;
    }

    .admin-broadcast__locale-name {
      font-weight: 700;
      color: rgba(224, 231, 255, 0.95);
    }

    .admin-broadcast__locale-code {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.1rem 0.55rem;
      border-radius: 999px;
      border: 1px solid rgba(129, 140, 248, 0.45);
      background: rgba(15, 23, 42, 0.88);
      font-size: 0.72rem;
      letter-spacing: 0.05em;
      text-transform: uppercase;
      color: rgba(191, 219, 254, 0.85);
    }

    .admin-broadcast__locale-content {
      padding: 0 1.1rem 1.1rem;
      display: grid;
      gap: 1rem;
    }

    .admin-broadcast__field label {
      display: block;
      margin: 0 0 0.45rem;
      font-size: 0.82rem;
      font-weight: 600;
      color: rgba(224, 231, 255, 0.9);
    }

    .admin-broadcast__field input,
    .admin-broadcast__field textarea {
      width: 100%;
      padding: 0.7rem 0.85rem;
      border-radius: 12px;
      border: 1px solid rgba(148, 163, 184, 0.3);
      background: rgba(15, 23, 42, 0.78);
      color: #f8fafc;
      font-size: 0.9rem;
      transition: border-color 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-broadcast__field textarea {
      min-height: 130px;
      resize: vertical;
      line-height: 1.5;
    }

    .admin-broadcast__field input:focus,
    .admin-broadcast__field textarea:focus {
      outline: none;
      border-color: rgba(59, 130, 246, 0.55);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.22);
    }

    .admin-broadcast__field textarea::placeholder,
    .admin-broadcast__field input::placeholder {
      color: rgba(148, 163, 184, 0.6);
    }

    .admin-toggle--sub {
      margin: 0;
    }

    .admin-toggle--sub .admin-toggle__label {
      font-size: 0.9rem;
    }

    .admin-monetization__grid[data-monetization-grid="disabled"] .admin-monetization__input {
      opacity: 0.55;
    }

    .admin-monetization__grid[data-monetization-grid="disabled"] .admin-monetization__helper {
      color: rgba(148, 163, 184, 0.55);
    }

    .admin-tabs {
      display: inline-flex;
      flex-wrap: wrap;
      gap: 0.4rem;
      align-items: center;
      background: rgba(15, 23, 42, 0.68);
      padding: 0.4rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.18);
      box-shadow: 0 18px 34px rgba(2, 6, 23, 0.35);
      width: fit-content;
      margin-inline: auto;
    }

    .admin-section:not([data-tabs-ready]) .admin-tabs {
      display: none;
    }

    .admin-tab {
      border: none;
      background: transparent;
      color: rgba(226, 232, 240, 0.72);
      font: inherit;
      padding: 0.55rem 1.25rem;
      border-radius: 999px;
      cursor: pointer;
      transition: background 0.2s ease, color 0.2s ease, box-shadow 0.2s ease, transform 0.2s ease;
      position: relative;
    }

    .admin-tab::after {
      content: '';
      position: absolute;
      inset: 0;
      border-radius: inherit;
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.08), rgba(236, 72, 153, 0.08));
      opacity: 0;
      transition: opacity 0.2s ease;
      pointer-events: none;
    }

    .admin-tab:hover,
    .admin-tab:focus-visible {
      color: rgba(248, 250, 252, 0.92);
    }

    .admin-tab:focus-visible {
      outline: 2px solid rgba(99, 102, 241, 0.6);
      outline-offset: 2px;
    }

    .admin-tab:hover::after {
      opacity: 1;
    }

    .admin-tab.is-active {
      color: #f8fafc;
      background: linear-gradient(135deg, #6366f1, #ec4899);
      box-shadow: 0 20px 32px rgba(99, 102, 241, 0.28);
    }

    .admin-tab.is-active::after {
      display: none;
    }

    .admin-panels {
      display: grid;
      gap: 1.6rem;
      width: 100%;
      grid-template-columns: minmax(0, 1fr);
    }

    .admin-panel {
      display: block;
      min-width: 0;
    }

    .admin-section[data-tabs-ready] .admin-panel {
      display: none;
    }

    .admin-section[data-tabs-ready] .admin-panel.is-active {
      display: block;
      animation: adminPanelIn 0.25s ease;
    }

    @keyframes adminPanelIn {
      from {
        opacity: 0;
        transform: translateY(6px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .admin-design {
      display: grid;
      gap: clamp(1.4rem, 3vw, 2.2rem);
    }

    .admin-design__intro {
      display: grid;
      gap: 0.6rem;
      max-width: 640px;
      color: var(--muted);
    }

    .admin-design__grid {
      display: grid;
      gap: clamp(1rem, 2vw, 1.5rem);
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    }

    .admin-design__option {
      position: relative;
      border-radius: 22px;
      border: 1px solid rgba(129, 140, 248, 0.25);
      background: rgba(12, 18, 38, 0.75);
      padding: clamp(1.4rem, 3vw, 1.8rem);
      display: grid;
      gap: 0.75rem;
      transition: transform 0.25s ease, border 0.25s ease, box-shadow 0.25s ease;
      cursor: pointer;
      box-shadow: 0 18px 32px rgba(2, 6, 23, 0.45);
    }

    .admin-design__option input {
      position: absolute;
      inset: 0;
      opacity: 0;
      pointer-events: none;
    }

    .admin-design__option h3 {
      margin: 0;
      font-size: 1.15rem;
    }

    .admin-design__option p {
      margin: 0;
      color: rgba(203, 213, 225, 0.82);
      font-size: 0.95rem;
    }

    .admin-design__highlights {
      margin: 0;
      padding: 0;
      list-style: none;
      display: grid;
      gap: 0.4rem;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.92);
    }

    .admin-design__highlights li {
      position: relative;
      padding-left: 1.4rem;
    }

    .admin-design__highlights li::before {
      content: '';
      position: absolute;
      left: 0.35rem;
      top: 0.55rem;
      width: 0.45rem;
      height: 0.45rem;
      border-radius: 999px;
      background: linear-gradient(135deg, #38bdf8, #818cf8);
      box-shadow: 0 0 10px rgba(56, 189, 248, 0.55);
    }

    .admin-design__option::after {
      content: '';
      position: absolute;
      inset: -1px;
      border-radius: inherit;
      border: 1.8px solid transparent;
      pointer-events: none;
      transition: border 0.25s ease, opacity 0.25s ease;
      opacity: 0;
    }

    .admin-design__option.is-active {
      border-color: rgba(56, 189, 248, 0.65);
      transform: translateY(-2px);
      box-shadow: 0 24px 40px rgba(56, 189, 248, 0.25);
    }

    .admin-design__option.is-active::after {
      border-color: rgba(56, 189, 248, 0.9);
      opacity: 1;
    }

    .admin-design__option:hover {
      transform: translateY(-1px);
      border-color: rgba(129, 140, 248, 0.45);
    }

    .admin-design__preview {
      position: relative;
      border-radius: clamp(28px, 4vw, 36px);
      border: 1px solid rgba(129, 140, 248, 0.25);
      background: rgba(6, 12, 31, 0.75);
      padding: clamp(1.8rem, 4vw, 2.4rem);
      display: grid;
      gap: clamp(1.2rem, 3vw, 1.6rem);
      box-shadow: 0 26px 48px rgba(2, 6, 23, 0.5);
      overflow: hidden;
    }

    .admin-design__preview::after {
      content: '';
      position: absolute;
      inset: -35% -10% 55% -10%;
      background: radial-gradient(circle, rgba(129, 140, 248, 0.45), transparent 70%);
      opacity: 0.65;
      pointer-events: none;
      transition: opacity 0.35s ease;
    }

    .admin-design__preview[data-variant="vision"]::after {
      background: radial-gradient(circle, rgba(56, 189, 248, 0.55), transparent 70%);
    }

    .admin-design__preview[data-variant="aura"]::after {
      background: radial-gradient(circle, rgba(94, 234, 212, 0.45), transparent 70%);
    }

    .admin-design__preview-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
    }

    .admin-design__preview-badge {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      padding: 0.4rem 1.05rem;
      border-radius: 999px;
      background: rgba(129, 140, 248, 0.18);
      font-size: 0.75rem;
      letter-spacing: 0.18em;
      text-transform: uppercase;
    }

    .admin-design__preview-label {
      font-weight: 700;
      font-size: 0.95rem;
      color: rgba(226, 232, 240, 0.9);
    }

    .admin-design__preview-layout {
      display: grid;
      grid-template-columns: repeat(12, minmax(0, 1fr));
      gap: 0.6rem;
    }

    .admin-design__preview-hero {
      grid-column: span 7;
      border-radius: 20px;
      background: linear-gradient(135deg, rgba(56, 189, 248, 0.28), rgba(236, 72, 153, 0.28));
      min-height: clamp(120px, 18vw, 150px);
    }

    .admin-design__preview-sidebar {
      grid-column: span 5;
      display: grid;
      gap: 0.5rem;
    }

    .admin-design__preview-sidebar span {
      display: block;
      border-radius: 14px;
      background: rgba(129, 140, 248, 0.18);
      height: 42px;
    }

    .admin-design__preview-grid {
      grid-column: span 12;
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
      gap: 0.6rem;
    }

    .admin-design__preview-card {
      border-radius: 16px;
      background: rgba(15, 23, 42, 0.85);
      min-height: clamp(76px, 11vw, 100px);
    }

    .admin-design__preview[data-variant="vision"] .admin-design__preview-card {
      background: rgba(8, 15, 35, 0.82);
      box-shadow: inset 0 0 0 1px rgba(56, 189, 248, 0.18);
    }

    .admin-design__preview[data-variant="vision"] .admin-design__preview-badge {
      background: rgba(56, 189, 248, 0.18);
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-hero {
      grid-column: span 8;
      background: linear-gradient(145deg, rgba(99, 102, 241, 0.35), rgba(34, 211, 238, 0.28));
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-sidebar {
      grid-column: span 4;
      gap: 0.6rem;
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-sidebar span {
      background: rgba(99, 102, 241, 0.18);
      height: 48px;
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-grid {
      grid-template-columns: repeat(4, minmax(0, 1fr));
      gap: 0.5rem;
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-card {
      background: rgba(8, 14, 30, 0.85);
      box-shadow: inset 0 0 0 1px rgba(94, 234, 212, 0.2);
    }

    .admin-design__preview[data-variant="aura"] .admin-design__preview-badge {
      background: rgba(34, 211, 238, 0.2);
    }

    .admin-design__actions {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 1rem;
    }

    .admin-design__feedback {
      flex: 1;
      min-width: 200px;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.92);
    }

    .admin-design__feedback.success {
      color: rgba(52, 211, 153, 0.95);
    }

    .admin-design__feedback.error {
      color: rgba(248, 113, 113, 0.95);
    }

    .admin-design__notice {
      position: fixed;
      right: clamp(1.4rem, 5vw, 3rem);
      bottom: clamp(1.4rem, 5vw, 3rem);
      width: min(360px, calc(100vw - 2.4rem));
      padding: 1.25rem 1.4rem 1.35rem;
      border-radius: 22px;
      background: linear-gradient(155deg, rgba(12, 19, 37, 0.95), rgba(29, 78, 216, 0.65));
      border: 1px solid rgba(99, 102, 241, 0.3);
      box-shadow: 0 28px 48px rgba(8, 12, 26, 0.55);
      color: rgba(226, 232, 240, 0.95);
      display: none;
      gap: 0.9rem;
      z-index: 120;
    }

    .admin-design__notice.is-visible {
      display: grid;
    }

    .admin-design__notice[data-design-variant="aura"] {
      background: linear-gradient(160deg, rgba(8, 20, 45, 0.96), rgba(45, 212, 191, 0.3));
      border-color: rgba(45, 212, 191, 0.35);
      box-shadow: 0 32px 56px rgba(13, 38, 57, 0.55);
    }

    .admin-design__notice-content {
      display: grid;
      gap: 0.45rem;
    }

    .admin-design__notice-eyebrow {
      margin: 0;
      font-size: 0.72rem;
      letter-spacing: 0.22em;
      text-transform: uppercase;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-design__notice-title {
      margin: 0;
      font-size: 1rem;
      font-weight: 700;
      letter-spacing: -0.01em;
    }

    .admin-design__notice-message {
      margin: 0;
      font-size: 0.92rem;
      line-height: 1.6;
      color: rgba(203, 213, 225, 0.9);
    }

    .admin-design__notice-actions {
      display: flex;
      gap: 0.75rem;
      justify-content: flex-end;
      flex-wrap: wrap;
    }

    .admin-design__notice-button {
      appearance: none;
      border: none;
      border-radius: 999px;
      padding: 0.55rem 1.2rem;
      font: inherit;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.4rem;
    }

    .admin-design__notice-button:focus-visible {
      outline: none;
      box-shadow: 0 0 0 2px rgba(148, 163, 184, 0.4);
    }

    .admin-design__notice-button--primary {
      background: linear-gradient(135deg, rgba(99, 102, 241, 0.95), rgba(34, 211, 238, 0.95));
      color: #0b1120;
      box-shadow: 0 18px 30px rgba(15, 23, 42, 0.45);
    }

    .admin-design__notice-button--primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 24px 36px rgba(15, 23, 42, 0.5);
    }

    .admin-design__notice-button--ghost {
      background: rgba(15, 23, 42, 0.35);
      color: rgba(226, 232, 240, 0.95);
      border: 1px solid rgba(148, 163, 184, 0.4);
    }

    .admin-design__notice-button--ghost:hover {
      background: rgba(30, 41, 59, 0.6);
      transform: translateY(-1px);
    }

    .admin-design__notice-button.is-loading {
      opacity: 0.65;
      pointer-events: none;
    }

    @media (max-width: 640px) {
      .admin-design__notice {
        left: 1.2rem;
        right: 1.2rem;
        bottom: 1.2rem;
        width: auto;
      }

      .admin-design__notice-actions {
        justify-content: stretch;
      }

      .admin-design__notice-button {
        flex: 1;
      }
    }

    .admin-design__submit {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      padding: 0.85rem 1.8rem;
      border-radius: 18px;
      border: none;
      background: linear-gradient(135deg, #38bdf8, #818cf8);
      color: #f8fafc;
      font-weight: 700;
      font-size: 0.95rem;
      cursor: pointer;
      box-shadow: 0 28px 44px rgba(56, 189, 248, 0.28);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-design__submit:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow: 0 34px 56px rgba(56, 189, 248, 0.32);
    }

    .admin-design__submit:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
      box-shadow: 0 24px 40px rgba(56, 189, 248, 0.18);
    }

    .admin-design__submit.is-loading::after {
      content: '';
      width: 1rem;
      height: 1rem;
      border-radius: 999px;
      border: 2px solid rgba(248, 250, 252, 0.6);
      border-top-color: rgba(248, 250, 252, 1);
      animation: payments-spin 0.9s linear infinite;
    }

    .admin-branding {
      display: grid;
      gap: 1.5rem;
    }

    .admin-branding__group {
      display: grid;
      gap: 0.5rem;
    }

    .admin-branding__hint {
      font-size: 0.85rem;
      color: rgba(148, 163, 184, 0.85);
    }

    .admin-branding__preview,
    .admin-branding__favicon-preview {
      display: inline-flex;
      align-items: center;
      justify-content: flex-start;
      gap: 1rem;
      padding: 0.85rem 1rem;
      background: rgba(15, 23, 42, 0.55);
      border: 1px solid rgba(148, 163, 184, 0.25);
      border-radius: 18px;
    }

    .admin-branding__preview img {
      display: block;
      width: clamp(180px, 35vw, 320px);
      max-width: 100%;
      height: auto;
    }

    .admin-branding__favicon-preview img {
      width: 48px;
      height: 48px;
      display: block;
      border-radius: 12px;
    }

    .admin-branding__error {
      min-height: 1.1rem;
      font-size: 0.9rem;
      color: rgba(248, 113, 113, 0.95);
    }

    .admin-branding__actions {
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      gap: 1rem;
    }

    .admin-branding__submit {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.6rem;
      padding: 0.85rem 1.8rem;
      border-radius: 18px;
      border: none;
      background: linear-gradient(135deg, #34d399, #22d3ee);
      color: #0f172a;
      font-weight: 700;
      font-size: 0.95rem;
      cursor: pointer;
      box-shadow: 0 28px 44px rgba(45, 212, 191, 0.28);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .admin-branding__submit:hover:not(:disabled) {
      transform: translateY(-1px);
      box-shadow: 0 34px 56px rgba(45, 212, 191, 0.32);
    }

    .admin-branding__submit:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
      box-shadow: 0 24px 40px rgba(45, 212, 191, 0.18);
    }

    .admin-branding__submit.is-loading::after {
      content: '';
      width: 1rem;
      height: 1rem;
      border-radius: 999px;
      border: 2px solid rgba(15, 23, 42, 0.35);
      border-top-color: rgba(15, 23, 42, 0.6);
      animation: payments-spin 0.9s linear infinite;
    }

    .admin-branding__feedback {
      flex: 1;
      min-width: 200px;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.92);
    }

    .admin-branding__feedback.success {
      color: rgba(52, 211, 153, 0.95);
    }

    .admin-branding__feedback.error {
      color: rgba(248, 113, 113, 0.95);
    }

    .admin-design-loading {
      position: fixed;
      inset: 0;
      z-index: 9999;
      display: grid;
      place-items: center;
      padding: clamp(2rem, 6vw, 4rem);
      background-color: #050b1a;
      background-image: radial-gradient(120% 120% at 50% 28%, rgba(99, 102, 241, 0.36), rgba(8, 13, 29, 0.98));
      backdrop-filter: blur(22px);
      color: #f8fafc;
      opacity: 0;
      visibility: hidden;
      pointer-events: none;
      transition: opacity 0.35s ease, visibility 0.35s ease;
    }

    .admin-design-loading.is-active {
      opacity: 1;
      visibility: visible;
      pointer-events: auto;
    }

    .admin-design-loading__content {
      display: grid;
      gap: clamp(1.4rem, 3vw, 2.2rem);
      text-align: center;
      max-width: min(520px, 92vw);
      animation: designLoadingFade 0.6s ease forwards;
    }

    .admin-design-loading__orb {
      position: relative;
      width: clamp(140px, 24vw, 220px);
      aspect-ratio: 1 / 1;
      margin: 0 auto;
      border-radius: 50%;
      background: radial-gradient(circle at 30% 30%, rgba(56, 189, 248, 0.45), rgba(129, 140, 248, 0.32) 40%, rgba(15, 23, 42, 0.88) 100%);
      overflow: hidden;
      box-shadow: 0 32px 70px rgba(56, 189, 248, 0.28);
    }

    .admin-design-loading__ring {
      position: absolute;
      inset: 14%;
      border-radius: 50%;
      border: 2px solid rgba(248, 250, 252, 0.38);
      mix-blend-mode: screen;
      animation: designLoadingSpin 2.6s linear infinite;
    }

    .admin-design-loading__ring:nth-child(2) {
      inset: 26%;
      border-color: rgba(165, 180, 252, 0.46);
      animation-duration: 2.2s;
      animation-direction: reverse;
    }

    .admin-design-loading__spark {
      position: absolute;
      inset: 0;
      margin: auto;
      width: 68%;
      height: 68%;
      border-radius: 50%;
      background: conic-gradient(from 90deg, rgba(248, 250, 252, 0), rgba(248, 250, 252, 0.7), rgba(248, 250, 252, 0));
      filter: blur(0.5px);
      animation: designLoadingGlow 3.4s ease-in-out infinite;
      opacity: 0.85;
    }

    .admin-design-loading__text {
      display: grid;
      gap: 0.6rem;
    }

    .admin-design-loading__headline {
      font-size: clamp(1.5rem, 3.6vw, 2.1rem);
      font-weight: 700;
      letter-spacing: -0.01em;
    }

    .admin-design-loading__subtitle {
      font-size: clamp(1rem, 2.3vw, 1.15rem);
      color: rgba(226, 232, 240, 0.78);
    }

    @keyframes designLoadingSpin {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }

    @keyframes designLoadingGlow {
      0%, 100% {
        transform: rotate(0deg) scale(0.96);
        opacity: 0.65;
      }
      50% {
        transform: rotate(160deg) scale(1.05);
        opacity: 1;
      }
    }

    @keyframes designLoadingFade {
      from {
        opacity: 0;
        transform: translateY(18px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .admin-section {
      background: var(--surface);
      border-radius: clamp(26px, 4vw, 34px);
      border: 1px solid var(--border);
      padding: clamp(2.2rem, 4vw, 3rem);
      box-shadow: var(--shadow);
      display: grid;
      gap: 1.6rem;
      width: 100%;
    }

    .admin-section > header {
      display: flex;
      flex-direction: column;
      gap: 0.6rem;
    }

    .admin-section h2 {
      margin: 0;
      font-size: clamp(1.4rem, 3vw, 1.8rem);
    }

    .admin-section p {
      margin: 0;
      color: var(--muted);
      font-size: 0.95rem;
      max-width: 640px;
    }

    .admin-table-wrapper {
      overflow-x: auto;
      overflow-y: auto;
      border-radius: 22px;
      border: 1px solid rgba(148, 163, 184, 0.18);
      padding: clamp(0.75rem, 2vw, 1.25rem);
      width: 100%;
      max-width: 100%;
      max-height: clamp(320px, 58vh, 640px);
      box-sizing: border-box;
      -webkit-overflow-scrolling: touch;
      overscroll-behavior: contain;
      scrollbar-width: thin;
      scrollbar-gutter: stable both-edges;
    }

    .admin-table-wrapper::-webkit-scrollbar {
      width: 8px;
    }

    .admin-table-wrapper::-webkit-scrollbar-thumb {
      background: rgba(148, 163, 184, 0.28);
      border-radius: 999px;
    }

    .admin-table-wrapper::-webkit-scrollbar-thumb:hover {
      background: rgba(148, 163, 184, 0.4);
    }

    .admin-table {
      width: 100%;
      min-width: 640px;
      margin-inline: auto;
      border-collapse: collapse;
      background: rgba(6, 12, 31, 0.85);
    }

    .admin-table th,
    .admin-table td {
      text-align: start;
      padding: 0.75rem 1rem;
      border-bottom: 1px solid rgba(148, 163, 184, 0.12);
      font-size: 0.85rem;
      line-height: 1.35;
      vertical-align: middle;
    }

    .admin-table th {
      font-weight: 700;
      font-size: 0.78rem;
      letter-spacing: 0.06em;
      text-transform: uppercase;
      color: rgba(226, 232, 240, 0.7);
      background: rgba(15, 23, 42, 0.78);
      white-space: nowrap;
    }

    .admin-table td[data-column="id"],
    .admin-table td[data-column="country"],
    .admin-table td[data-column="created_at"],
    .admin-table td[data-column="last_login_at"],
    .admin-table td[data-column="last_login_ip"],
    .admin-table td[data-column="status"],
    .admin-table td[data-column="actions"] {
      white-space: nowrap;
    }

    .admin-table td[data-column="email"] {
      white-space: nowrap;
    }

    .admin-table tbody tr:hover td {
      background: rgba(99, 102, 241, 0.12);
    }

    .admin-name-button {
      display: inline-flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.2rem;
      padding: 0.45rem 0.75rem;
      border-radius: 14px;
      border: 1px solid rgba(99, 102, 241, 0.25);
      background: rgba(79, 70, 229, 0.08);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: border 0.2s ease, background 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
      min-width: 0;
      max-width: 100%;
    }

    .admin-name-button:hover,
    .admin-name-button:focus-visible {
      background: rgba(99, 102, 241, 0.16);
      border-color: rgba(129, 140, 248, 0.6);
      outline: none;
      transform: translateY(-1px);
      box-shadow: 0 10px 24px rgba(15, 23, 42, 0.35);
    }

    .admin-name-button__primary {
      font-weight: 600;
      font-size: 0.95rem;
      white-space: nowrap;
    }

    .admin-name-button__meta {
      font-size: 0.72rem;
      text-transform: uppercase;
      letter-spacing: 0.08em;
      color: rgba(148, 163, 184, 0.85);
      white-space: nowrap;
    }

    .admin-email {
      display: inline-block;
      max-width: clamp(160px, 24vw, 260px);
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      font-family: 'Menlo', 'Fira Mono', 'SFMono-Regular', ui-monospace, monospace;
    }

    .admin-ip-button {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.35rem 0.85rem;
      border-radius: 999px;
      border: 1px solid rgba(99, 102, 241, 0.35);
      background: rgba(79, 70, 229, 0.12);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: background 0.2s ease, border-color 0.2s ease, transform 0.2s ease;
    }

    .admin-ip-button:hover,
    .admin-ip-button:focus-visible {
      background: rgba(99, 102, 241, 0.22);
      border-color: rgba(129, 140, 248, 0.75);
      outline: none;
      transform: translateY(-1px);
    }

    .admin-ip-button:active {
      transform: translateY(0);
    }

    .admin-ip-button__value {
      font-weight: 600;
    }

    .admin-ip-button__label {
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.06em;
      color: rgba(148, 163, 184, 0.9);
    }

    .admin-ip-button__icon {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      color: rgba(148, 163, 184, 0.8);
      transition: transform 0.2s ease;
    }

    .admin-ip-button:hover .admin-ip-button__icon,
    .admin-ip-button:focus-visible .admin-ip-button__icon {
      transform: translateY(1px);
    }

    .admin-ip {
      color: rgba(226, 232, 240, 0.8);
      font-weight: 600;
    }

    .admin-ip--empty {
      color: rgba(148, 163, 184, 0.7);
      font-weight: 500;
    }

    .status-stack {
      display: flex;
      flex-wrap: wrap;
      gap: 0.4rem;
    }

    .status-pill {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      padding: 0.3rem 0.7rem;
      border-radius: 999px;
      font-size: 0.8rem;
      font-weight: 600;
      background: rgba(148, 163, 184, 0.15);
      color: rgba(226, 232, 240, 0.9);
    }

    .status-pill::before {
      content: '';
      width: 0.6rem;
      height: 0.6rem;
      border-radius: 50%;
      background: rgba(148, 163, 184, 0.6);
      display: inline-block;
    }

    .status-pill--success {
      background: rgba(16, 185, 129, 0.15);
      color: rgba(110, 231, 183, 0.95);
    }

    .status-pill--success::before {
      background: rgba(16, 185, 129, 0.85);
    }

    .status-pill--danger {
      background: rgba(248, 113, 113, 0.18);
      color: rgba(248, 113, 113, 0.95);
    }

    .status-pill--danger::before {
      background: rgba(248, 113, 113, 0.85);
    }

    .status-pill--warning {
      background: rgba(251, 191, 36, 0.18);
      color: rgba(253, 224, 71, 0.95);
    }

    .status-pill--warning::before {
      background: rgba(251, 191, 36, 0.85);
    }

    .status-pill--info {
      background: rgba(56, 189, 248, 0.18);
      color: rgba(165, 243, 252, 0.95);
    }

    .status-pill--info::before {
      background: rgba(56, 189, 248, 0.85);
    }

    .status-note {
      font-size: 0.8rem;
      color: rgba(226, 232, 240, 0.7);
    }

    .admin-actions {
      display: flex;
      flex-wrap: wrap;
      gap: 0.6rem;
    }

    .admin-action {
      padding: 0.45rem 0.9rem;
      border-radius: 999px;
      border: 1px solid rgba(148, 163, 184, 0.25);
      background: rgba(15, 23, 42, 0.68);
      color: inherit;
      font: inherit;
      cursor: pointer;
      transition: background 0.2s ease, border 0.2s ease, transform 0.2s ease;
    }

    .admin-action:hover {
      background: rgba(99, 102, 241, 0.18);
      border-color: rgba(99, 102, 241, 0.45);
      transform: translateY(-1px);
    }

    .admin-action--impersonate {
      border-color: rgba(56, 189, 248, 0.45);
      color: rgba(191, 219, 254, 0.95);
    }

    .admin-action--impersonate:hover {
      background: rgba(56, 189, 248, 0.22);
      border-color: rgba(125, 211, 252, 0.7);
    }

    .admin-action--delete {
      border-color: rgba(248, 113, 113, 0.35);
      color: rgba(248, 113, 113, 0.9);
    }

    .admin-action--delete:hover {
      background: rgba(248, 113, 113, 0.18);
      border-color: rgba(248, 113, 113, 0.45);
    }

    .admin-feedback {
      min-height: 1.2rem;
      font-size: 0.85rem;
      color: rgba(94, 234, 212, 0.9);
      margin-bottom: 1rem;
    }

    .admin-feedback.error {
      color: rgba(248, 113, 113, 0.9);
    }

    footer {
      text-align: center;
      padding: 2rem;
      font-size: 0.9rem;
      color: rgba(148, 163, 184, 0.75);
    }

    @media (max-width: 780px) {
      .page-header {
        padding: 1.5rem 1.5rem 1.25rem;
        gap: 1rem;
        flex-wrap: nowrap;
      }

      .brand {
        display: flex;
        align-items: center;
        min-width: 0;
        flex: 1 1 auto;
      }

      .brand__logo {
        width: clamp(120px, calc(100vw - 140px), 220px);
        max-width: 100%;
      }

      .admin-branding__actions {
        flex-direction: column;
        align-items: stretch;
      }

      .admin-branding__submit {
        width: 100%;
      }

      .admin-branding__preview img {
        width: min(240px, 100%);
      }

      .header-actions {
        margin-left: auto;
        gap: 0.8rem;
        flex-shrink: 0;
      }

      .notifications-toggle {
        width: 46px;
        height: 46px;
        border-radius: 16px;
      }

      .notifications-panel {
        width: min(92vw, 360px);
      }

      .profile-toggle {
        padding: 0.35rem;
        border-radius: 999px;
        gap: 0;
      }

      .profile-toggle .profile-meta,
      .profile-toggle .profile-caret {
        display: none;
      }

      .profile-avatar {
        width: 42px;
        height: 42px;
      }

      .profile-panel {
        position: fixed;
        inset: calc(var(--mobile-header-offset, 0px)) 0 0 0;
        width: 100%;
        margin: 0;
        border-radius: 24px 24px 0 0;
        max-height: calc(100vh - var(--mobile-header-offset, 0px));
        height: auto;
        padding: clamp(1.6rem, 5vw, 2.2rem) clamp(1.4rem, 6vw, 2.2rem) calc(clamp(1.8rem, 6vw, 2.6rem) + env(safe-area-inset-bottom, 0px));
        transform: translateY(12px);
        backdrop-filter: blur(28px);
        scroll-padding-top: 5rem;
        z-index: 60;
      }

      @supports (height: 100dvh) {
        .profile-panel {
          max-height: calc(100dvh - var(--mobile-header-offset, 0px));
        }
      }

      .profile-panel::before {
        display: none;
      }

      .profile-panel.open {
        transform: translateY(0);
      }

      .profile-panel-header {
        position: sticky;
        top: 0;
        background: linear-gradient(180deg, rgba(11, 16, 32, 0.96), rgba(11, 16, 32, 0.65));
        margin: 0 -0.4rem 1rem;
        padding: 0.8rem 0.4rem 1.2rem;
        border-radius: 24px 24px 0 0;
        z-index: 20;
      }

      .profile-panel-close {
        display: inline-flex;
      }

      .profile-form {
        padding-top: 0.5rem;
      }

      .profile-grid.two-columns {
        grid-template-columns: 1fr;
      }

      .profile-actions {
        flex-direction: column;
        align-items: stretch;
      }

      .profile-actions .action-button {
        width: 100%;
      }

      .modal {
        padding: var(--mobile-header-offset, 0px) 0 0;
        align-items: flex-start;
        justify-items: stretch;
      }

      .modal__content {
        width: 100%;
        border-radius: 28px 28px 0 0;
        max-height: none;
        height: calc(100vh - var(--mobile-header-offset, 0px));
        padding: clamp(1.8rem, 5vw, 2.4rem) clamp(1.4rem, 6vw, 2.4rem) calc(clamp(2rem, 6vw, 2.8rem) + env(safe-area-inset-bottom, 0px));
      }

      .modal__close {
        position: sticky;
        top: 1rem;
        margin-left: auto;
        z-index: 3;
      }

      .royalties-layout {
        grid-template-columns: 1fr;
        gap: 2rem;
      }

      .royalties-plan {
        order: -1;
      }

      .admin-table {
        min-width: 580px;
      }
    }

    @media (max-width: 520px) {
      .profile-actions {
        justify-content: center;
      }
    }
  </style>
</head>
<body data-dashboard-design="<?= htmlspecialchars($dashboardDesignVariant, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>">
  <div id="pageHeaderSentinel" class="page-header-sentinel" aria-hidden="true"></div>
  <header class="page-header">
    <div class="brand">
      <img
        class="brand__logo"
        src="<?= htmlspecialchars($dashboardLogoUrl, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
        alt="<?= __e('dashboard.brand_alt', ['site' => $siteName]) ?>"
        data-dashboard-logo
        data-alt-template="<?= htmlspecialchars($dashboardBrandAltTemplate, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
      >
      <h1
        class="visually-hidden"
        data-dashboard-title
        data-title-template="<?= htmlspecialchars($dashboardTitleTemplate, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
      ><?= __e('dashboard.title', ['site' => $siteName]) ?></h1>
    </div>
    <div class="header-actions">
      <?php if ($notificationsEnabled): ?>
        <div class="notifications-area">
          <button
            type="button"
            class="notifications-toggle"
            id="notificationsToggle"
            aria-haspopup="dialog"
            aria-expanded="false"
            aria-controls="notificationsPanel"
          >
            <svg class="notifications-icon" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M12 3a5 5 0 0 0-5 5v2.11c0 .58-.16 1.15-.45 1.65l-.76 1.26A2 2 0 0 0 7.56 16H18a2 2 0 0 0 1.71-3.06l-.73-1.2a3.4 3.4 0 0 1-.53-1.8V8a5 5 0 0 0-5-5Zm0 18a2.5 2.5 0 0 0 2.45-2h-4.9A2.5 2.5 0 0 0 12 21Z" fill="currentColor" />
            </svg>
            <span class="sr-only"><?= __e('dashboard.notifications.panel.toggle') ?></span>
            <?php if ($notificationsCount > 0): ?>
              <span class="notifications-badge" id="notificationsBadge"><?= (int) $notificationsCount ?></span>
            <?php endif; ?>
          </button>
          <div
            class="notifications-panel"
            id="notificationsPanel"
            role="dialog"
            aria-modal="false"
            aria-hidden="true"
            aria-labelledby="notificationsPanelTitle"
            tabindex="-1"
          >
            <div class="notifications-panel__header">
              <h2 class="notifications-panel__title" id="notificationsPanelTitle"><?= __e('dashboard.notifications.panel.title') ?></h2>
              <button type="button" class="notifications-panel__close" id="notificationsPanelClose" data-notifications-initial-focus>
                <span class="sr-only"><?= __e('dashboard.notifications.panel.close') ?></span>
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                  <line x1="18" y1="6" x2="6" y2="18" />
                  <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
              </button>
            </div>
            <ul class="notifications-list" data-notifications-list<?= $notificationsCount === 0 ? ' hidden' : '' ?>>
              <?php foreach ($dashboardNotifications as $notification): ?>
                <li
                  class="notifications-item notifications-item--<?= sanitize($notification['type']) ?>"
                  data-notification-id="<?= sanitize($notification['id']) ?>"
                >
                  <button
                    type="button"
                    data-notification-action="<?= sanitize($notification['action']) ?>"
                    <?php if (!empty($notification['url'])): ?>data-notification-url="<?= sanitize((string) $notification['url']) ?>"<?php endif; ?>
                  >
                    <span class="notifications-item__icon" aria-hidden="true">
                      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M12 9v4" />
                        <path d="M12 17h.01" />
                        <path d="M12 3 3 21h18Z" />
                      </svg>
                    </span>
                    <span class="notifications-item__content">
                      <span class="notifications-item__title"><?= sanitize($notification['title']) ?></span>
                      <span class="notifications-item__message"><?= sanitize($notification['message']) ?></span>
                      <?php if (trim($notification['action_label']) !== ''): ?>
                        <span class="notifications-item__cta">
                          <?= sanitize($notification['action_label']) ?>
                          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                            <path d="M9 18l6-6-6-6" />
                          </svg>
                        </span>
                      <?php endif; ?>
                    </span>
                  </button>
                </li>
              <?php endforeach; ?>
            </ul>
            <p class="notifications-empty" data-notifications-empty<?= $notificationsCount === 0 ? '' : ' hidden' ?>><?= __e('dashboard.notifications.panel.empty') ?></p>
          </div>
        </div>
      <?php endif; ?>
      <div class="profile-area">
        <button class="profile-toggle" id="profileToggle" type="button" aria-haspopup="dialog" aria-expanded="false">
          <span class="profile-avatar" id="profileAvatar" style="--avatar-color: <?= $avatarColor ?>;">
            <?php if ($avatarPath): ?>
              <img src="<?= sanitize($avatarPath) ?>" alt="<?= __e('dashboard.profile_panel.photo_alt') ?>">
            <?php else: ?>
            <?= sanitize($initial) ?>
          <?php endif; ?>
        </span>
        <span class="profile-meta">
          <span class="profile-name" id="profileName"><?= sanitize(trim($user['first_name'] . ' ' . $user['last_name'])) ?></span>
          <span class="profile-role" id="profileRole"><?= sanitize($roleLabel) ?></span>
        </span>
        <svg class="profile-caret" viewBox="0 0 24 24" aria-hidden="true">
          <path d="M6 9l6 6 6-6" fill="none" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
      </button>
      <div class="profile-panel" id="profilePanel" role="dialog" aria-modal="false" aria-labelledby="profilePanelTitle">
        <div class="profile-panel-header">
          <div class="profile-panel-header__text">
            <h2 id="profilePanelTitle" tabindex="-1"><?= __e('dashboard.profile_panel.title') ?></h2>
            <p class="helper"><?= __e('dashboard.profile_panel.helper') ?></p>
          </div>
          <button type="button" class="profile-panel-close" id="profilePanelClose">
            <span class="sr-only"><?= __e('dashboard.profile_panel.close') ?></span>
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
              <line x1="18" y1="6" x2="6" y2="18" />
              <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
          </button>
        </div>
        <form class="profile-form" id="profileForm" autocomplete="off">
          <div class="avatar-upload">
            <div class="avatar-preview" id="avatarPreview" data-has-image="<?= $avatarPath ? 'true' : 'false' ?>" data-initial="<?= sanitize($initial) ?>" style="--avatar-color: <?= $avatarColor ?>;">
              <div class="avatar-preview-content" id="avatarPreviewContent">
                <?php if ($avatarPath): ?>
                  <img src="<?= sanitize($avatarPath) ?>" alt="<?= __e('dashboard.profile_panel.preview_alt') ?>" id="avatarPreviewImage">
                <?php else: ?>
                  <span id="avatarPreviewInitial"><?= sanitize($initial) ?></span>
                <?php endif; ?>
              </div>
            </div>
            <div class="avatar-actions">
              <input type="file" name="avatar" id="avatarInput" accept="image/*">
              <button type="button" id="avatarUploadButton"><?= __e('dashboard.profile_panel.change_photo') ?></button>
              <button type="button" id="avatarRemoveButton" class="avatar-remove-button<?= $avatarPath ? '' : ' hidden' ?>" aria-label="<?= __e('dashboard.profile_panel.remove_photo') ?>">
                <svg viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M9 3h6l1 2h5v2h-1.09l-1.2 13.2A2 2 0 0 1 15.73 22H8.27a2 2 0 0 1-1.98-1.8L5.09 7H4V5h5l1-2Zm8.91 4H6.09l1.1 12h9.62l1.1-12Zm-8.41 2h2v8h-2v-8Zm4 0h2v8h-2v-8Z" fill="currentColor" />
                </svg>
                <span class="sr-only"><?= __e('dashboard.profile_panel.remove_photo_sr') ?></span>
              </button>
              <input type="hidden" name="remove_avatar" id="removeAvatar" value="0">
            </div>
          </div>
          <div class="profile-grid two-columns">
            <div class="profile-field">
              <label for="firstName"><?= __e('dashboard.profile_panel.labels.first_name') ?></label>
              <input type="text" id="firstName" name="first_name" value="<?= sanitize($user['first_name']) ?>" required minlength="1" maxlength="80" autocomplete="given-name" data-initial-focus>
            </div>
            <div class="profile-field">
              <label for="lastName"><?= __e('dashboard.profile_panel.labels.last_name') ?></label>
              <input type="text" id="lastName" name="last_name" value="<?= sanitize($user['last_name']) ?>" required minlength="1" maxlength="80" autocomplete="family-name">
            </div>
          </div>
          <div class="profile-grid">
            <div class="profile-field">
              <label for="country"><?= __e('dashboard.profile_panel.labels.country') ?></label>
              <select id="country" name="country" required autocomplete="country-name" data-enhanced-select>
                <?php foreach ($countries as $code => $label): ?>
                  <option value="<?= sanitize($code) ?>" <?= $user['country'] === $code ? 'selected' : '' ?>><?= sanitize($label) ?></option>
                <?php endforeach; ?>
              </select>
            </div>
            <div class="profile-field">
              <label for="role"><?= __e('dashboard.profile_panel.labels.role') ?></label>
              <select id="role" name="role" required data-enhanced-select>
                <?php foreach ($roles as $roleKey => $roleValue): ?>
                  <option value="<?= sanitize($roleKey) ?>" <?= $user['role'] === $roleKey ? 'selected' : '' ?>><?= sanitize($roleValue) ?></option>
                <?php endforeach; ?>
              </select>
            </div>
          </div>
          <?php if ($languageOptionsCount > 1): ?>
            <div class="profile-grid">
              <div class="profile-field">
                <label for="language"><?= __e('dashboard.profile_panel.labels.language') ?></label>
                <select
                  id="language"
                  name="language"
                  required
                  dir="<?= htmlspecialchars($profileLanguageDirection, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                  lang="<?= htmlspecialchars($currentProfileLanguage, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                  data-enhanced-select
                >
                  <?php foreach ($languageOptions as $code => $info): ?>
                    <?php
                    $direction = strtolower((string) ($info['direction'] ?? 'ltr')) === 'rtl' ? 'rtl' : 'ltr';
                    $nativeLabel = trim((string) ($info['native'] ?? $info['label'] ?? strtoupper($code)));
                    $flag = language_flag($code);
                    $optionLabel = trim($flag . ' ' . ($nativeLabel !== '' ? $nativeLabel : strtoupper($code)));
                    ?>
                    <option
                      value="<?= sanitize($code) ?>"
                      <?= $currentProfileLanguage === $code ? 'selected' : '' ?>
                      dir="<?= sanitize($direction) ?>"
                      lang="<?= sanitize($code) ?>"
                    ><?= sanitize($optionLabel) ?></option>
                  <?php endforeach; ?>
                </select>
                <p class="helper" style="margin:0;color:rgba(203,213,225,0.8);font-size:0.8rem;"><?= __e('dashboard.profile_panel.language_help') ?></p>
              </div>
            </div>
          <?php else: ?>
            <input type="hidden" name="language" value="<?= sanitize($currentProfileLanguage) ?>">
          <?php endif; ?>
          <?php if ($showCurrencySelector): ?>
            <div class="profile-grid">
              <div class="profile-field">
                <label for="currency"><?= __e('dashboard.profile_panel.labels.currency') ?></label>
                <select id="currency" name="currency" data-enhanced-select>
                  <?php foreach ($profileCurrencyOptions as $code => $label): ?>
                    <option value="<?= sanitize($code) ?>"<?= $userCurrencyCode === $code ? ' selected' : '' ?>><?= sanitize($label) ?></option>
                  <?php endforeach; ?>
                </select>
                <p class="helper" style="margin:0;color:rgba(203,213,225,0.8);font-size:0.8rem;">
                  <?= __e('dashboard.profile_panel.currency_help', ['currency' => $activeCurrencySymbol]) ?>
                </p>
              </div>
            </div>
          <?php else: ?>
            <input type="hidden" name="currency" value="<?= sanitize($userCurrencyCode) ?>">
          <?php endif; ?>
          <div class="profile-grid two-columns">
            <div class="profile-field">
              <label for="addressLine1"><?= __e('dashboard.profile_panel.labels.address_line1') ?></label>
              <input
                type="text"
                id="addressLine1"
                name="address_line1"
                value="<?= sanitize($profileAddressLine1) ?>"
                maxlength="180"
                autocomplete="address-line1"
              >
            </div>
            <div class="profile-field">
              <label for="addressLine2"><?= __e('dashboard.profile_panel.labels.address_line2') ?></label>
              <input
                type="text"
                id="addressLine2"
                name="address_line2"
                value="<?= sanitize($profileAddressLine2) ?>"
                maxlength="180"
                autocomplete="address-line2"
              >
            </div>
          </div>
          <div class="profile-grid two-columns">
            <div class="profile-field">
              <label for="postalCode"><?= __e('dashboard.profile_panel.labels.postal_code') ?></label>
              <input
                type="text"
                id="postalCode"
                name="postal_code"
                value="<?= sanitize($profilePostalCode) ?>"
                maxlength="32"
                autocomplete="postal-code"
              >
            </div>
            <div class="profile-field">
              <label for="city"><?= __e('dashboard.profile_panel.labels.city') ?></label>
              <input
                type="text"
                id="city"
                name="city"
                value="<?= sanitize($profileCity) ?>"
                maxlength="120"
                autocomplete="address-level2"
              >
            </div>
          </div>
          <div class="profile-grid">
            <div class="profile-field">
              <label for="phoneNumber"><?= __e('dashboard.profile_panel.labels.phone_number') ?></label>
              <input
                type="tel"
                id="phoneNumber"
                name="phone_number"
                value="<?= sanitize($profilePhoneNumber) ?>"
                maxlength="64"
                autocomplete="tel"
                inputmode="tel"
              >
            </div>
          </div>
          <div class="profile-grid">
            <div class="profile-field">
              <label for="businessType"><?= __e('dashboard.profile_panel.labels.business_type') ?></label>
              <select id="businessType" name="business_type" data-enhanced-select>
                <?php foreach (['individual', 'company'] as $businessOption): ?>
                  <?php $optionLabel = $profileBusinessOptions[$businessOption] ?? ucfirst($businessOption); ?>
                  <option value="<?= sanitize($businessOption) ?>" <?= $currentBusinessType === $businessOption ? 'selected' : '' ?>>
                    <?= sanitize($optionLabel) ?>
                  </option>
                <?php endforeach; ?>
              </select>
              <p class="helper" style="margin:0;color:rgba(203,213,225,0.8);font-size:0.8rem;">
                <?= __e('dashboard.profile_panel.business_type_helper') ?>
              </p>
            </div>
          </div>
          <?php $isCompanyAccount = $currentBusinessType === 'company'; ?>
          <div
            class="profile-grid two-columns"
            data-company-fields
            <?= $isCompanyAccount ? '' : 'hidden' ?>
            aria-hidden="<?= $isCompanyAccount ? 'false' : 'true' ?>"
          >
            <div class="profile-field">
              <label for="companyName"><?= __e('dashboard.profile_panel.labels.company_name') ?></label>
              <input
                type="text"
                id="companyName"
                name="company_name"
                value="<?= sanitize($profileCompanyName) ?>"
                maxlength="180"
                autocomplete="organization"
              >
            </div>
            <div class="profile-field">
              <label for="companyVat"><?= __e('dashboard.profile_panel.labels.company_vat') ?></label>
              <input
                type="text"
                id="companyVat"
                name="company_vat"
                value="<?= sanitize($profileCompanyVat) ?>"
                maxlength="60"
                autocomplete="tax-id"
              >
            </div>
          </div>
          <p
            class="helper"
            data-company-fields-helper
            style="margin:0 0 1.25rem;color:rgba(203,213,225,0.75);font-size:0.8rem;"
            <?= $isCompanyAccount ? '' : 'hidden' ?>
            aria-hidden="<?= $isCompanyAccount ? 'false' : 'true' ?>"
          >
            <?= __e('dashboard.profile_panel.business_fields_helper') ?>
          </p>
          <div class="profile-feedback" id="profileFeedback" role="status" aria-live="polite"></div>
          <div class="profile-actions">
            <button type="submit" id="profileSubmit" class="action-button primary-action"><?= __e('dashboard.profile_panel.submit') ?></button>
            <a class="action-button secondary-action logout-link" href="/logout.php"><?= __e('dashboard.profile_panel.logout') ?></a>
          </div>
        </form>
      </div>
    </div>
    </div>
  </header>
  <?php if ($isImpersonating): ?>
    <?php
      $impersonationActiveMessage = __('dashboard.admin.impersonation.active', [
          'name' => $impersonatedDisplayName,
          'admin' => $impersonatorDisplayName !== ''
              ? $impersonatorDisplayName
              : __('dashboard.admin.impersonation.default_admin'),
      ]);
      $impersonationReturnLabel = __('dashboard.admin.impersonation.return');
      $impersonationProcessingMessage = __('dashboard.admin.impersonation.processing');
      $impersonationProcessingButton = __('dashboard.admin.impersonation.processing_button');
      if ($impersonationProcessingButton === '') {
          $impersonationProcessingButton = $impersonationProcessingMessage !== ''
              ? $impersonationProcessingMessage
              : $impersonationReturnLabel;
      }
      $impersonationErrorMessage = __('dashboard.admin.impersonation.error');
    ?>
    <div
      class="impersonation-banner"
      role="status"
      aria-live="polite"
      data-impersonation-banner
      data-active-message="<?= sanitize($impersonationActiveMessage) ?>"
      data-processing-message="<?= sanitize($impersonationProcessingMessage) ?>"
      data-error-message="<?= sanitize($impersonationErrorMessage) ?>"
    >
      <span class="impersonation-banner__message" data-impersonation-message><?= sanitize($impersonationActiveMessage) ?></span>
      <button
        type="button"
        class="impersonation-banner__button"
        data-stop-impersonating
        data-label-default="<?= sanitize($impersonationReturnLabel) ?>"
        data-label-processing="<?= sanitize($impersonationProcessingButton) ?>"
        data-label-error="<?= sanitize($impersonationReturnLabel) ?>"
        data-redirect="/dashboard.php"
      >
        <?= sanitize($impersonationReturnLabel) ?>
      </button>
    </div>
  <?php endif; ?>
  <?php if ($dashboardDesignVariant === 'aura' && $dashboardSidebarLinks): ?>
    <?php
      $sidebarTitle = (string) ($sidebarTranslations['title'] ?? 'Workspace navigation');
      $sidebarBadge = (string) ($sidebarTranslations['badge'] ?? 'Navigation');
      $sidebarToggleCollapseLabel = __e('dashboard.sidebar_toggle.collapse');
      $sidebarToggleExpandLabel = __e('dashboard.sidebar_toggle.expand');
    ?>
    <aside class="dashboard-sidebar" aria-label="<?= sanitize($sidebarTitle) ?>">
          <div class="dashboard-sidebar__top">
            <div class="dashboard-sidebar__header">
              <span class="dashboard-sidebar__badge"><?= sanitize($sidebarBadge) ?></span>
              <h2 class="dashboard-sidebar__title sr-only"><?= sanitize($sidebarTitle) ?></h2>
            </div>
            <button
              type="button"
              class="dashboard-sidebar__toggle"
              data-sidebar-toggle
              data-label-collapse="<?= $sidebarToggleCollapseLabel ?>"
              data-label-expand="<?= $sidebarToggleExpandLabel ?>"
              aria-expanded="true"
              aria-label="<?= $sidebarToggleCollapseLabel ?>"
              title="<?= $sidebarToggleCollapseLabel ?>"
            >
              <span class="dashboard-sidebar__toggle-icon" data-icon="collapse" aria-hidden="true">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M6 5v14" />
                  <path d="M16 8l-4 4 4 4" />
                  <path d="M20 8l-4 4 4 4" />
                </svg>
              </span>
              <span class="dashboard-sidebar__toggle-icon" data-icon="expand" aria-hidden="true">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 5v14" />
                  <path d="M8 8l4 4-4 4" />
                  <path d="M4 8l4 4-4 4" />
                </svg>
              </span>
            </button>
          </div>
          <nav class="dashboard-sidebar__nav" aria-label="<?= sanitize($sidebarTitle) ?>">
            <?php foreach ($dashboardSidebarLinks as $link): ?>
              <?php
                $linkId = (string) ($link['id'] ?? '');
                $iconKey = (string) ($link['icon'] ?? '');
                $label = (string) ($link['label'] ?? '');
                $description = (string) ($link['description'] ?? '');
                $type = (string) ($link['type'] ?? 'anchor');
                $target = (string) ($link['target'] ?? '');
                $href = (string) ($link['href'] ?? '#');
                $serviceUrl = (string) ($link['service_url'] ?? '');
              ?>
              <div class="dashboard-sidebar__item-wrapper">
                <?php if ($type === 'modal'): ?>
                  <button
                    type="button"
                    class="dashboard-sidebar__item"
                    data-modal-target="<?= sanitize($target) ?>"
                    data-sidebar-label="<?= sanitize($label) ?>"
                    aria-label="<?= sanitize($label) ?>"
                    <?php if ($serviceUrl !== ''): ?>data-service-url="<?= sanitize($serviceUrl) ?>"<?php endif; ?>
                  >
                <?php elseif ($type === 'page'): ?>
                  <button
                    type="button"
                    class="dashboard-sidebar__item"
                    data-dashboard-page-target="<?= sanitize($target) ?>"
                    data-sidebar-label="<?= sanitize($label) ?>"
                    aria-label="<?= sanitize($label) ?>"
                  >
                <?php elseif ($type === 'profile'): ?>
                  <button
                    type="button"
                    class="dashboard-sidebar__item"
                    data-open-profile
                    data-sidebar-label="<?= sanitize($label) ?>"
                    aria-label="<?= sanitize($label) ?>"
                  >
                <?php else: ?>
                  <a
                    class="dashboard-sidebar__item"
                    href="<?= sanitize($href) ?>"
                    data-sidebar-label="<?= sanitize($label) ?>"
                    aria-label="<?= sanitize($label) ?>"
                  >
                <?php endif; ?>
                    <span class="dashboard-sidebar__icon" aria-hidden="true">
                      <?php if ($iconKey === 'sparkles'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M12 3v4" />
                          <path d="M12 17v4" />
                          <path d="M3 12h4" />
                          <path d="M17 12h4" />
                          <path d="M7.8 7.8l2.1 2.1" />
                          <path d="M14.1 14.1l2.1 2.1" />
                          <path d="M7.8 16.2l2.1-2.1" />
                          <path d="M14.1 9.9l2.1-2.1" />
                        </svg>
                      <?php elseif ($iconKey === 'wave'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M3 15c2.4 0 2.4-6 4.8-6s2.4 6 4.8 6 2.4-6 4.8-6 2.4 6 4.8 6" />
                        </svg>
                      <?php elseif ($iconKey === 'globe'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <circle cx="12" cy="12" r="9" />
                          <path d="M3 12h18" />
                          <path d="M12 3a15 15 0 0 1 0 18" />
                          <path d="M12 3a15 15 0 0 0 0 18" />
                        </svg>
                      <?php elseif ($iconKey === 'stars'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <path d="m12 4 1.9 3.8L18 8.6l-3 3 0.7 4.2L12 14.8 8.3 15.8 9 12l-3-3 4.1-0.8L12 4z" />
                          <path d="M4 5l1.2 2.4L8 8l-1.8 1.8L6.6 12 4 10.8 1.4 12l0.4-2.2L0 8l2.8-0.6L4 5z" />
                          <path d="M20 5l1.2 2.4L24 8l-1.8 1.8L22.6 12 20 10.8 17.4 12l0.4-2.2L16 8l2.8-0.6L20 5z" />
                        </svg>
                      <?php elseif ($iconKey === 'credit-card'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <rect x="2" y="4" width="20" height="16" rx="3" />
                          <path d="M2 9h20" />
                          <path d="M7 14h2" />
                          <path d="M11 14h2" />
                        </svg>
                      <?php elseif ($iconKey === 'settings'): ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M10.325 4.317 9.674 2.28a1 1 0 0 1 .95-1.28h2.752a1 1 0 0 1 .95 1.28l-.651 2.037a1 1 0 0 0 .287 1.045l.454.454a1 1 0 0 0 1.045.287l2.037-.651a1 1 0 0 1 1.28.95v2.752a1 1 0 0 1-1.28.95l-2.037-.651a1 1 0 0 0-1.045.287l-.454.454a1 1 0 0 0-.287 1.045l.651 2.037a1 1 0 0 1-.95 1.28h-2.752a1 1 0 0 1-.95-1.28l.651-2.037a1 1 0 0 0-.287-1.045l-.454-.454a1 1 0 0 0-1.045-.287l-2.037.651a1 1 0 0 1-1.28-.95V7.054a1 1 0 0 1 1.28-.95l2.037.651a1 1 0 0 0 1.045-.287l.454-.454a1 1 0 0 0 .287-1.045Z" />
                          <circle cx="12" cy="12" r="3" />
                        </svg>
                      <?php else: ?>
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round">
                          <circle cx="12" cy="8" r="4" />
                          <path d="M4 20c0-4 3.6-7 8-7s8 3 8 7" />
                        </svg>
                      <?php endif; ?>
                    </span>
                    <span class="dashboard-sidebar__meta">
                      <span class="dashboard-sidebar__label"><?= sanitize($label) ?></span>
                      <?php if ($description !== ''): ?>
                        <span class="dashboard-sidebar__hint"><?= sanitize($description) ?></span>
                      <?php endif; ?>
                    </span>
                <?php if (in_array($type, ['modal', 'page', 'profile'], true)): ?>
                  </button>
                <?php else: ?>
                  </a>
                <?php endif; ?>
              </div>
            <?php endforeach; ?>
          </nav>
        </aside>
  <?php endif; ?>
  <main>
    <?php if ($dashboardDesignVariant === 'aura'): ?>
      <div class="dashboard-shell">
        <div class="dashboard-content" data-dashboard-content>
          <div class="dashboard-content__pane is-active" data-dashboard-pane="overview">
    <?php endif; ?>
    <section class="welcome" id="overview">
      <h2><?= __e('dashboard.welcome.title', ['name' => $user['first_name'] ?? '']) ?></h2>
      <p><?= __e('dashboard.welcome.body') ?></p>
    </section>

    <?php if ($studioCardEnabled): ?>
    <section class="studio-card-section" id="studio">
      <article class="studio-card" aria-label="<?= __e('dashboard.studio_card.aria_label') ?>">
        <div class="studio-card__header">
          <span class="studio-card__badge"><?= __e('dashboard.studio_card.badge') ?></span>
          <h2 class="studio-card__title"><?= __e('dashboard.studio_card.title') ?></h2>
          <p class="studio-card__subtitle"><?= __e('dashboard.studio_card.subtitle') ?></p>
        </div>
        <a class="studio-card__button" href="/studio" target="_blank" rel="noopener">
          <?= __e('dashboard.studio_card.cta') ?>
        </a>
      </article>
    </section>
    <?php endif; ?>

    <?php if ($visibleCards): ?>
    <section class="cards" id="shortcuts">
      <?php foreach ($visibleCards as $key => $card): ?>
        <?php
          $cardType = $card['type'] ?? null;
          $modalTarget = $card['modal_target'] ?? null;
          $pageTarget = $card['page_target'] ?? null;
          $cardVariant = $card['variant'] ?? '';
          $href = $card['href'] ?? null;
          $openInNewTab = isset($card['new_tab']) ? (bool) $card['new_tab'] : false;
          $serviceUrl = $card['service_url'] ?? null;
          $isModalCard = $cardType === 'modal' && is_string($modalTarget) && $modalTarget !== '';
          $isPageCard = $cardType === 'page' && is_string($pageTarget) && $pageTarget !== '';
          $classes = ['card'];

          if ($cardVariant === 'highlight') {
              $classes[] = 'card--highlight';
          }
        ?>
        <article class="<?= implode(' ', array_map('sanitize', $classes)) ?>">
          <h3><?= __e('dashboard.cards.' . $key . '.title') ?></h3>
          <p><?= __e('dashboard.cards.' . $key . '.description') ?></p>
          <?php if ($isModalCard): ?>
            <button type="button" class="card-trigger" data-modal-target="<?= sanitize((string) $modalTarget) ?>"<?php if ($serviceUrl): ?> data-service-url="<?= sanitize((string) $serviceUrl) ?>"<?php endif; ?>>
              <?= __e('dashboard.cards.' . $key . '.link_label') ?>
            </button>
          <?php elseif ($isPageCard): ?>
            <button type="button" class="card-trigger" data-dashboard-page-target="<?= sanitize((string) $pageTarget) ?>">
              <?= __e('dashboard.cards.' . $key . '.link_label') ?>
            </button>
          <?php elseif ($href): ?>
            <a href="<?= sanitize((string) $href) ?>"<?php if ($openInNewTab): ?> target="_blank" rel="noopener"<?php endif; ?>><?= __e('dashboard.cards.' . $key . '.link_label') ?></a>
          <?php else: ?>
            <a href="#" data-campaign-alert="true"><?= __e('dashboard.cards.' . $key . '.link_label') ?></a>
          <?php endif; ?>
        </article>
      <?php endforeach; ?>
    </section>
    <?php endif; ?>

    <?php if ($dashboardDesignVariant === 'aura'): ?>
          </div>
          <div class="dashboard-content__pane" data-dashboard-pane="detail" hidden></div>
        </div>
      </div>
    <?php endif; ?>

    <div class="modal" id="aiComposerModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="aiComposerModalTitle" data-scroll-lock="dynamic">
      <div class="modal__content ai-composer-modal" tabindex="-1">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.express_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div
          class="ai-composer-modal__inner"
          data-ai-composer
          data-ai-endpoint="<?= htmlspecialchars('/ai-composer.php', ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
          data-ai-default-mode="generate"
          data-ai-default-style="<?= sanitize($aiComposerDefaultStyleId) ?>"
          data-ai-default-style-prompt="<?= htmlspecialchars($aiComposerDefaultStylePrompt, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
          data-ai-default-voice="<?= sanitize($aiComposerDefaultVoiceId) ?>"
          data-ai-default-instrumental="<?= htmlspecialchars($aiComposerDefaultInstrumentation, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
          data-ai-default-brief="<?= htmlspecialchars($aiComposerDefaultBrief, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
          data-ai-default-duration="<?= (int) $aiComposerDefaultDuration ?>"
          data-ai-default-tempo="<?= (int) $aiComposerDefaultTempo ?>"
        >
          <header class="ai-composer-modal__header">
            <span class="ai-composer-modal__badge"><?= sanitize((string) ($aiComposerTranslations['badge'] ?? 'AI Music Copilot')) ?></span>
            <h2 id="aiComposerModalTitle" class="ai-composer-modal__title"><?= sanitize((string) ($aiComposerTranslations['title'] ?? 'Compose with the MusicDistro × Suno Foundry')) ?></h2>
            <p class="ai-composer-modal__subtitle"><?= sanitize((string) ($aiComposerTranslations['subtitle'] ?? 'Give the AI clear creative direction — we will stream the render back to your session once Suno finishes processing the job.')) ?></p>
          </header>
          <div class="ai-composer-modal__layout">
            <section class="ai-composer-modal__main">
              <div class="ai-composer-mode-toggle" data-ai-mode-toggle>
                <button type="button" class="ai-composer-mode-button is-active" data-ai-mode="generate"><?= sanitize((string) ($aiComposerTranslations['tabs']['generate'] ?? 'AI Writes Lyrics')) ?></button>
                <button type="button" class="ai-composer-mode-button" data-ai-mode="write"><?= sanitize((string) ($aiComposerTranslations['tabs']['write'] ?? 'Use My Lyrics')) ?></button>
              </div>
              <div class="ai-composer-panel">
                <div class="ai-composer-field">
                  <label for="aiComposerBrief"><?= sanitize((string) ($aiComposerTranslations['story']['label'] ?? 'Tell the AI the story to write')) ?></label>
                  <textarea
                    id="aiComposerBrief"
                    class="ai-composer-textarea"
                    data-ai-brief
                    rows="6"
                    placeholder="<?= sanitize((string) ($aiComposerTranslations['story']['placeholder'] ?? 'Describe the scene, energy, and key lyrics you want.')) ?>"
                  ><?= htmlspecialchars($aiComposerDefaultBrief, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></textarea>
                  <p class="ai-composer-helper" data-ai-brief-helper><?= sanitize((string) ($aiComposerTranslations['story']['helper'] ?? 'Mention themes, imagery, or narrative beats. The richer the brief, the better the lyric draft.')) ?></p>
                </div>
                <div class="ai-composer-field" data-ai-lyrics-block>
                  <div class="ai-composer-field__header">
                    <label for="aiComposerLyrics">
                      <span data-ai-lyrics-label-generate><?= sanitize((string) ($aiComposerTranslations['lyrics']['generate_label'] ?? 'Lyric draft preview')) ?></span>
                      <span data-ai-lyrics-label-write hidden><?= sanitize((string) ($aiComposerTranslations['lyrics']['write_label'] ?? 'Paste your lyrics')) ?></span>
                    </label>
                    <button type="button" class="ai-composer-generate" data-ai-generate-lyrics><?= sanitize((string) ($aiComposerTranslations['lyrics']['generate_button'] ?? 'Generate lyrics')) ?></button>
                  </div>
                  <textarea
                    id="aiComposerLyrics"
                    class="ai-composer-textarea"
                    data-ai-lyrics
                    rows="6"
                    placeholder="<?= sanitize((string) ($aiComposerTranslations['lyrics']['placeholder'] ?? 'AI generated lyrics will appear here for you to refine.')) ?>"
                    data-ai-lyrics-placeholder-generate="<?= sanitize((string) ($aiComposerTranslations['lyrics']['placeholder'] ?? 'AI generated lyrics will appear here for you to refine.')) ?>"
                    data-ai-lyrics-placeholder-write="<?= sanitize((string) ($aiComposerTranslations['lyrics']['write_placeholder'] ?? "Verse 1\nPre-Chorus\nChorus\nBridge")) ?>"
                  ></textarea>
                  <p class="ai-composer-helper" data-ai-lyrics-helper-generate><?= sanitize((string) ($aiComposerTranslations['lyrics']['helper'] ?? 'Edit anything you like — we send your final text to Suno so the vocal matches perfectly.')) ?></p>
                  <p class="ai-composer-helper" data-ai-lyrics-helper-write hidden><?= sanitize((string) ($aiComposerTranslations['lyrics']['write_helper'] ?? 'Break lines into sections so Suno understands the phrasing you want.')) ?></p>
                </div>
                <div class="ai-composer-field">
                  <label for="aiComposerInstrumental"><?= sanitize((string) ($aiComposerTranslations['instrumental']['label'] ?? 'Instrumental direction')) ?></label>
                  <textarea
                    id="aiComposerInstrumental"
                    class="ai-composer-textarea"
                    data-ai-instrumental
                    rows="4"
                    placeholder="<?= sanitize((string) ($aiComposerTranslations['instrumental']['placeholder'] ?? 'Detail the instrumentation, energy, and transitions you want.')) ?>"
                  ><?= htmlspecialchars($aiComposerDefaultInstrumentation, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></textarea>
                  <p class="ai-composer-helper"><?= sanitize((string) ($aiComposerTranslations['instrumental']['helper'] ?? 'Give the AI clear cues about textures, rhythm and arrangement changes.')) ?></p>
                  <?php if ($aiComposerInstrumentChips): ?>
                    <div class="ai-composer-instrument-chips">
                      <?php foreach ($aiComposerInstrumentChips as $chip): ?>
                        <?php $chipValue = (string) $chip; ?>
                        <button
                          type="button"
                          class="ai-composer-instrument-chip<?= $chipValue === $aiComposerDefaultInstrumentation ? ' is-active' : '' ?>"
                          data-ai-instrument-chip="<?= htmlspecialchars($chipValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                        ><?= sanitize($chipValue) ?></button>
                      <?php endforeach; ?>
                    </div>
                  <?php endif; ?>
                </div>
              </div>
            </section>
            <aside class="ai-composer-modal__aside">
              <div class="ai-composer-style">
                <h3 class="ai-composer-style-heading"><?= sanitize((string) ($aiComposerTranslations['styles']['title'] ?? 'Style Blueprint')) ?></h3>
                <p class="ai-composer-style-helper">
                  <?= sanitize((string) ($aiComposerTranslations['styles']['helper_prefix'] ?? 'We merge your notes with the preset prompt:')) ?>
                  <span data-ai-style-helper><?= sanitize($aiComposerDefaultStylePrompt) ?></span>
                </p>
                <div class="ai-composer-style-list">
                  <?php foreach ($aiComposerStyles as $style): ?>
                    <?php
                      $styleId = (string) ($style['id'] ?? '');
                      $styleName = (string) ($style['name'] ?? '');
                      $styleDescription = (string) ($style['description'] ?? '');
                      $stylePrompt = (string) ($style['prompt'] ?? '');
                    ?>
                    <button
                      type="button"
                      class="ai-composer-style-button<?= $styleId === $aiComposerDefaultStyleId ? ' is-active' : '' ?>"
                      data-ai-style="<?= sanitize($styleId) ?>"
                      data-ai-style-prompt="<?= htmlspecialchars($stylePrompt, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                    >
                      <strong><?= sanitize($styleName) ?></strong>
                      <?php if ($styleDescription !== ''): ?><span><?= sanitize($styleDescription) ?></span><?php endif; ?>
                    </button>
                  <?php endforeach; ?>
                </div>
              </div>
              <div class="ai-composer-voices">
                <h3 class="ai-composer-style-heading"><?= sanitize((string) ($aiComposerTranslations['voices']['title'] ?? 'Voice Palette')) ?></h3>
                <div class="ai-composer-voice-list">
                  <?php foreach ($aiComposerVoices as $voice): ?>
                    <?php
                      $voiceId = (string) ($voice['id'] ?? '');
                      $voiceLabel = (string) ($voice['label'] ?? '');
                      $voiceDescription = (string) ($voice['description'] ?? '');
                    ?>
                    <button
                      type="button"
                      class="ai-composer-voice-button<?= $voiceId === $aiComposerDefaultVoiceId ? ' is-active' : '' ?>"
                      data-ai-voice="<?= sanitize($voiceId) ?>"
                    >
                      <strong><?= sanitize($voiceLabel) ?></strong>
                      <?php if ($voiceDescription !== ''): ?><span><?= sanitize($voiceDescription) ?></span><?php endif; ?>
                    </button>
                  <?php endforeach; ?>
                </div>
              </div>
              <div>
                <h3 class="ai-composer-style-heading"><?= sanitize((string) ($aiComposerTranslations['durations']['label'] ?? 'Duration (seconds)')) ?></h3>
                <div class="ai-composer-duration-list">
                  <?php foreach ($aiComposerDurations as $durationValue): ?>
                    <?php $numericDuration = (int) $durationValue; ?>
                    <button
                      type="button"
                      class="ai-composer-duration-button<?= $numericDuration === $aiComposerDefaultDuration ? ' is-active' : '' ?>"
                      data-ai-duration="<?= $numericDuration ?>"
                    ><?= $numericDuration ?>s</button>
                  <?php endforeach; ?>
                </div>
              </div>
              <div class="ai-composer-tempo">
                <h3 class="ai-composer-style-heading"><?= sanitize((string) ($aiComposerTranslations['tempo']['label'] ?? 'Tempo')) ?></h3>
                <input
                  type="range"
                  min="<?= (int) ($aiComposerTempoConfig['min'] ?? 70) ?>"
                  max="<?= (int) ($aiComposerTempoConfig['max'] ?? 160) ?>"
                  value="<?= (int) $aiComposerDefaultTempo ?>"
                  data-ai-tempo
                >
                <span class="ai-composer-tempo-value" data-ai-tempo-value><?= sanitize(str_replace(':value', (string) $aiComposerDefaultTempo, (string) ($aiComposerTranslations['tempo']['helper_template'] ?? ':value BPM target'))) ?></span>
              </div>
            </aside>
          </div>
          <div class="ai-composer-feedback">
            <div class="ai-composer-status" data-ai-status role="status" aria-live="polite"><?= sanitize((string) ($aiComposerTranslations['status']['default'] ?? 'Generation uses your Suno credits. Jobs appear in the Studio timeline automatically once ready.')) ?></div>
            <div class="ai-composer-error" data-ai-error role="alert" aria-live="polite"></div>
          </div>
          <div class="ai-composer-actions">
            <button type="button" class="ai-composer-reset" data-ai-reset><?= sanitize((string) ($aiComposerTranslations['actions']['reset'] ?? 'Reset')) ?></button>
            <button type="button" class="ai-composer-submit" data-ai-submit><?= sanitize((string) ($aiComposerTranslations['actions']['submit'] ?? 'Render with Suno')) ?></button>
          </div>
          <section class="ai-composer-result" data-ai-result-lyrics-container hidden>
            <h3><?= sanitize((string) ($aiComposerTranslations['result']['lyrics_title'] ?? 'Latest AI Lyric Draft')) ?></h3>
            <pre data-ai-result-lyrics></pre>
          </section>
          <section class="ai-composer-preview" data-ai-preview-section hidden>
            <div class="ai-composer-preview-header">
              <h3><?= sanitize((string) ($aiComposerTranslations['result']['preview_title'] ?? 'Preview')) ?></h3>
              <span class="ai-composer-job-label" data-ai-job></span>
            </div>
            <audio controls data-ai-audio></audio>
          </section>
        </div>
      </div>
    </div>

    <div class="modal" id="expressDeliveryModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="expressDeliveryModalTitle">
      <div class="modal__content express-modal" tabindex="-1">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.express_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="express-modal__inner" data-express-modal>
          <header class="express-modal__header">
            <span class="express-modal__badge"><?= __e('dashboard.express_modal.badge') ?></span>
            <h2 id="expressDeliveryModalTitle"><?= __e('dashboard.express_modal.title') ?></h2>
            <p><?= __e('dashboard.express_modal.subtitle') ?></p>
          </header>
          <div class="express-modal__layout">
            <?php if ($expressModalTranslations['highlights'] ?? []): ?>
              <section class="express-modal__highlights">
                <?php foreach (($expressModalTranslations['highlights'] ?? []) as $highlight): ?>
                  <?php
                    $highlightTitle = (string) ($highlight['title'] ?? '');
                    $highlightDescription = (string) ($highlight['description'] ?? '');
                  ?>
                  <article class="express-highlight">
                    <?php if ($highlightTitle !== ''): ?><strong><?= sanitize($highlightTitle) ?></strong><?php endif; ?>
                    <?php if ($highlightDescription !== ''): ?><p><?= sanitize($highlightDescription) ?></p><?php endif; ?>
                  </article>
                <?php endforeach; ?>
              </section>
            <?php endif; ?>
            <section class="express-modal__form">
              <header class="express-modal__form-header">
                <h3><?= __e('dashboard.express_modal.form.title') ?></h3>
                <p><?= __e('dashboard.express_modal.form.subtitle') ?></p>
              </header>
              <form data-express-form autocomplete="on" novalidate>
                <div class="express-form-grid">
                  <div class="express-form-row">
                    <div class="express-field">
                      <label for="expressFirstName"><?= __e('dashboard.express_modal.form.fields.first_name') ?></label>
                      <input type="text" id="expressFirstName" name="first_name" value="<?= htmlspecialchars((string) ($user['first_name'] ?? ''), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="given-name" data-express-first-name>
                    </div>
                    <div class="express-field">
                      <label for="expressLastName"><?= __e('dashboard.express_modal.form.fields.last_name') ?></label>
                      <input type="text" id="expressLastName" name="last_name" value="<?= htmlspecialchars((string) ($user['last_name'] ?? ''), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="family-name" data-express-last-name>
                    </div>
                  </div>
                  <div class="express-field">
                    <label for="expressEmail"><?= __e('dashboard.express_modal.form.fields.email') ?></label>
                    <input type="email" id="expressEmail" name="email" value="<?= htmlspecialchars((string) ($user['email'] ?? ''), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="email" data-express-email readonly>
                  </div>
                  <?php $expressReleasePlaceholder = (string) __('dashboard.express_modal.form.fields.release_title_placeholder'); ?>
                  <div class="express-field">
                    <label for="expressAlbumName"><?= __e('dashboard.express_modal.form.fields.release_title') ?></label>
                    <input type="text" id="expressAlbumName" name="release_title" placeholder="<?= sanitize($expressReleasePlaceholder) ?>" autocomplete="off" data-express-album>
                  </div>
                  <div class="express-field">
                    <label><?= __e('dashboard.express_modal.form.fields.release_type') ?></label>
                    <div class="express-type-options" data-express-types>
                      <?php foreach ($expressOptions as $optionKey => $optionData): ?>
                        <?php
                          $optionPlan = (string) ($optionData['plan'] ?? '');
                          $optionPrice = (string) ($optionData['price_display'] ?? '');
                          $optionAvailable = !empty($optionData['available']);
                          $typeLabel = (string) __('dashboard.express_modal.form.types.' . $optionKey . '.label');
                          $typeDescription = (string) __('dashboard.express_modal.form.types.' . $optionKey . '.description');
                        ?>
                        <label class="express-type-option" data-express-option-container data-express-option-id="<?= sanitize((string) $optionKey) ?>" data-selected="false">
                          <input type="radio" name="express_release_type" value="<?= sanitize((string) $optionKey) ?>" data-express-option data-plan="<?= sanitize($optionPlan) ?>" data-price="<?= sanitize($optionPrice) ?>" data-available="<?= $optionAvailable ? '1' : '0' ?>" data-price-amount="<?= (int) ($optionData['user_amount_cents'] ?? 0) ?>" data-price-currency="<?= sanitize((string) ($optionData['currency'] ?? $defaultCurrencyCode)) ?>" data-base-amount="<?= (int) ($optionData['base_amount_cents'] ?? 0) ?>"<?= $optionAvailable ? '' : ' disabled' ?>>
                          <strong><?= sanitize($typeLabel) ?></strong>
                          <span><?= sanitize($typeDescription) ?></span>
                          <?php if ($optionPrice !== ''): ?><span class="express-type-price" data-express-option-price><?= sanitize($optionPrice) ?></span><?php endif; ?>
                          <?php if (!$optionAvailable): ?><span class="express-type-price"><?= __e('dashboard.express_modal.form.types.unavailable') ?></span><?php endif; ?>
                        </label>
                      <?php endforeach; ?>
                    </div>
                  </div>
                </div>
                <?php $expressSubmitDefault = (string) __('dashboard.express_modal.form.actions.submit_default'); ?>
                <button type="button" class="express-button" data-express-checkout data-default-label="<?= sanitize($expressSubmitDefault) ?>" disabled>
                  <?= sanitize($expressSubmitDefault) ?>
                </button>
                <p class="express-feedback" data-express-feedback role="status" aria-live="polite"></p>
              </form>
            </section>
          </div>
        </div>
      </div>
    </div>

    <div class="modal" id="paymentsModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="paymentsModalTitle">
      <div class="modal__content payments-modal" tabindex="-1">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.payments.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="payments-modal__inner" data-payments-modal>
          <header class="payments-modal__header">
            <div class="payments-modal__titles">
              <span class="payments-badge" aria-hidden="true"><?= __e('dashboard.payments.badge') ?></span>
              <h2 id="paymentsModalTitle"><?= __e('dashboard.payments.title') ?></h2>
              <p><?= __e('dashboard.payments.subtitle') ?></p>
            </div>
            <div class="payments-modal__actions">
              <div class="payments-modal__meta" data-payments-updated-container hidden>
                <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                  <path fill="currentColor" d="M12 5a1 1 0 0 1 1 1v5.09l3.27 1.88a1 1 0 0 1-1 1.74l-3.79-2.19A1.5 1.5 0 0 1 11 11.5V6a1 1 0 0 1 1-1Zm0-4a10 10 0 1 0 10 10A10 10 0 0 0 12 1Zm0 2a8 8 0 1 1-8 8a8 8 0 0 1 8-8Z" />
                </svg>
                <span class="payments-updated" data-payments-updated></span>
              </div>
              <button type="button" class="icon-button" data-payments-refresh>
                <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                  <path fill="currentColor" d="M21 12a9 9 0 1 1-2.64-6.36a1 1 0 1 1-1.42 1.42A7 7 0 1 0 19 12h-2.24a1 1 0 0 1 0-2H21a1 1 0 0 1 1 1v2.24a1 1 0 1 1-2 0Z" />
                </svg>
                <span><?= __e('dashboard.payments.refresh') ?></span>
              </button>
            </div>
          </header>
          <div class="payments-loading" data-payments-loading>
            <span class="payments-spinner" aria-hidden="true"></span>
            <span><?= __e('dashboard.payments.loading') ?></span>
          </div>
          <div class="payments-error" data-payments-error hidden>
            <div class="payments-error__icon" aria-hidden="true">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M12 9v4" />
                <path d="M12 17h.01" />
                <path d="M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0Z" />
              </svg>
            </div>
            <p class="payments-error__message" data-payments-error-message><?= __e('dashboard.payments.errors.generic') ?></p>
            <div class="payments-error__actions">
              <button type="button" data-payments-retry><?= __e('dashboard.payments.retry') ?></button>
            </div>
          </div>
          <div class="payments-content" data-payments-content hidden>
            <section class="payments-upcoming" aria-labelledby="paymentsUpcomingTitle">
              <div class="payments-section-header">
                <h3 id="paymentsUpcomingTitle"><?= __e('dashboard.payments.upcoming.title') ?></h3>
                <p><?= __e('dashboard.payments.upcoming.subtitle') ?></p>
              </div>
              <div class="payments-upcoming__list" data-payments-upcoming></div>
              <div class="payments-upcoming__empty" data-payments-upcoming-empty hidden><?= __e('dashboard.payments.upcoming.empty') ?></div>
            </section>
            <section class="payments-history" aria-labelledby="paymentsHistoryTitle">
              <div class="payments-history__header">
                <div class="payments-section-header">
                  <h3 id="paymentsHistoryTitle"><?= __e('dashboard.payments.history.title') ?></h3>
                  <p><?= __e('dashboard.payments.history.subtitle') ?></p>
                </div>
              </div>
              <div class="payments-table">
                <table>
                  <thead>
                    <tr>
                      <th scope="col"><?= __e('dashboard.payments.table.date') ?></th>
                      <th scope="col"><?= __e('dashboard.payments.table.service') ?></th>
                      <th scope="col"><?= __e('dashboard.payments.table.amount') ?></th>
                      <th scope="col"><?= __e('dashboard.payments.table.status') ?></th>
                      <th scope="col"><?= __e('dashboard.payments.table.actions') ?></th>
                    </tr>
                  </thead>
                  <tbody data-payments-list></tbody>
                </table>
                <div class="payments-empty" data-payments-empty hidden><?= __e('dashboard.payments.history.empty') ?></div>
              </div>
            </section>
          </div>
    </div>
  </div>
</div>

<div class="modal" id="musicDistributionModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="musicDistributionModalTitle">
      <div class="modal__content distribution-modal" tabindex="-1" data-default-service-url="<?= sanitize($musicDistributionCtaHref) ?>">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.musicdistribution_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="distribution-modal__inner">
          <header class="distribution-modal__header">
            <?php if (!empty($musicDistributionModalTranslations['badge'] ?? '')): ?>
              <span class="distribution-modal__badge"><?= __e('dashboard.musicdistribution_modal.badge') ?></span>
            <?php endif; ?>
            <h2 id="musicDistributionModalTitle"><?= __e('dashboard.musicdistribution_modal.title') ?></h2>
            <?php if (!empty($musicDistributionModalTranslations['subtitle'] ?? '')): ?>
              <p class="distribution-modal__subtitle"><?= __e('dashboard.musicdistribution_modal.subtitle') ?></p>
            <?php endif; ?>
          </header>
          <?php if ($musicDistributionFeatures): ?>
            <ul class="distribution-modal__features">
              <?php foreach ($musicDistributionFeatures as $feature): ?>
                <?php
                  $featureText = (string) $feature;
                  if ($featureText === '') {
                      continue;
                  }
                ?>
                <li>
                  <span class="distribution-modal__feature-icon" aria-hidden="true">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M20 6L9 17l-5-5" />
                    </svg>
                  </span>
                  <span><?= htmlspecialchars($featureText, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></span>
                </li>
              <?php endforeach; ?>
            </ul>
          <?php endif; ?>
              <div class="distribution-modal__footer">
                  <?php
                    $distributionCtaDefault = (string) ($musicDistributionModalTranslations['cta_label'] ?? '');
                    $distributionCtaProcessing = (string) ($musicDistributionModalTranslations['cta_processing'] ?? '');
                    $distributionCtaError = (string) ($musicDistributionModalTranslations['cta_error'] ?? '');
            ?>
            <button
              type="button"
              class="distribution-modal__cta"
              data-distribution-launch
              data-default-label="<?= sanitize($distributionCtaDefault) ?>"
              data-processing-label="<?= sanitize($distributionCtaProcessing) ?>"
              data-error-label="<?= sanitize($distributionCtaError) ?>"
              data-default-url="<?= sanitize($musicDistributionCtaHref) ?>"
                  >
                    <span><?= __e('dashboard.musicdistribution_modal.cta_label') ?></span>
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
                      <path d="M5 12h14" />
                      <path d="M13 5l7 7-7 7" />
                    </svg>
                  </button>
                  <?php if (!empty($musicDistributionModalTranslations['opt_out_label'] ?? '')): ?>
                    <label for="musicDistributionOptOut" class="distribution-modal__checkbox">
                      <input type="checkbox" id="musicDistributionOptOut" data-distribution-optout>
                      <span><?= __e('dashboard.musicdistribution_modal.opt_out_label') ?></span>
                    </label>
                  <?php endif; ?>
                  <p class="distribution-modal__feedback" data-distribution-feedback role="status" aria-live="polite"></p>
                  <?php if (!empty($musicDistributionModalTranslations['disclaimer'] ?? '')): ?>
                    <p class="distribution-modal__footnote"><?= __e('dashboard.musicdistribution_modal.disclaimer') ?></p>
                  <?php endif; ?>
                </div>
    </div>
  </div>
</div>

<div class="modal" id="publishingAdministrationModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="publishingAdministrationModalTitle">
  <div class="modal__content publishing-modal" tabindex="-1">
    <button type="button" class="modal__close" data-modal-dismiss>
      <span class="visually-hidden"><?= __e('dashboard.publishing_modal.actions.close') ?></span>
      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
        <line x1="18" y1="6" x2="6" y2="18" />
        <line x1="6" y1="6" x2="18" y2="18" />
      </svg>
    </button>
    <div class="publishing-modal__inner">
      <section class="publishing-modal__hero">
        <div class="publishing-modal__visual" aria-hidden="true">
          <img src="/images/publishing-administration.png" alt="" loading="lazy">
        </div>
        <div class="publishing-modal__hero-copy">
          <?php if (!empty($publishingModalTranslations['badge'] ?? '')): ?>
            <span class="publishing-modal__badge"><?= __e('dashboard.publishing_modal.badge') ?></span>
          <?php endif; ?>
          <h2 id="publishingAdministrationModalTitle"><?= __e('dashboard.publishing_modal.title') ?></h2>
          <?php if (!empty($publishingModalTranslations['subtitle'] ?? '')): ?>
            <p class="publishing-modal__subtitle"><?= __e('dashboard.publishing_modal.subtitle') ?></p>
          <?php endif; ?>
          <?php if ($publishingHeroHighlight !== ''): ?>
            <p class="publishing-modal__highlight"><?= sanitize($publishingHeroHighlight) ?></p>
          <?php endif; ?>
          <?php if ($publishingModalStats): ?>
            <div class="publishing-modal__stats">
              <?php foreach ($publishingModalStats as $stat): ?>
                <?php
                  $statValue = isset($stat['value']) ? (string) $stat['value'] : '';
                  $statLabel = isset($stat['label']) ? (string) $stat['label'] : '';
                  if ($statValue === '' && $statLabel === '') {
                      continue;
                  }
                ?>
                <div class="publishing-modal__stat">
                  <?php if ($statValue !== ''): ?>
                    <strong><?= sanitize($statValue) ?></strong>
                  <?php endif; ?>
                  <?php if ($statLabel !== ''): ?>
                    <span><?= sanitize($statLabel) ?></span>
                  <?php endif; ?>
                </div>
              <?php endforeach; ?>
            </div>
          <?php endif; ?>
          <?php if ($publishingPrimaryCtaLabel !== ''): ?>
            <div class="publishing-modal__hero-actions">
              <button
                type="button"
                class="publishing-modal__cta"
                data-publishing-checkout
                data-default-label="<?= sanitize($publishingPrimaryCtaLabel) ?>"
                data-plan="publishing_administration"
              >
                <span><?= sanitize($publishingPrimaryCtaLabel) ?></span>
              </button>
            </div>
            <p class="publishing-modal__feedback" data-publishing-feedback role="status" aria-live="polite" hidden></p>
          <?php endif; ?>
        </div>
      </section>
      <?php
        $publishingHighlightsTitle = (string) ($publishingModalTranslations['highlights_title'] ?? '');
      ?>
      <?php if ($publishingHighlightsTitle !== '' || $publishingModalHighlights): ?>
        <section class="publishing-modal__section">
          <?php if ($publishingHighlightsTitle !== ''): ?>
            <h3><?= sanitize($publishingHighlightsTitle) ?></h3>
          <?php endif; ?>
          <?php if ($publishingModalHighlights): ?>
            <div class="publishing-modal__features">
              <?php foreach ($publishingModalHighlights as $highlight): ?>
                <?php
                  $highlightTitle = isset($highlight['title']) ? (string) $highlight['title'] : '';
                  $highlightDescription = isset($highlight['description']) ? (string) $highlight['description'] : '';
                  if ($highlightTitle === '' && $highlightDescription === '') {
                      continue;
                  }
                ?>
                <article class="publishing-feature">
                  <?php if ($highlightTitle !== ''): ?>
                    <h4><?= sanitize($highlightTitle) ?></h4>
                  <?php endif; ?>
                  <?php if ($highlightDescription !== ''): ?>
                    <p><?= sanitize($highlightDescription) ?></p>
                  <?php endif; ?>
                </article>
              <?php endforeach; ?>
            </div>
          <?php endif; ?>
        </section>
      <?php endif; ?>
      <?php
        $publishingRoyaltiesTitle = (string) ($publishingModalTranslations['royalties']['title'] ?? '');
        $publishingRoyaltiesSubtitle = (string) ($publishingModalTranslations['royalties']['subtitle'] ?? '');
      ?>
      <?php if ($publishingRoyaltiesTitle !== '' || $publishingRoyaltiesSubtitle !== '' || $publishingModalRoyalties): ?>
        <section class="publishing-modal__section publishing-modal__section--royalties">
          <?php if ($publishingRoyaltiesTitle !== '' || $publishingRoyaltiesSubtitle !== ''): ?>
            <div class="publishing-modal__section-header">
              <?php if ($publishingRoyaltiesTitle !== ''): ?>
                <h3><?= sanitize($publishingRoyaltiesTitle) ?></h3>
              <?php endif; ?>
              <?php if ($publishingRoyaltiesSubtitle !== ''): ?>
                <p><?= sanitize($publishingRoyaltiesSubtitle) ?></p>
              <?php endif; ?>
            </div>
          <?php endif; ?>
          <?php if ($publishingModalRoyalties): ?>
            <div class="publishing-modal__royalties-grid">
              <?php foreach ($publishingModalRoyalties as $royalty): ?>
                <?php
                  $royaltyTitle = isset($royalty['title']) ? (string) $royalty['title'] : '';
                  $royaltyDescription = isset($royalty['description']) ? (string) $royalty['description'] : '';
                  if ($royaltyTitle === '' && $royaltyDescription === '') {
                      continue;
                  }
                ?>
                <article class="publishing-royalty">
                  <?php if ($royaltyTitle !== ''): ?>
                    <h4><?= sanitize($royaltyTitle) ?></h4>
                  <?php endif; ?>
                  <?php if ($royaltyDescription !== ''): ?>
                    <p><?= sanitize($royaltyDescription) ?></p>
                  <?php endif; ?>
                </article>
              <?php endforeach; ?>
            </div>
          <?php endif; ?>
        </section>
      <?php endif; ?>
      <?php
        $publishingPricingTitle = (string) ($publishingModalTranslations['pricing']['title'] ?? '');
        $publishingPricingSubtitle = (string) ($publishingModalTranslations['pricing']['subtitle'] ?? '');
      ?>
      <?php if ($publishingPricingTitle !== '' || $publishingPricingSubtitle !== '' || $publishingModalPricingCards): ?>
        <section class="publishing-modal__section publishing-modal__section--pricing">
          <?php if ($publishingPricingTitle !== '' || $publishingPricingSubtitle !== ''): ?>
            <div class="publishing-modal__section-header">
              <?php if ($publishingPricingTitle !== ''): ?>
                <h3><?= sanitize($publishingPricingTitle) ?></h3>
              <?php endif; ?>
              <?php if ($publishingPricingSubtitle !== ''): ?>
                <p><?= sanitize($publishingPricingSubtitle) ?></p>
              <?php endif; ?>
            </div>
          <?php endif; ?>
          <?php if ($publishingModalPricingCards): ?>
            <div class="publishing-modal__pricing">
              <?php foreach ($publishingModalPricingCards as $pricingCard): ?>
                <?php
                  $pricingValue = isset($pricingCard['value']) ? (string) $pricingCard['value'] : '';
                  $pricingLabel = isset($pricingCard['label']) ? (string) $pricingCard['label'] : '';
                  $pricingDescription = isset($pricingCard['description']) ? (string) $pricingCard['description'] : '';
                  if ($pricingValue === '' && $pricingLabel === '' && $pricingDescription === '') {
                      continue;
                  }
                ?>
                <article class="publishing-pricing-card">
                  <?php if ($pricingValue !== ''): ?>
                    <strong><?= sanitize($pricingValue) ?></strong>
                  <?php endif; ?>
                  <?php if ($pricingLabel !== ''): ?>
                    <span><?= sanitize($pricingLabel) ?></span>
                  <?php endif; ?>
                  <?php if ($pricingDescription !== ''): ?>
                    <p><?= sanitize($pricingDescription) ?></p>
                  <?php endif; ?>
                </article>
              <?php endforeach; ?>
            </div>
          <?php endif; ?>
        </section>
      <?php endif; ?>
      <?php if ($publishingTestimonialQuote !== '' || $publishingTestimonialAuthor !== ''): ?>
        <section class="publishing-modal__testimonial"<?php if ($publishingTestimonialLabel !== ''): ?> aria-label="<?= sanitize($publishingTestimonialLabel) ?>"<?php endif; ?>>
          <?php if ($publishingTestimonialQuote !== ''): ?>
            <blockquote><?= sanitize($publishingTestimonialQuote) ?></blockquote>
          <?php endif; ?>
          <?php if ($publishingTestimonialAuthor !== ''): ?>
            <cite><?= sanitize($publishingTestimonialAuthor) ?></cite>
          <?php endif; ?>
        </section>
      <?php endif; ?>
      <?php if ($publishingFootnote !== ''): ?>
        <p class="publishing-modal__footnote"><?= sanitize($publishingFootnote) ?></p>
      <?php endif; ?>
    </div>
  </div>
</div>

<div class="modal" id="cloudStorageModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="cloudStorageModalTitle" data-scroll-lock="dynamic">
  <div class="modal__content cloud-modal" tabindex="-1">
    <button type="button" class="modal__close" data-modal-dismiss>
      <span class="visually-hidden"><?= __e('dashboard.cloud_modal.actions.close') ?></span>
      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="cloud-modal__inner">
          <header class="cloud-modal__hero">
            <?php if (!empty($cloudModalTranslations['badge'] ?? '')): ?>
              <span class="cloud-modal__badge"><?= __e('dashboard.cloud_modal.badge') ?></span>
            <?php endif; ?>
            <h2 id="cloudStorageModalTitle"><?= __e('dashboard.cloud_modal.title') ?></h2>
            <p class="cloud-modal__subtitle"><?= __e('dashboard.cloud_modal.subtitle') ?></p>
          </header>
          <div class="cloud-modal__layout">
            <div class="cloud-modal__visual" aria-hidden="true">
              <span class="cloud-modal__glow cloud-modal__glow--primary"></span>
              <span class="cloud-modal__glow cloud-modal__glow--secondary"></span>
              <svg class="cloud-modal__illustration" viewBox="0 0 260 200" focusable="false">
                <defs>
                  <linearGradient id="cloudGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                    <stop offset="0%" stop-color="#6366f1" stop-opacity="0.95" />
                    <stop offset="100%" stop-color="#ec4899" stop-opacity="0.9" />
                  </linearGradient>
                  <linearGradient id="shieldGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                    <stop offset="0%" stop-color="#38bdf8" stop-opacity="0.9" />
                    <stop offset="100%" stop-color="#a855f7" stop-opacity="0.95" />
                  </linearGradient>
                  <filter id="cloudShadow" x="-20%" y="-20%" width="140%" height="140%">
                    <feDropShadow dx="0" dy="24" stdDeviation="28" flood-color="rgba(15,23,42,0.65)" flood-opacity="0.75" />
                  </filter>
                </defs>
                <g filter="url(#cloudShadow)">
                  <path d="M84 92c-2-38 28-68 66-68c28 0 52 18 61 44c28 4 49 28 49 57c0 32-26 58-58 58H98c-36 0-66-30-66-66c0-30 20-56 52-63Z" fill="url(#cloudGradient)" opacity="0.82"></path>
                  <path d="M140 80c0-17 13-30 30-30s30 13 30 30v12h4c8 0 14 6 14 14v46c0 8-6 14-14 14h-68c-8 0-14-6-14-14v-46c0-8 6-14 14-14h4Z" fill="rgba(15,23,42,0.65)" stroke="rgba(148,163,184,0.4)" stroke-width="2.5" />
                  <path d="M154 92v-10c0-8.8 7.2-16 16-16s16 7.2 16 16v10" fill="none" stroke="url(#shieldGradient)" stroke-width="6" stroke-linecap="round" />
                  <rect x="148" y="110" width="60" height="40" rx="12" ry="12" fill="url(#shieldGradient)" opacity="0.9" />
                  <path d="M178 120v10" stroke="#0f172a" stroke-linecap="round" stroke-width="6" />
                  <circle cx="178" cy="138" r="4.2" fill="#0f172a" />
                </g>
              </svg>
            </div>
            <div class="cloud-modal__content">
              <section class="cloud-modal__section">
                <h3><?= __e('dashboard.cloud_modal.features_title') ?></h3>
                <ul class="cloud-modal__features">
                  <?php foreach ($cloudModalFeatures as $feature): ?>
                    <?php
                      $featureTitle = isset($feature['title']) ? (string) $feature['title'] : '';
                      $featureDescription = isset($feature['description']) ? (string) $feature['description'] : '';
                      if ($featureTitle === '' && $featureDescription === '') {
                          continue;
                      }
                    ?>
                    <li class="cloud-modal__feature">
                      <span class="cloud-modal__feature-icon" aria-hidden="true">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                          <path d="M20 6L9 17l-5-5" />
                        </svg>
                      </span>
                      <div class="cloud-modal__feature-copy">
                        <?php if ($featureTitle !== ''): ?>
                          <h4><?= htmlspecialchars($featureTitle, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></h4>
                        <?php endif; ?>
                        <?php if ($featureDescription !== ''): ?>
                          <p><?= htmlspecialchars($featureDescription, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></p>
                        <?php endif; ?>
                      </div>
                    </li>
                  <?php endforeach; ?>
                </ul>
              </section>
              <?php if ($cloudModalHighlights): ?>
                <section class="cloud-modal__section">
                  <h3><?= __e('dashboard.cloud_modal.highlights_title') ?></h3>
                  <ul class="cloud-modal__highlights">
                    <?php foreach ($cloudModalHighlights as $highlight): ?>
                      <?php
                        $highlightText = (string) $highlight;
                        if ($highlightText === '') {
                            continue;
                        }
                      ?>
                      <li>
                        <span class="cloud-modal__highlight-icon" aria-hidden="true">
                          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M20 6L9 17l-5-5" />
                          </svg>
                        </span>
                        <span><?= htmlspecialchars($highlightText, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></span>
                      </li>
                    <?php endforeach; ?>
                  </ul>
                </section>
              <?php endif; ?>
              <?php if ($cloudPricingEnabled): ?>
                <section class="cloud-modal__section cloud-modal__section--pricing">
                  <h3><?= __e('dashboard.cloud_modal.pricing.title') ?></h3>
                  <ul class="cloud-modal__pricing">
                    <?php if ($cloudUsagePricingEnabled): ?>
                      <li class="cloud-modal__pricing-item">
                        <span class="cloud-modal__pricing-label"><?= __e('dashboard.cloud_modal.pricing.usage.label') ?></span>
                        <p class="cloud-modal__pricing-value">
                          <?= htmlspecialchars($cloudUsagePriceCopy, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>
                        </p>
                      </li>
                    <?php endif; ?>
                    <?php if ($cloudSubscriptionPricingEnabled): ?>
                      <li class="cloud-modal__pricing-item">
                        <span class="cloud-modal__pricing-label"><?= __e('dashboard.cloud_modal.pricing.subscription.label') ?></span>
                        <p class="cloud-modal__pricing-value">
                          <?= htmlspecialchars($cloudSubscriptionPriceCopy, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>
                        </p>
                      </li>
                    <?php endif; ?>
                  </ul>
                </section>
              <?php endif; ?>
              <div class="cloud-modal__cta">
                <a class="cloud-modal__cta-button" href="<?= sanitize($cloudModalCtaHref) ?>" data-cloud-modal-cta>
                  <span><?= __e('dashboard.cloud_modal.cta_label') ?></span>
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
                    <path d="M5 12h14" />
                    <path d="M13 5l7 7-7 7" />
                  </svg>
                </a>
                <label for="cloudModalOptOut" class="cloud-modal__checkbox">
                  <input type="checkbox" id="cloudModalOptOut" data-cloud-modal-optout>
                  <span><?= __e('dashboard.cloud_modal.opt_out_label') ?></span>
                </label>
                <p class="cloud-modal__footnote"><?= __e('dashboard.cloud_modal.disclaimer') ?></p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <?php ob_start(); ?>
      <div class="modal__inner smartlinks-modal__inner" data-smartlinks-modal>
                <div class="smartlinks-modal__header">
                  <?php if (!empty($dashboardTranslations['smartlinks_modal']['badge'] ?? '')): ?>
                    <span class="smartlinks-modal__badge"><?= __e('dashboard.smartlinks_modal.badge') ?></span>
                  <?php endif; ?>
                  <h2 id="smartlinksModalTitle"><?= __e('dashboard.smartlinks_modal.title') ?></h2>
                  <p><?= __e('dashboard.smartlinks_modal.description') ?></p>
                  <div class="smartlinks-tabs" role="tablist" aria-label="<?= __e('dashboard.smartlinks_modal.title') ?>">
                    <button type="button" class="smartlinks-tab is-active" data-smartlinks-tab="create" role="tab" aria-selected="true">
                      <?= __e('dashboard.smartlinks_modal.tabs.create') ?>
                    </button>
                    <button type="button" class="smartlinks-tab" data-smartlinks-tab="analytics" role="tab" aria-selected="false">
                      <?= __e('dashboard.smartlinks_modal.tabs.analytics') ?>
                    </button>
                  </div>
                </div>
                <div class="smartlinks-view smartlinks-view--create is-active" data-smartlinks-view="create" role="tabpanel" aria-labelledby="smartlinksModalTitle">
                  <div class="smartlinks-create-layout">
                    <div>
                      <form class="smartlinks-form" data-smartlink-form novalidate>
                        <div class="smartlinks-fields">
                          <div class="smartlinks-field">
                            <label for="smartlinkUpc"><?= __e('dashboard.smartlinks_modal.form.upc_label') ?></label>
                            <input type="text" id="smartlinkUpc" name="upc" placeholder="<?= __e('dashboard.smartlinks_modal.form.upc_placeholder') ?>" autocomplete="off" data-smartlink-upc required>
                          </div>
                          <div class="smartlinks-field">
                            <label for="smartlinkSlug"><?= __e('dashboard.smartlinks_modal.form.slug_label') ?></label>
                            <input type="text" id="smartlinkSlug" name="slug" placeholder="<?= __e('dashboard.smartlinks_modal.form.slug_placeholder') ?>" autocomplete="off" data-smartlink-slug>
                            <p class="smartlinks-hint"><?= __e('dashboard.smartlinks_modal.form.slug_hint') ?></p>
                          </div>
                        </div>
                        <div class="smartlinks-platforms">
                          <div>
                            <strong><?= __e('dashboard.smartlinks_modal.form.platforms_label') ?></strong>
                            <p class="smartlinks-hint"><?= __e('dashboard.smartlinks_modal.form.platforms_hint') ?></p>
                          </div>
                          <div class="smartlinks-platforms__grid">
                            <?php foreach ($smartlinkPlatforms as $platform): ?>
                              <label class="smartlinks-platform">
                                <input type="checkbox" name="platforms[]" value="<?= sanitize((string) $platform['id']) ?>" data-smartlink-platform checked>
                                <span class="smartlinks-platform__indicator" aria-hidden="true">
                                  <svg viewBox="0 0 16 16" focusable="false" aria-hidden="true">
                                    <polyline points="3.5 9 6.5 12 12.5 4" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                  </svg>
                                </span>
                                <span class="smartlinks-platform__logo" aria-hidden="true">
                                  <img src="<?= sanitize((string) $platform['logo']) ?>" alt="">
                                </span>
                                <span class="smartlinks-platform__name"><?= sanitize((string) $platform['label']) ?></span>
                              </label>
                            <?php endforeach; ?>
                          </div>
                        </div>
                        <div class="smartlinks-actions">
                          <button type="submit" data-smartlink-submit><?= __e('dashboard.smartlinks_modal.form.submit') ?></button>
                          <p class="smartlinks-feedback" data-smartlink-feedback role="status"></p>
                        </div>
                      </form>
                      <div class="smartlinks-history">
                        <h3><?= __e('dashboard.smartlinks_modal.history.title') ?></h3>
                        <ul class="smartlinks-history__list" data-smartlink-history-list></ul>
                        <p class="smartlinks-history__empty" data-smartlink-history-empty><?= __e('dashboard.smartlinks_modal.history.empty') ?></p>
                      </div>
                    </div>
                    <aside class="smartlinks-preview" data-smartlink-preview>
                      <div class="smartlinks-success" data-smartlink-success>
                        <strong><?= __e('dashboard.smartlinks_modal.success.title') ?></strong>
                        <span><?= __e('dashboard.smartlinks_modal.success.message') ?></span>
                      </div>
                      <div class="smartlinks-preview__header">
                        <h3><?= __e('dashboard.smartlinks_modal.preview.title') ?></h3>
                        <p><?= __e('dashboard.smartlinks_modal.preview.subtitle') ?></p>
                      </div>
                      <div class="smartlinks-preview__link">
                        <label for="smartlinkShare"><?= __e('dashboard.smartlinks_modal.preview.share_label') ?></label>
                        <div class="smartlinks-preview__controls">
                          <input type="text" id="smartlinkShare" data-smartlink-link readonly>
                          <button type="button" data-smartlink-copy><?= __e('dashboard.smartlinks_modal.preview.copy') ?></button>
                          <span class="smartlinks-preview__copy-feedback" data-smartlink-copy-feedback></span>
                        </div>
                      </div>
                      <div class="smartlinks-preview__hero" data-smartlink-preview-content>
                        <div class="smartlinks-preview__album">
                          <div class="smartlinks-preview__cover" data-smartlink-cover>UPC</div>
                          <div class="smartlinks-preview__meta">
                            <p class="smartlinks-preview__title" data-smartlink-title></p>
                            <p class="smartlinks-preview__subtitle" data-smartlink-subtitle></p>
                          </div>
                        </div>
                        <div class="smartlinks-preview__platforms" data-smartlink-preview-platforms></div>
                      </div>
                      <p class="smartlinks-preview__empty" data-smartlink-preview-empty><?= __e('dashboard.smartlinks_modal.preview.empty') ?></p>
                    </aside>
                  </div>
                </div>
                <div class="smartlinks-view smartlinks-view--analytics" data-smartlinks-view="analytics" role="tabpanel" aria-labelledby="smartlinksModalTitle" hidden>
                  <div class="smartlinks-analytics">
                    <div class="smartlinks-analytics__layout">
                      <aside class="smartlinks-analytics__sidebar">
                        <h3><?= __e('dashboard.smartlinks_modal.analytics.selector_label') ?></h3>
                        <ul class="smartlinks-analytics__list" data-smartlink-analytics-list></ul>
                        <p class="smartlinks-analytics__empty-list" data-smartlink-analytics-empty-list><?= __e('dashboard.smartlinks_modal.history.empty') ?></p>
                      </aside>
                      <div class="smartlinks-analytics__content">
                        <div class="smartlinks-analytics__empty" data-smartlink-analytics-empty><?= __e('dashboard.smartlinks_modal.analytics.empty') ?></div>
                        <div class="smartlinks-analytics__details" data-smartlink-analytics-details hidden>
                          <div class="smartlinks-analytics__header">
                            <div class="smartlinks-analytics__header-main">
                              <h3 data-smartlink-analytics-title></h3>
                              <span data-smartlink-analytics-updated></span>
                            </div>
                            <div class="smartlinks-analytics__artwork" data-smartlink-analytics-artwork aria-hidden="true"></div>
                          </div>
                          <div class="smartlinks-summary">
                            <div class="smartlinks-summary__card">
                              <span class="smartlinks-summary__label"><?= __e('dashboard.smartlinks_modal.analytics.summary.clicks') ?></span>
                              <span class="smartlinks-summary__value" data-smartlink-summary="clicks">0</span>
                            </div>
                            <div class="smartlinks-summary__card">
                              <span class="smartlinks-summary__label"><?= __e('dashboard.smartlinks_modal.analytics.summary.ctr') ?></span>
                              <span class="smartlinks-summary__value" data-smartlink-summary="ctr">0%</span>
                            </div>
                            <div class="smartlinks-summary__card">
                              <span class="smartlinks-summary__label"><?= __e('dashboard.smartlinks_modal.analytics.summary.conversions') ?></span>
                              <span class="smartlinks-summary__value" data-smartlink-summary="conversions">0</span>
                            </div>
                            <div class="smartlinks-summary__card">
                              <span class="smartlinks-summary__label"><?= __e('dashboard.smartlinks_modal.analytics.summary.saves') ?></span>
                              <span class="smartlinks-summary__value" data-smartlink-summary="saves">0</span>
                            </div>
                          </div>
                          <div class="smartlinks-timeline">
                            <strong><?= __e('dashboard.smartlinks_modal.analytics.timeline_title') ?></strong>
                            <svg class="smartlinks-timeline__svg" viewBox="0 0 120 40" preserveAspectRatio="none" data-smartlink-timeline aria-hidden="true"></svg>
                          </div>
                          <div class="smartlinks-map">
                            <div class="smartlinks-map__header">
                              <strong><?= __e('dashboard.smartlinks_modal.analytics.geo_title') ?></strong>
                              <span><?= __e('dashboard.smartlinks_modal.analytics.geo_subtitle') ?></span>
                            </div>
                            <img class="smartlinks-map__image" src="/images/World_Map_Grayscale.png" alt="" aria-hidden="true" />
                            <div class="smartlinks-map__pulses" data-smartlink-map-pulses></div>
                          </div>
                          <div class="smartlinks-analytics__split">
                            <div class="smartlinks-platforms-breakdown">
                              <strong><?= __e('dashboard.smartlinks_modal.analytics.platforms_title') ?></strong>
                              <ul data-smartlink-platform-breakdown></ul>
                            </div>
                            <div class="smartlinks-cities">
                              <strong><?= __e('dashboard.smartlinks_modal.analytics.cities_title') ?></strong>
                              <ul data-smartlink-cities></ul>
                            </div>
                          </div>
                          <div class="smartlinks-highlights">
                            <strong><?= __e('dashboard.smartlinks_modal.analytics.recent_title') ?></strong>
                            <ul data-smartlink-highlights></ul>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
    <?php $smartlinksModalContent = ob_get_clean(); ?>
    <?php if ($isAuraDesign): ?>
      <div class="dashboard-page-source" data-dashboard-page-wrapper="smartlinks" hidden>
        <section class="smartlinks-page" role="region" aria-labelledby="smartlinksModalTitle" data-dashboard-page-source="smartlinks" hidden data-smartlinks-page>
          <div class="modal__content smartlinks-modal" tabindex="-1">
            <?= $smartlinksModalContent ?>
          </div>
        </section>
      </div>
    <?php else: ?>
    <div class="modal" id="smartlinksModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="smartlinksModalTitle" data-scroll-lock="dynamic">
      <div class="modal__content smartlinks-modal" tabindex="-1">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.royalties_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <?= $smartlinksModalContent ?>
      </div>
    </div>
    <?php endif; ?>
    <div class="modal" id="masteringModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="masteringModalTitle">
      <div class="modal__content mastering-modal" tabindex="-1" data-mastering-modal data-mastering-payments="<?= $masteringPaymentsEnabled ? '1' : '0' ?>">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.royalties_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="modal__inner mastering-modal__inner">
          <div class="mastering-modal__header">
            <h2 id="masteringModalTitle"><?= __e('dashboard.mastering_modal.title') ?></h2>
            <p><?= __e('dashboard.mastering_modal.description') ?></p>
          </div>
          <div class="mastering-layout">
            <div class="mastering-stage">
              <section class="mastering-upload" data-mastering-upload aria-labelledby="masteringUploadTitle">
                <div class="mastering-dropzone" data-mastering-dropzone role="button" tabindex="0" aria-labelledby="masteringUploadTitle masteringUploadSubtitle">
                  <input type="file" accept=".wav,.wave,.mp3,.aiff,.aif,audio/wav,audio/x-wav,audio/mpeg,audio/aiff,audio/x-aiff" data-mastering-file>
                  <div class="mastering-dropzone__content">
                    <div class="mastering-dropzone__icon" aria-hidden="true">
                      <svg width="36" height="36" viewBox="0 0 48 48" fill="none" stroke="currentColor" stroke-width="2.2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M24 6v24" />
                        <path d="M14 18 24 6 34 18" />
                        <path d="M10 30v6a6 6 0 0 0 6 6h16a6 6 0 0 0 6-6v-6" />
                      </svg>
                    </div>
                    <h3 class="mastering-dropzone__title" id="masteringUploadTitle"><?= __e('dashboard.mastering_modal.dropzone.title') ?></h3>
                    <p class="mastering-dropzone__subtitle" id="masteringUploadSubtitle"><?= __e('dashboard.mastering_modal.dropzone.subtitle') ?></p>
                    <p class="mastering-dropzone__hint"><?= __e('dashboard.mastering_modal.dropzone.hint') ?></p>
                    <span class="mastering-dropzone__button">
                      <svg class="mastering-icon mastering-icon--upload" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                        <path d="M12 4v10" />
                        <path d="M7.5 9.5 12 5l4.5 4.5" />
                        <path d="M5 18h14" />
                      </svg>
                      <span><?= __e('dashboard.mastering_modal.dropzone.button') ?></span>
                    </span>
                  </div>
                </div>
              </section>
              <section class="mastering-analysis" data-mastering-analysis hidden aria-hidden="true">
                <div class="mastering-analysis__header">
                  <h3 class="mastering-analysis__title"><?= __e('dashboard.mastering_modal.analysis.title') ?></h3>
                  <p class="mastering-status" data-mastering-status><?= __e('dashboard.mastering_modal.status.idle') ?></p>
                </div>
                <div class="mastering-progress" data-mastering-progress aria-hidden="true">
                  <div class="mastering-progress__visual" data-mastering-visualizer>
                    <span class="mastering-progress__bar"></span>
                    <span class="mastering-progress__bar"></span>
                    <span class="mastering-progress__bar"></span>
                    <span class="mastering-progress__bar"></span>
                    <span class="mastering-progress__bar"></span>
                  </div>
                  <p class="mastering-progress__label" data-mastering-progress-label><?= __e('dashboard.mastering_modal.processing.uploading') ?></p>
                </div>
              </section>
              <section class="mastering-preview" data-mastering-preview hidden aria-hidden="true">
                <div class="mastering-preview__header">
                  <div class="mastering-track-meta">
                    <h3 data-mastering-track-name><?= __e('dashboard.mastering_modal.dropzone.title') ?></h3>
                    <span data-mastering-track-duration><?= __e('dashboard.mastering_modal.player.duration_placeholder') ?></span>
                  </div>
                  <button type="button" class="mastering-new-file" data-mastering-new-file>
                    <svg class="mastering-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
                      <path d="M12 5v14" />
                      <path d="M5 12h14" />
                    </svg>
                    <span><?= __e('dashboard.mastering_modal.actions.new_file') ?></span>
                  </button>
                </div>
                <p class="mastering-player__subtitle"><?= __e('dashboard.mastering_modal.player.subtitle') ?></p>
                <div class="mastering-player" data-mastering-player>
                  <div class="mastering-waveform-wrapper" aria-hidden="true">
                    <canvas class="mastering-waveform" data-mastering-waveform></canvas>
                    <span class="mastering-playhead" data-mastering-playhead></span>
                  </div>
                  <div class="mastering-player__controls">
                    <button type="button" class="mastering-player__button" data-mastering-play aria-label="<?= __e('dashboard.mastering_modal.player.listen_master') ?>">
                      <svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                        <path d="M5 3.5v17l15-8.5-15-8.5Z" />
                      </svg>
                    </button>
                    <div class="mastering-time">
                      <span data-mastering-current-time><?= __e('dashboard.mastering_modal.player.duration_placeholder') ?></span>
                      <span>/</span>
                      <span data-mastering-total-time><?= __e('dashboard.mastering_modal.player.duration_placeholder') ?></span>
                    </div>
                    <button type="button" class="mastering-toggle" data-mastering-toggle-original aria-pressed="false">
                      <?= __e('dashboard.mastering_modal.player.listen_original') ?>
                    </button>
                    <button type="button" class="mastering-toggle" data-mastering-mono aria-pressed="false">
                      <?= __e('dashboard.mastering_modal.controls.mono') ?>
                    </button>
                  </div>
                </div>
                <audio class="visually-hidden" preload="metadata" data-mastering-audio aria-label="<?= __e('dashboard.mastering_modal.player.listen_master') ?>"></audio>
                <div class="mastering-presets">
                  <div class="mastering-presets__header">
                    <h3><?= __e('dashboard.mastering_modal.player.title') ?></h3>
                    <p><?= __e('dashboard.mastering_modal.presets.legend') ?></p>
                  </div>
                  <div class="mastering-presets__grid" role="group" aria-label="<?= __e('dashboard.mastering_modal.player.title') ?>">
                    <button type="button" class="mastering-preset" data-mastering-preset="original" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.reference') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.original') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset is-active" data-mastering-preset="radio" aria-pressed="true">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.impact') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.radio') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="hiphop" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.bounce') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.hiphop') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="electro" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.spark') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.electro') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="edm" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.energy') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.edm') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="dance" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.groove') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.dance') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="festival" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.horizon') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.festival') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="warm" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.analog') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.warm') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="spatial" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.air') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.spatial') ?></strong>
                    </button>
                    <button type="button" class="mastering-preset" data-mastering-preset="custom" aria-pressed="false">
                      <span><?= __e('dashboard.mastering_modal.presets.categories.manual') ?></span>
                      <strong><?= __e('dashboard.mastering_modal.presets.custom') ?></strong>
                    </button>
                  </div>
                </div>
                <div class="mastering-visualizer" data-mastering-visualizer-section>
                  <div class="mastering-visualizer__header">
                    <h3><?= __e('dashboard.mastering_modal.visualizer.title') ?></h3>
                    <p><?= __e('dashboard.mastering_modal.visualizer.subtitle') ?></p>
                    <div class="mastering-visualizer__toggles" role="group" aria-label="<?= __e('dashboard.mastering_modal.visualizer.title') ?>">
                      <button
                        type="button"
                        class="mastering-visualizer__toggle is-active"
                        data-mastering-visualizer-toggle="oscilloscope"
                        aria-pressed="true"
                      >
                        <?= __e('dashboard.mastering_modal.visualizer.waveform') ?>
                      </button>
                      <button
                        type="button"
                        class="mastering-visualizer__toggle is-active"
                        data-mastering-visualizer-toggle="spectrum"
                        aria-pressed="true"
                      >
                        <?= __e('dashboard.mastering_modal.visualizer.spectrum') ?>
                      </button>
                      <button
                        type="button"
                        class="mastering-visualizer__toggle is-active"
                        data-mastering-visualizer-toggle="stereo"
                        aria-pressed="true"
                      >
                        <?= __e('dashboard.mastering_modal.controls.width') ?>
                      </button>
                    </div>
                  </div>
                  <div class="mastering-visualizer__grid" data-mastering-visualizer-grid data-visualizer-active-count="3">
                    <div class="mastering-visualizer__card" data-mastering-visualizer-card="oscilloscope" data-visualizer-active="true">
                      <div class="mastering-visualizer__card-title">
                        <span><?= __e('dashboard.mastering_modal.visualizer.waveform') ?></span>
                      </div>
                      <canvas class="mastering-visualizer__canvas" data-mastering-oscilloscope role="img" aria-label="<?= __e('dashboard.mastering_modal.visualizer.waveform') ?>"></canvas>
                    </div>
                    <div class="mastering-visualizer__card" data-mastering-visualizer-card="spectrum" data-visualizer-active="true">
                      <div class="mastering-visualizer__card-title">
                        <span><?= __e('dashboard.mastering_modal.visualizer.spectrum') ?></span>
                      </div>
                      <div class="mastering-visualizer__bars" data-mastering-spectrum role="img" aria-label="<?= __e('dashboard.mastering_modal.visualizer.spectrum') ?>"></div>
                    </div>
                    <div class="mastering-visualizer__card" data-mastering-visualizer-card="stereo" data-visualizer-active="true">
                      <div class="mastering-visualizer__card-title">
                        <span><?= __e('dashboard.mastering_modal.controls.width') ?></span>
                      </div>
                      <canvas
                        class="mastering-visualizer__canvas mastering-visualizer__canvas--stereo"
                        data-mastering-stereo
                        role="img"
                        aria-label="<?= __e('dashboard.mastering_modal.controls.width') ?>"
                      ></canvas>
                    </div>
                  </div>
                </div>
                <div class="mastering-controls">
                  <div class="mastering-controls__header">
                    <h3><?= __e('dashboard.mastering_modal.controls.title') ?></h3>
                    <p><?= __e('dashboard.mastering_modal.controls.subtitle') ?></p>
                  </div>
                  <div class="mastering-control-grid">
                    <div class="mastering-control">
                      <label for="masteringControlPreGain">
                        <?= __e('dashboard.mastering_modal.controls.pre_gain') ?>
                        <span class="mastering-control__value" data-mastering-control-value="preGain">0 dB</span>
                      </label>
                      <input type="range" id="masteringControlPreGain" min="0.5" max="2" step="0.01" value="1" data-mastering-control="preGain">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlThreshold">
                        <?= __e('dashboard.mastering_modal.controls.threshold') ?>
                        <span class="mastering-control__value" data-mastering-control-value="threshold">-24 dB</span>
                      </label>
                      <input type="range" id="masteringControlThreshold" min="-48" max="0" step="1" value="-26" data-mastering-control="threshold">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlRatio">
                        <?= __e('dashboard.mastering_modal.controls.ratio') ?>
                        <span class="mastering-control__value" data-mastering-control-value="ratio">2:1</span>
                      </label>
                      <input type="range" id="masteringControlRatio" min="1" max="8" step="0.1" value="3" data-mastering-control="ratio">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlAttack">
                        <?= __e('dashboard.mastering_modal.controls.attack') ?>
                        <span class="mastering-control__value" data-mastering-control-value="attack">6 ms</span>
                      </label>
                      <input type="range" id="masteringControlAttack" min="1" max="30" step="0.5" value="6" data-mastering-control="attack">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlRelease">
                        <?= __e('dashboard.mastering_modal.controls.release') ?>
                        <span class="mastering-control__value" data-mastering-control-value="release">320 ms</span>
                      </label>
                      <input type="range" id="masteringControlRelease" min="50" max="800" step="10" value="320" data-mastering-control="release">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlLow">
                        <?= __e('dashboard.mastering_modal.controls.low') ?>
                        <span class="mastering-control__value" data-mastering-control-value="low">0 dB</span>
                      </label>
                      <input type="range" id="masteringControlLow" min="-6" max="6" step="0.1" value="0" data-mastering-control="low">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlMid">
                        <?= __e('dashboard.mastering_modal.controls.mid') ?>
                        <span class="mastering-control__value" data-mastering-control-value="mid">0 dB</span>
                      </label>
                      <input type="range" id="masteringControlMid" min="-6" max="6" step="0.1" value="0" data-mastering-control="mid">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlHigh">
                        <?= __e('dashboard.mastering_modal.controls.high') ?>
                        <span class="mastering-control__value" data-mastering-control-value="high">0 dB</span>
                      </label>
                      <input type="range" id="masteringControlHigh" min="-6" max="6" step="0.1" value="0" data-mastering-control="high">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlWidth">
                        <?= __e('dashboard.mastering_modal.controls.width') ?>
                        <span class="mastering-control__value" data-mastering-control-value="width">100%</span>
                      </label>
                      <input type="range" id="masteringControlWidth" min="0" max="200" step="1" value="100" data-mastering-control="width">
                    </div>
                    <div class="mastering-control">
                      <label for="masteringControlOutput">
                        <?= __e('dashboard.mastering_modal.controls.output') ?>
                        <span class="mastering-control__value" data-mastering-control-value="output">0 dB</span>
                      </label>
                      <input type="range" id="masteringControlOutput" min="0.5" max="2" step="0.01" value="1" data-mastering-control="output">
                    </div>
                  </div>
                </div>
              </section>
            </div>
            <aside class="mastering-checkout">
              <h3><?= __e('dashboard.mastering_modal.checkout.title') ?></h3>
              <p class="mastering-checkout__hint"><?= __e($masteringPaymentsEnabled ? 'dashboard.mastering_modal.checkout.hint' : 'dashboard.mastering_modal.download.hint') ?></p>
              <?php if ($masteringPaymentsEnabled): ?>
                <div class="mastering-checkout__options">
                  <article class="mastering-option">
                    <h4><?= sanitize($masteringSingleLabel) ?></h4>
                    <p><?= __e('dashboard.mastering_modal.checkout.single.description') ?></p>
                    <button type="button" class="mastering-cta" data-mastering-checkout="mastering_single" data-default-label="<?= sanitize($masteringSingleLabel) ?>" disabled><?= sanitize($masteringSingleLabel) ?></button>
                  </article>
                  <article class="mastering-option">
                    <h4><?= sanitize($masteringSubscriptionLabel) ?></h4>
                    <p><?= __e('dashboard.mastering_modal.checkout.subscription.description') ?></p>
                    <button type="button" class="mastering-cta" data-mastering-checkout="mastering_yearly" data-default-label="<?= sanitize($masteringSubscriptionLabel) ?>" disabled><?= sanitize($masteringSubscriptionLabel) ?></button>
                  </article>
                </div>
              <?php else: ?>
                <div class="mastering-download" data-mastering-download-container>
                  <p><?= __e('dashboard.mastering_modal.download.description') ?></p>
                  <button type="button" class="mastering-cta" data-mastering-download data-default-label="<?= sanitize($masteringDownloadLabel) ?>" disabled><?= sanitize($masteringDownloadLabel) ?></button>
                </div>
              <?php endif; ?>
              <p class="mastering-feedback" data-mastering-checkout-feedback role="status" aria-live="polite"></p>
            </aside>
          </div>
        </div>
      </div>
    </div>

    <div class="modal" id="royaltiesModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="royaltiesModalTitle">
      <div class="modal__content royalties-modal" tabindex="-1">
        <button type="button" class="modal__close" data-modal-dismiss>
          <span class="visually-hidden"><?= __e('dashboard.royalties_modal.actions.close') ?></span>
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
            <line x1="18" y1="6" x2="6" y2="18" />
            <line x1="6" y1="6" x2="18" y2="18" />
          </svg>
        </button>
        <div class="modal__inner">
          <div class="royalties-layout">
            <section class="royalties-intro">
              <div class="royalties-badges">
                <span class="royalties-badge royalties-badge--accent">
                  <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                    <path fill="currentColor" d="M12 3.5 13.74 8h4.51l-3.65 2.65L15.35 15 12 12.7 8.65 15l0.75-4.35L5.75 8h4.51Z" />
                  </svg>
                  <?= __e('dashboard.royalties_modal.switch.yearly') ?>
                </span>
                <span class="royalties-badge">
                  <svg viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                    <path fill="currentColor" d="M12 2 3 5.5v5c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12v-5Zm0 2.18 7 2.8v3.52c0 4.35-2.84 8.58-7 9.86-4.16-1.28-7-5.51-7-9.86V6.98Zm-.75 10.57 5.08-5.08-1.41-1.41-3.67 3.67-1.67-1.67-1.41 1.41Z" />
                  </svg>
                  <?= __e('dashboard.royalties_modal.guarantee') ?>
                </span>
              </div>
              <div class="royalties-headline">
                <h2 id="royaltiesModalTitle"><?= __e('dashboard.royalties_modal.headline') ?></h2>
                <p><?= __e('dashboard.royalties_modal.subheadline') ?></p>
              </div>
              <div class="royalties-divider" aria-hidden="true"></div>
              <h3 class="royalties-features-title"><?= __e('dashboard.royalties_modal.features_title') ?></h3>
              <ul class="royalties-feature-grid">
                <?php foreach (($dashboardTranslations['royalties_modal']['features'] ?? []) as $feature): ?>
                  <li class="royalties-feature">
                    <span class="royalties-feature__icon" aria-hidden="true">
                      <svg viewBox="0 0 24 24" focusable="false">
                        <path fill="currentColor" d="M9.55 16.92 5.3 12.67a1.25 1.25 0 0 1 1.77-1.77l2.48 2.48 6.4-6.4a1.25 1.25 0 0 1 1.77 1.77l-7.29 7.29a1.25 1.25 0 0 1-1.77 0Z" />
                      </svg>
                    </span>
                    <p><?= htmlspecialchars((string) $feature, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></p>
                  </li>
                <?php endforeach; ?>
              </ul>
            </section>
            <aside class="royalties-plan">
              <div class="royalties-plan-card" data-plan-container>
                <div class="royalties-plan-header">
                  <span class="royalties-plan-label"><?= __e('dashboard.royalties_modal.switch.label') ?></span>
                  <div class="plan-switch" role="tablist" aria-label="<?= __e('dashboard.royalties_modal.switch.label') ?>">
                    <button type="button" class="is-active" role="tab" aria-selected="true" data-plan-option="monthly">
                      <?= __e('dashboard.royalties_modal.switch.monthly') ?>
                    </button>
                    <button type="button" role="tab" aria-selected="false" data-plan-option="yearly">
                      <?= __e('dashboard.royalties_modal.switch.yearly') ?>
                    </button>
                  </div>
                </div>
                <div class="plan-meta">
                  <div class="plan-meta__pill">
                    <span class="plan-meta__badge" data-plan-label><?= __e('dashboard.royalties_modal.plans.monthly.label') ?></span>
                    <span class="plan-meta__tagline" data-plan-tagline><?= __e('dashboard.royalties_modal.plans.monthly.tagline') ?></span>
                  </div>
                </div>
                <div class="plan-price-block">
                  <div class="plan-pricing">
                    <span class="plan-pricing__currency" data-plan-currency><?= __e('dashboard.royalties_modal.plans.monthly.currency') ?></span>
                    <span class="plan-pricing__amount" data-plan-amount-main><?= __e('dashboard.royalties_modal.plans.monthly.price_main') ?></span>
                    <span class="plan-pricing__amount plan-pricing__amount--decimal" data-plan-amount-decimal><?= __e('dashboard.royalties_modal.plans.monthly.price_decimal') ?></span>
                  </div>
                  <span class="plan-pricing__frequency" data-plan-frequency><?= __e('dashboard.royalties_modal.plans.monthly.frequency') ?></span>
                </div>
                <?php if (!empty($dashboardTranslations['royalties_modal']['plan_highlights'])): ?>
                  <div class="plan-includes">
                    <span class="plan-includes__label"><?= __e('dashboard.royalties_modal.plan_highlights_title') ?></span>
                    <ul class="plan-highlights">
                      <?php foreach (($dashboardTranslations['royalties_modal']['plan_highlights'] ?? []) as $highlight): ?>
                        <li class="plan-highlights__item">
                          <span class="plan-highlights__icon" aria-hidden="true">
                            <svg viewBox="0 0 24 24" focusable="false">
                              <path fill="currentColor" d="M9.55 16.92 5.3 12.67a1.25 1.25 0 0 1 1.77-1.77l2.48 2.48 6.4-6.4a1.25 1.25 0 0 1 1.77 1.77l-7.29 7.29a1.25 1.25 0 0 1-1.77 0Z" />
                            </svg>
                          </span>
                          <span><?= htmlspecialchars((string) $highlight, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></span>
                        </li>
                      <?php endforeach; ?>
                    </ul>
                  </div>
                <?php endif; ?>
                <button type="button" class="plan-cta" data-plan-checkout data-plan="monthly">
                  <?= __e('dashboard.royalties_modal.plans.monthly.cta') ?>
                </button>
                <div class="plan-feedback" data-plan-feedback role="status" aria-live="polite"></div>
                <div class="plan-divider" aria-hidden="true"></div>
                <div class="plan-footer">
                  <p class="plan-note" data-plan-note><?= __e('dashboard.royalties_modal.plans.monthly.note') ?></p>
                  <p class="modal-guarantee"><?= __e('dashboard.royalties_modal.guarantee') ?></p>
                </div>
              </div>
            </aside>
          </div>
        </div>
      </div>
    </div>

    <?php if ($isSuperAdmin): ?>
      <div class="modal" id="adminUserModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="adminUserModalTitle" data-modal-inline="overlay">
        <div class="modal__content admin-user-modal" tabindex="-1" data-user-detail-modal>
          <div class="admin-user-modal__top-bar">
            <button type="button" class="modal__back admin-user-modal__back admin-user-modal__action" data-user-modal-back hidden>
              <span class="visually-hidden"><?= __e('dashboard.admin.login_history.back') ?></span>
              <span aria-hidden="true" class="admin-user-modal__action-content">
                <span class="admin-user-modal__action-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" focusable="false">
                    <polyline points="15 18 9 12 15 6" />
                  </svg>
                </span>
                <span class="admin-user-modal__action-label"><?= __e('dashboard.admin.login_history.back') ?></span>
              </span>
            </button>
            <button type="button" class="modal__close admin-user-modal__action admin-user-modal__action--close" data-modal-dismiss>
              <span class="visually-hidden"><?= __e('dashboard.admin.user_modal.close') ?></span>
              <span aria-hidden="true" class="admin-user-modal__action-content">
                <span class="admin-user-modal__action-icon">
                  <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" focusable="false">
                    <line x1="18" y1="6" x2="6" y2="18" />
                    <line x1="6" y1="6" x2="18" y2="18" />
                  </svg>
                </span>
                <span class="admin-user-modal__action-label"><?= __e('dashboard.admin.user_modal.close') ?></span>
              </span>
            </button>
          </div>
          <div class="admin-user-modal__inner">
            <header class="admin-user-modal__header">
              <div class="admin-user-modal__titles">
                <span class="admin-user-modal__badge" aria-hidden="true"><?= __e('dashboard.admin.user_modal.badge') ?></span>
                <h2 id="adminUserModalTitle"><?= __e('dashboard.admin.user_modal.title') ?></h2>
                <p data-user-modal-subtitle><?= __e('dashboard.admin.user_modal.subtitle', ['date' => '—']) ?></p>
              </div>
              <div class="admin-user-modal__identity">
                <span class="admin-user-modal__name" data-user-modal-name><?= __e('dashboard.admin.user_modal.empty') ?></span>
                <span class="admin-user-modal__email" data-user-modal-email hidden></span>
                <span class="admin-user-modal__id" data-user-modal-id></span>
              </div>
            </header>
            <div class="admin-user-modal__body" data-user-modal-views>
              <div class="admin-user-modal__view" data-user-modal-view="details">
                <div class="admin-user-modal__grid">
                  <div class="admin-user-modal__section">
                    <dl class="admin-user-modal__list">
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.profile') ?></dt>
                        <dd data-user-modal-role><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.language') ?></dt>
                        <dd data-user-modal-language><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.status') ?></dt>
                        <dd data-user-modal-status><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.country') ?></dt>
                        <dd data-user-modal-country><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.phone') ?></dt>
                        <dd data-user-modal-phone><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.address') ?></dt>
                        <dd data-user-modal-address><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.company_type') ?></dt>
                        <dd data-user-modal-company-type><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.company_name') ?></dt>
                        <dd data-user-modal-company-name><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.company_vat') ?></dt>
                        <dd data-user-modal-company-vat><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                    </dl>
                  </div>
                  <div class="admin-user-modal__section">
                    <dl class="admin-user-modal__list">
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.created_at') ?></dt>
                        <dd data-user-modal-created><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.created_ip') ?></dt>
                        <dd data-user-modal-created-ip><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.last_login_at') ?></dt>
                        <dd data-user-modal-last-login><?= __e('dashboard.admin.user_modal.empty') ?></dd>
                      </div>
                      <div class="admin-user-modal__item">
                        <dt><?= __e('dashboard.admin.user_modal.labels.last_login_ip') ?></dt>
                        <dd data-user-modal-last-login-ip>
                          <button type="button" class="admin-ip-button" data-user-modal-logins-trigger hidden disabled>
                            <span class="admin-ip-button__value" data-user-modal-last-login-ip-value><?= __e('dashboard.admin.user_modal.empty') ?></span>
                            <span class="admin-ip-button__label"><?= __e('dashboard.admin.login_history.button_label') ?></span>
                            <span class="admin-ip-button__icon" aria-hidden="true">
                              <svg viewBox="0 0 16 16" width="16" height="16" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M3 6l5 5 5-5" />
                              </svg>
                            </span>
                            <span class="visually-hidden"><?= __e('dashboard.admin.login_history.open_label') ?></span>
                          </button>
                        </dd>
                      </div>
                    </dl>
                  </div>
                </div>
                <p class="admin-user-modal__helper"><?= __e('dashboard.admin.user_modal.helper') ?></p>
              </div>
              <div class="admin-user-modal__view" data-user-modal-view="logins" hidden>
                <div class="login-history-modal">
                  <div class="login-history-modal__inner">
                    <header class="login-history-modal__header">
                      <div class="login-history-modal__titles">
                        <span class="login-history-badge" aria-hidden="true"><?= __e('dashboard.admin.login_history.badge') ?></span>
                        <h2><?= __e('dashboard.admin.login_history.title') ?></h2>
                        <p data-login-history-subtitle><?= __e('dashboard.admin.login_history.subtitle_generic') ?></p>
                      </div>
                    </header>
                    <div class="login-history-modal__body">
                      <p class="login-history-status" data-login-history-status hidden></p>
                      <ul class="login-history-list" data-login-history-list hidden></ul>
                      <div class="login-history-empty" data-login-history-empty hidden><?= __e('dashboard.admin.login_history.empty') ?></div>
                    </div>
                    <footer class="login-history-modal__footer">
                      <p><?= __e('dashboard.admin.login_history.footer') ?></p>
                    </footer>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal" id="translationsModal" role="dialog" aria-modal="false" aria-hidden="true" aria-labelledby="translationsModalTitle" data-scroll-lock="dynamic">
        <div class="modal__content translations-modal" tabindex="-1">
          <button type="button" class="modal__close" data-modal-dismiss>
            <span class="visually-hidden"><?= __e('dashboard.admin.translations.close') ?></span>
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true" focusable="false">
              <line x1="18" y1="6" x2="6" y2="18" />
              <line x1="6" y1="6" x2="18" y2="18" />
            </svg>
          </button>
          <div class="translations-modal__inner">
            <header class="translations-modal__header">
              <div class="translations-modal__titles">
                <h2 id="translationsModalTitle"><?= __e('dashboard.admin.translations.title') ?></h2>
                <p><?= __e('dashboard.admin.translations.description') ?></p>
              </div>
              <div class="translations-modal__search">
                <label class="visually-hidden" for="translationsSearch"><?= __e('dashboard.admin.translations.search_label') ?></label>
                <input type="search" id="translationsSearch" data-translations-search placeholder="<?= __e('dashboard.admin.translations.search_placeholder') ?>" autocomplete="off">
              </div>
            </header>
            <div class="translations-modal__body">
              <div class="translations-modal__loading" data-translations-loading>
                <span class="translations-modal__spinner" aria-hidden="true"></span>
                <span><?= __e('dashboard.admin.translations.loading') ?></span>
              </div>
              <div class="translations-modal__error" data-translations-error hidden>
                <p data-translations-error-message><?= __e('dashboard.admin.translations.error') ?></p>
                <button type="button" data-translations-retry><?= __e('dashboard.admin.translations.retry') ?></button>
              </div>
              <div class="translations-modal__content" data-translations-content hidden>
                <div class="translations-modal__table-container" data-translations-table-container>
                  <table class="translations-table" aria-label="<?= __e('dashboard.admin.translations.table.label') ?>">
                    <thead class="translations-table__head">
                      <tr data-translations-head-row>
                        <th scope="col" class="translations-table__header translations-table__header--key"><?= __e('dashboard.admin.translations.table.key') ?></th>
                      </tr>
                    </thead>
                    <tbody class="translations-table__body" data-translations-table-body></tbody>
                  </table>
                </div>
                <p class="translations-modal__empty" data-translations-empty hidden><?= __e('dashboard.admin.translations.empty') ?></p>
                <div class="translations-pagination" data-translations-pagination hidden>
                  <button type="button" class="translations-pagination__button" data-translations-page="prev" disabled>
                    <span><?= __e('dashboard.admin.translations.pagination.previous') ?></span>
                  </button>
                  <div class="translations-pagination__status" data-translations-pagination-status></div>
                  <button type="button" class="translations-pagination__button" data-translations-page="next" disabled>
                    <span><?= __e('dashboard.admin.translations.pagination.next') ?></span>
                  </button>
                </div>
              </div>
            </div>
            <footer class="translations-modal__footer">
              <div class="translations-modal__feedback" data-translations-feedback role="status" aria-live="polite"></div>
              <div class="translations-modal__buttons">
                <button type="button" class="translations-modal__secondary" data-modal-dismiss><?= __e('dashboard.admin.translations.close') ?></button>
                <button type="button" class="translations-modal__primary" data-translations-save disabled><?= __e('dashboard.admin.translations.save') ?></button>
              </div>
            </footer>
          </div>
        </div>
      </div>
<?php if ($isAuraDesign): ?>
      <div class="dashboard-page-source" data-dashboard-page-wrapper="admin" hidden>
<?php endif; ?>
      <section class="admin-section" aria-labelledby="adminSectionTitle"<?php if ($isAuraDesign): ?> data-dashboard-page-source="admin" hidden<?php endif; ?>>
        <header>
          <h2 id="adminSectionTitle"><?= __e('dashboard.admin.title') ?></h2>
          <p><?= __e('dashboard.admin.subtitle') ?></p>
        </header>
        <div class="admin-tabs" role="tablist" aria-label="<?= __e('dashboard.admin.title') ?>">
          <button type="button" class="admin-tab is-active" role="tab" aria-selected="true" aria-controls="adminUsersPanel" id="adminUsersTab" data-admin-tab="users">
            <?= __e('dashboard.admin.tabs.users') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminPaymentsPanel" id="adminPaymentsTab" data-admin-tab="payments" tabindex="-1">
            <?= __e('dashboard.admin.tabs.payments') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminNotificationsPanel" id="adminNotificationsTab" data-admin-tab="notifications" tabindex="-1">
            <?= __e('dashboard.admin.tabs.notifications') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminNewsletterPanel" id="adminNewsletterTab" data-admin-tab="newsletter" tabindex="-1">
            <?= __e('dashboard.admin.tabs.newsletter') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminAiPanel" id="adminAiTab" data-admin-tab="ai" tabindex="-1">
            <?= __e('dashboard.admin.tabs.ai') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminDesignPanel" id="adminDesignTab" data-admin-tab="design" tabindex="-1">
            <?= __e('dashboard.admin.tabs.design') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminConfigurationPanel" id="adminConfigurationTab" data-admin-tab="configuration" tabindex="-1">
            <?= __e('dashboard.admin.tabs.configuration') ?>
          </button>
          <button type="button" class="admin-tab" role="tab" aria-selected="false" aria-controls="adminDistributionPanel" id="adminDistributionTab" data-admin-tab="distribution" tabindex="-1">
            <?= __e('dashboard.admin.tabs.distribution') ?>
          </button>
        </div>
        <div class="admin-panels">
          <section class="admin-panel is-active" id="adminUsersPanel" role="tabpanel" aria-labelledby="adminUsersTab" data-admin-panel="users">
            <div class="admin-feedback" id="adminFeedback" role="status" aria-live="polite"></div>
            <div class="admin-table-wrapper" role="region" aria-live="polite" aria-busy="false">
              <table class="admin-table">
                <thead>
                  <tr>
                    <?php foreach ($adminTableHeaders as $headerKey => $headerLabel): ?>
                      <?php $headerAttribute = htmlspecialchars((string) $headerKey, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8'); ?>
                      <th scope="col" data-column="<?= $headerAttribute ?>"><?= __e('dashboard.admin.table.headers.' . $headerKey) ?></th>
                    <?php endforeach; ?>
                  </tr>
                </thead>
                <tbody>
                  <?php if (!$adminUsers): ?>
                    <tr>
                      <td colspan="<?= max(1, count($adminTableHeaders)) ?>"><?= __e('dashboard.admin.table.empty') ?></td>
                    </tr>
                  <?php else: ?>
                    <?php foreach ($adminUsers as $adminUser): ?>
                      <tr>
                        <td data-column="id"><?= (int) $adminUser['id'] ?></td>
                        <td data-column="name">
                          <?php
                            $detailButtonLabel = __('dashboard.admin.user_modal.open');
                            $detailButtonAria = __('dashboard.admin.user_modal.open_aria', [
                                'name' => $adminUser['display_name'] !== '' ? $adminUser['display_name'] : ($adminUser['email'] ?? '')
                            ]);
                          ?>
                          <button
                            type="button"
                            class="admin-name-button"
                            data-user-detail-trigger
                            data-user-id="<?= (int) $adminUser['id'] ?>"
                            data-user-email="<?= sanitize($adminUser['email']) ?>"
                            data-user-name="<?= sanitize($adminUser['display_name']) ?>"
                            data-user-role="<?= sanitize($adminUser['role_label']) ?>"
                            data-user-language-code="<?= sanitize($adminUser['language_code']) ?>"
                            data-user-language="<?= sanitize($adminUser['language_label']) ?>"
                            data-user-country="<?= sanitize($adminUser['country_label']) ?>"
                            data-user-created-at="<?= sanitize($adminUser['created_at']) ?>"
                            data-user-created-at-raw="<?= sanitize($adminUser['created_at_raw']) ?>"
                            data-user-created-ip="<?= sanitize($adminUser['created_ip_raw']) ?>"
                            data-user-created-ip-label="<?= sanitize($adminUser['created_ip']) ?>"
                            data-user-last-login-at="<?= sanitize($adminUser['last_login_at']) ?>"
                            data-user-last-login-at-raw="<?= sanitize($adminUser['last_login_at_raw']) ?>"
                            data-user-last-login-ip="<?= sanitize($adminUser['last_login_ip_raw']) ?>"
                            data-user-last-login-ip-label="<?= sanitize($adminUser['last_login_ip']) ?>"
                            data-user-status-label="<?= sanitize($adminUser['status_label']) ?>"
                            data-user-address-line1="<?= sanitize($adminUser['address_line1']) ?>"
                            data-user-address-line2="<?= sanitize($adminUser['address_line2']) ?>"
                            data-user-postal-code="<?= sanitize($adminUser['postal_code']) ?>"
                            data-user-city="<?= sanitize($adminUser['city']) ?>"
                            data-user-phone="<?= sanitize($adminUser['phone_number']) ?>"
                            data-user-company-type="<?= sanitize($adminUser['company_type']) ?>"
                            data-user-company-type-label="<?= sanitize($adminUser['company_type_label']) ?>"
                            data-user-company-name="<?= sanitize($adminUser['company_name']) ?>"
                            data-user-company-vat="<?= sanitize($adminUser['company_vat']) ?>"
                            aria-label="<?= sanitize($detailButtonAria) ?>"
                            title="<?= sanitize($detailButtonAria) ?>"
                          >
                            <span class="admin-name-button__primary"><?= sanitize($adminUser['full_name'] !== '' ? $adminUser['full_name'] : '—') ?></span>
                            <span class="admin-name-button__meta"><?= sanitize($detailButtonLabel) ?></span>
                          </button>
                        </td>
                        <td data-column="email">
                          <span class="admin-email" title="<?= sanitize($adminUser['email']) ?>"><?= sanitize($adminUser['email']) ?></span>
                        </td>
                        <td data-column="created_at" title="<?= sanitize($adminUser['created_at']) ?>"><?= sanitize($adminUser['created_at']) ?></td>
                        <td data-column="last_login_at" title="<?= sanitize($adminUser['last_login_at']) ?>"><?= sanitize($adminUser['last_login_at']) ?></td>
                        <td data-column="status">
                          <div class="status-stack">
                            <span class="status-pill<?= $adminUser['is_verified'] ? ' status-pill--success' : '' ?>">
                              <?= $adminUser['is_verified'] ? __e('dashboard.admin.table.status.verified') : __e('dashboard.admin.table.status.pending') ?>
                            </span>
                            <?php if ($adminUser['is_blocked']): ?>
                              <span class="status-pill status-pill--danger"><?= __e('dashboard.admin.table.status.blocked') ?></span>
                            <?php endif; ?>
                            <?php if ($adminUser['is_super_admin']): ?>
                              <span class="status-pill"><?= __e('dashboard.admin.table.status.super_admin') ?></span>
                            <?php endif; ?>
                          </div>
                        </td>
                        <td data-column="actions">
                          <?php if ((int) $adminUser['id'] === (int) $user['id']): ?>
                            <span class="status-note"><?= __e('dashboard.admin.table.actions.self') ?></span>
                          <?php else: ?>
                            <div class="admin-actions" data-user-id="<?= (int) $adminUser['id'] ?>" data-is-blocked="<?= $adminUser['is_blocked'] ? '1' : '0' ?>">
                              <button type="button" class="admin-action admin-action--impersonate" data-action="impersonate">
                                <?= __e('dashboard.admin.table.actions.impersonate') ?>
                              </button>
                              <button type="button" class="admin-action admin-action--toggle" data-action="<?= $adminUser['is_blocked'] ? 'unblock' : 'block' ?>">
                                <?= $adminUser['is_blocked'] ? __e('dashboard.admin.table.actions.unblock') : __e('dashboard.admin.table.actions.block') ?>
                              </button>
                              <button type="button" class="admin-action admin-action--delete" data-action="delete"><?= __e('dashboard.admin.table.actions.delete') ?></button>
                            </div>
                          <?php endif; ?>
                        </td>
                      </tr>
                    <?php endforeach; ?>
                  <?php endif; ?>
                </tbody>
              </table>
            </div>
          </section>
          <section class="admin-panel" id="adminPaymentsPanel" role="tabpanel" aria-labelledby="adminPaymentsTab" data-admin-panel="payments">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.stripe.title') ?></h3>
                <p><?= __e('dashboard.admin.stripe.description') ?></p>
                <form id="stripeSettingsForm" data-stripe-settings>
                  <label for="stripeSecretKey"><?= __e('dashboard.admin.stripe.secret_label') ?></label>
                  <input type="password" id="stripeSecretKey" name="stripe_secret_key" value="<?= htmlspecialchars($stripeSecretKey, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="off" placeholder="sk_live_...">
                  <label for="stripePublishableKey"><?= __e('dashboard.admin.stripe.publishable_label') ?></label>
                  <input type="text" id="stripePublishableKey" name="stripe_publishable_key" value="<?= htmlspecialchars($stripePublishableKey, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="off" placeholder="pk_live_...">
                  <small><?= __e('dashboard.admin.stripe.helper') ?></small>
                  <div class="admin-monetization">
                    <section class="admin-monetization__group admin-monetization__group--currencies">
                      <div class="admin-monetization__group-header">
                        <h4><?= __e('dashboard.admin.monetization.currency_section_title') ?></h4>
                        <p><?= __e('dashboard.admin.monetization.currency_section_description') ?></p>
                      </div>
                      <div class="admin-monetization__field admin-monetization__field--full">
                        <label for="defaultCurrency"><?= __e('dashboard.admin.monetization.currency_default_label') ?></label>
                        <div class="admin-monetization__input admin-monetization__input--select">
                          <select id="defaultCurrency" name="currency_default" data-enhanced-select>
                            <?php foreach ($currencyOptionLabels as $code => $label): ?>
                              <option value="<?= htmlspecialchars($code, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-symbol="<?= sanitize(currency_symbol($code)) ?>"<?= $code === $defaultCurrencyCode ? ' selected' : '' ?>><?= htmlspecialchars($label, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></option>
                            <?php endforeach; ?>
                          </select>
                        </div>
                        <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.currency_default_helper') ?></small>
                      </div>
                      <label class="admin-toggle admin-toggle--sub admin-monetization__toggle">
                        <input type="checkbox" id="currencyAllowChoice" name="currency_allow_user_choice" value="1"<?= $currencyAllowUserChoice ? ' checked' : '' ?>>
                        <span class="admin-toggle__control" aria-hidden="true"></span>
                        <span class="admin-toggle__label"><?= __e('dashboard.admin.monetization.currency_allow_label') ?></span>
                      </label>
                      <div class="admin-monetization__field admin-monetization__field--full">
                        <p class="admin-monetization__legend"><?= __e('dashboard.admin.monetization.currency_enabled_label') ?></p>
                        <div
                          class="admin-monetization__options admin-monetization__options--currencies"
                          data-currency-options
                          data-currency-enabled="<?= $currencyAllowUserChoice ? '1' : '0' ?>"
                        >
                          <?php foreach ($currencyOptionLabels as $code => $label): ?>
                            <?php
                              $currencyId = 'currencyToggle_' . preg_replace('/[^a-z0-9_-]/i', '_', (string) $code);
                              $isDefaultCurrency = $code === $defaultCurrencyCode;
                              $isCurrencyEnabled = in_array($code, $currencyEnabledList, true);
                            ?>
                            <label class="admin-toggle admin-toggle--sub" data-currency-toggle-label>
                              <input
                                type="checkbox"
                                id="<?= htmlspecialchars($currencyId, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                                name="currency_enabled[]"
                                value="<?= htmlspecialchars($code, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                                data-currency-toggle
                                <?= ($isCurrencyEnabled || $isDefaultCurrency) ? 'checked' : '' ?>
                                <?= (!$currencyAllowUserChoice || $isDefaultCurrency) ? 'disabled' : '' ?>
                              >
                              <span class="admin-toggle__control" aria-hidden="true"></span>
                              <span class="admin-toggle__label"><?= htmlspecialchars($label, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?></span>
                            </label>
                          <?php endforeach; ?>
                        </div>
                        <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.currency_enabled_helper') ?></small>
                      </div>
                    </section>
                    <section class="admin-monetization__group admin-monetization__group--mastering">
                      <div class="admin-monetization__group-header">
                        <h4><?= __e('dashboard.admin.monetization.title') ?></h4>
                        <p><?= __e('dashboard.admin.monetization.description') ?></p>
                      </div>
                      <label class="admin-toggle">
                        <input type="checkbox" id="masteringPaymentsEnabled" name="mastering_payments_enabled" value="1"<?= $masteringPaymentsEnabled ? ' checked' : '' ?>>
                        <span class="admin-toggle__control" aria-hidden="true"></span>
                        <span class="admin-toggle__label"><?= __e('dashboard.admin.monetization.payments_label') ?></span>
                      </label>
                      <p class="admin-monetization__state" data-monetization-state data-state-enabled="<?= __e('dashboard.admin.monetization.payments_enabled') ?>" data-state-disabled="<?= __e('dashboard.admin.monetization.payments_disabled') ?>"><?= __e($masteringPaymentsEnabled ? 'dashboard.admin.monetization.payments_enabled' : 'dashboard.admin.monetization.payments_disabled') ?></p>
                      <div class="admin-monetization__grid" data-monetization-grid="<?= $masteringPaymentsEnabled ? 'enabled' : 'disabled' ?>">
                        <div class="admin-monetization__field" data-monetization-field>
                          <label for="masteringPriceSingle"><?= __e('dashboard.admin.monetization.single_label') ?></label>
                          <div class="admin-monetization__input">
                            <input type="number" id="masteringPriceSingle" name="mastering_price_single" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($masteringSinglePriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-monetization-input<?= $masteringPaymentsEnabled ? '' : ' disabled' ?>>
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.single_hint') ?></small>
                        </div>
                        <div class="admin-monetization__field" data-monetization-field>
                          <label for="masteringPriceYearly"><?= __e('dashboard.admin.monetization.yearly_label') ?></label>
                          <div class="admin-monetization__input">
                            <input type="number" id="masteringPriceYearly" name="mastering_price_yearly" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($masteringYearlyPriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-monetization-input<?= $masteringPaymentsEnabled ? '' : ' disabled' ?>>
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.yearly_hint') ?></small>
                        </div>
                      </div>
                    </section>
                    <section class="admin-monetization__group admin-monetization__group--express">
                      <div class="admin-monetization__group-header">
                        <h4><?= __e('dashboard.admin.monetization.express_title') ?></h4>
                        <p><?= __e('dashboard.admin.monetization.express_description') ?></p>
                      </div>
                      <div class="admin-monetization__grid" data-monetization-grid="enabled">
                        <div class="admin-monetization__field" data-monetization-field>
                          <label for="expressPriceSingle"><?= __e('dashboard.admin.monetization.express_single_label') ?></label>
                          <div class="admin-monetization__input">
                            <input type="number" id="expressPriceSingle" name="express_delivery_price_single" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($expressSinglePriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-monetization-input>
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.express_single_helper') ?></small>
                        </div>
                        <div class="admin-monetization__field" data-monetization-field>
                          <label for="expressPriceEp"><?= __e('dashboard.admin.monetization.express_ep_label') ?></label>
                          <div class="admin-monetization__input">
                            <input type="number" id="expressPriceEp" name="express_delivery_price_ep" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($expressEpPriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-monetization-input>
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.express_ep_helper') ?></small>
                        </div>
                        <div class="admin-monetization__field" data-monetization-field>
                          <label for="expressPriceAlbum"><?= __e('dashboard.admin.monetization.express_album_label') ?></label>
                          <div class="admin-monetization__input">
                            <input type="number" id="expressPriceAlbum" name="express_delivery_price_album" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($expressAlbumPriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-monetization-input>
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.express_album_helper') ?></small>
                        </div>
                      </div>
                    </section>
                    <section class="admin-monetization__group admin-monetization__group--publishing">
                      <div class="admin-monetization__group-header">
                        <h4><?= __e('dashboard.admin.monetization.publishing_title') ?></h4>
                        <p><?= __e('dashboard.admin.monetization.publishing_description') ?></p>
                      </div>
                      <div class="admin-monetization__grid" data-monetization-grid="enabled">
                        <div class="admin-monetization__field admin-monetization__field--full">
                          <label for="publishingSetupPrice"><?= __e('dashboard.admin.monetization.publishing_price_label') ?></label>
                          <div class="admin-monetization__input">
                            <input
                              type="number"
                              id="publishingSetupPrice"
                              name="publishing_setup_price"
                              step="0.01"
                              min="0"
                              inputmode="decimal"
                              value="<?= htmlspecialchars($publishingSetupPriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                            >
                            <span class="admin-monetization__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-monetization__helper"><?= __e('dashboard.admin.monetization.publishing_price_helper') ?></small>
                        </div>
                      </div>
                    </section>
                  </div>
                  <div class="admin-cloud">
                    <div class="admin-cloud__header">
                      <h4><?= __e('dashboard.admin.cloud_storage.title') ?></h4>
                      <p><?= __e('dashboard.admin.cloud_storage.description') ?></p>
                    </div>
                    <section class="admin-cloud__section">
                      <div class="admin-cloud__section-header">
                        <div>
                          <h5><?= __e('dashboard.admin.cloud_storage.usage.title') ?></h5>
                          <p><?= __e('dashboard.admin.cloud_storage.usage.description') ?></p>
                        </div>
                        <label class="admin-toggle">
                          <input type="checkbox" id="cloudUsageEnabled" name="cloud_storage_usage_enabled" value="1"<?= $cloudUsageEnabled ? ' checked' : '' ?>>
                          <span class="admin-toggle__control" aria-hidden="true"></span>
                          <span class="admin-toggle__label"><?= __e('dashboard.admin.cloud_storage.usage.toggle_label') ?></span>
                        </label>
                      </div>
                      <p class="admin-cloud__state" data-cloud-usage-state data-state-enabled="<?= __e('dashboard.admin.cloud_storage.usage.state_enabled') ?>" data-state-disabled="<?= __e('dashboard.admin.cloud_storage.usage.state_disabled') ?>"><?= __e($cloudUsageEnabled ? 'dashboard.admin.cloud_storage.usage.state_enabled' : 'dashboard.admin.cloud_storage.usage.state_disabled') ?></p>
                      <div class="admin-cloud__grid" data-cloud-usage-grid="<?= $cloudUsageEnabled ? 'enabled' : 'disabled' ?>" data-cloud-grid="<?= $cloudUsageEnabled ? 'enabled' : 'disabled' ?>">
                        <div class="admin-cloud__field">
                          <label for="cloudPricePerMb"><?= __e('dashboard.admin.cloud_storage.usage.price_mb_label') ?></label>
                          <div class="admin-cloud__input">
                            <input type="number" id="cloudPricePerMb" name="cloud_storage_price_per_mb" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($cloudPricePerMbInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-cloud-usage-input<?= $cloudUsageEnabled ? '' : ' disabled' ?>>
                            <span class="admin-cloud__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-cloud__helper"><?= __e('dashboard.admin.cloud_storage.usage.price_mb_helper') ?></small>
                        </div>
                        <div class="admin-cloud__field">
                          <label for="cloudPricePerFile"><?= __e('dashboard.admin.cloud_storage.usage.price_file_label') ?></label>
                          <div class="admin-cloud__input">
                            <input type="number" id="cloudPricePerFile" name="cloud_storage_price_per_file" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($cloudPricePerFileInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-cloud-usage-input<?= $cloudUsageEnabled ? '' : ' disabled' ?>>
                            <span class="admin-cloud__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-cloud__helper"><?= __e('dashboard.admin.cloud_storage.usage.price_file_helper') ?></small>
                        </div>
                      </div>
                    </section>
                    <section class="admin-cloud__section">
                      <div class="admin-cloud__section-header">
                        <div>
                          <h5><?= __e('dashboard.admin.cloud_storage.subscription.title') ?></h5>
                          <p><?= __e('dashboard.admin.cloud_storage.subscription.description') ?></p>
                        </div>
                        <label class="admin-toggle">
                          <input type="checkbox" id="cloudSubscriptionEnabled" name="cloud_storage_subscription_enabled" value="1"<?= $cloudSubscriptionEnabled ? ' checked' : '' ?>>
                          <span class="admin-toggle__control" aria-hidden="true"></span>
                          <span class="admin-toggle__label"><?= __e('dashboard.admin.cloud_storage.subscription.toggle_label') ?></span>
                        </label>
                      </div>
                      <p class="admin-cloud__state" data-cloud-subscription-state data-state-enabled="<?= __e('dashboard.admin.cloud_storage.subscription.state_enabled') ?>" data-state-disabled="<?= __e('dashboard.admin.cloud_storage.subscription.state_disabled') ?>"><?= __e($cloudSubscriptionEnabled ? 'dashboard.admin.cloud_storage.subscription.state_enabled' : 'dashboard.admin.cloud_storage.subscription.state_disabled') ?></p>
                      <div class="admin-cloud__grid" data-cloud-subscription-grid="<?= $cloudSubscriptionEnabled ? 'enabled' : 'disabled' ?>" data-cloud-grid="<?= $cloudSubscriptionEnabled ? 'enabled' : 'disabled' ?>">
                        <div class="admin-cloud__field">
                          <label for="cloudSubscriptionPrice"><?= __e('dashboard.admin.cloud_storage.subscription.price_label') ?></label>
                          <div class="admin-cloud__input">
                            <input type="number" id="cloudSubscriptionPrice" name="cloud_storage_subscription_price" step="0.01" min="0" inputmode="decimal" value="<?= htmlspecialchars($cloudSubscriptionPriceInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-cloud-subscription-input<?= $cloudSubscriptionEnabled ? '' : ' disabled' ?>>
                            <span class="admin-cloud__suffix" data-default-currency-symbol><?= sanitize($defaultCurrencySymbol) ?></span>
                          </div>
                          <small class="admin-cloud__helper"><?= __e('dashboard.admin.cloud_storage.subscription.price_helper') ?></small>
                        </div>
                        <div class="admin-cloud__field">
                          <label for="cloudSubscriptionStorage"><?= __e('dashboard.admin.cloud_storage.subscription.storage_label') ?></label>
                          <div class="admin-cloud__input admin-cloud__input--plain">
                            <input type="number" id="cloudSubscriptionStorage" name="cloud_storage_subscription_storage_mb" step="1" min="0" inputmode="numeric" value="<?= htmlspecialchars($cloudSubscriptionStorageInputValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" data-cloud-subscription-input<?= $cloudSubscriptionEnabled ? '' : ' disabled' ?>>
                            <span class="admin-cloud__suffix"><?= __e('dashboard.admin.cloud_storage.subscription.storage_suffix') ?></span>
                          </div>
                          <small class="admin-cloud__helper"><?= __e('dashboard.admin.cloud_storage.subscription.storage_helper') ?></small>
                        </div>
                      </div>
                    </section>
                  </div>
                  <button type="submit" id="stripeSettingsSubmit"><?= __e('dashboard.admin.stripe.submit') ?></button>
                  <div class="plan-feedback" id="stripeSettingsFeedback" role="status" aria-live="polite"></div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminNotificationsPanel" role="tabpanel" aria-labelledby="adminNotificationsTab" data-admin-panel="notifications">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.notifications.title') ?></h3>
                <p><?= __e('dashboard.admin.notifications.description') ?></p>
                <form id="notificationSettingsForm" data-notification-settings>
                  <label class="admin-toggle">
                    <input type="checkbox" id="dashboardNotificationsEnabled" name="notifications_enabled" value="1"<?= $notificationsEnabled ? ' checked' : '' ?>>
                    <span class="admin-toggle__control" aria-hidden="true"></span>
                    <span class="admin-toggle__label"><?= __e('dashboard.admin.notifications.display_label') ?></span>
                  </label>
                  <p class="admin-notifications__helper" data-notification-display-helper><?= __e('dashboard.admin.notifications.display_helper') ?></p>
                  <div class="admin-notifications__group" data-notification-automations data-notifications-enabled="<?= $notificationsEnabled ? '1' : '0' ?>">
                    <div class="admin-notifications__header">
                      <h4><?= __e('dashboard.admin.notifications.automations_title') ?></h4>
                      <p><?= __e('dashboard.admin.notifications.automations_description') ?></p>
                    </div>
                    <label class="admin-toggle admin-toggle--sub">
                      <input type="checkbox" id="dashboardNotificationsProfileReminder" name="automatic_profile_completion" value="1"<?= $notificationsProfileReminderEnabled ? ' checked' : '' ?><?= $notificationsEnabled ? '' : ' disabled' ?>>
                      <span class="admin-toggle__control" aria-hidden="true"></span>
                      <span class="admin-toggle__label"><?= __e('dashboard.admin.notifications.profile_incomplete_label') ?></span>
                    </label>
                    <p class="admin-notifications__helper" data-notification-helper="profile-incomplete"><?= __e('dashboard.admin.notifications.profile_incomplete_helper') ?></p>
                  </div>
                  <button type="submit" id="notificationSettingsSubmit"><?= __e('dashboard.admin.notifications.submit') ?></button>
                  <div class="plan-feedback" id="notificationSettingsFeedback" role="status" aria-live="polite"></div>
                </form>
                <form id="notificationBroadcastForm" data-notification-broadcast novalidate>
                  <div class="admin-broadcast">
                    <div class="admin-broadcast__intro">
                      <h4><?= __e('dashboard.admin.notifications.broadcast.title') ?></h4>
                      <p><?= __e('dashboard.admin.notifications.broadcast.description') ?></p>
                      <p class="admin-notifications__helper"><?= __e('dashboard.admin.notifications.broadcast.helper') ?></p>
                    </div>
                    <div class="admin-broadcast__link">
                      <label for="notificationBroadcastLink"><?= __e('dashboard.admin.notifications.broadcast.link_label') ?></label>
                      <input type="url" id="notificationBroadcastLink" name="link_url" placeholder="<?= __e('dashboard.admin.notifications.broadcast.link_placeholder') ?>" data-broadcast-link autocomplete="off">
                      <small><?= __e('dashboard.admin.notifications.broadcast.link_helper') ?></small>
                    </div>
                    <div class="admin-broadcast__translations">
                      <div class="admin-broadcast__translations-header">
                        <h5><?= __e('dashboard.admin.notifications.broadcast.translations_label') ?></h5>
                        <p><?= __e('dashboard.admin.notifications.broadcast.translations_helper') ?></p>
                      </div>
                      <div class="admin-broadcast__locales">
                        <?php
                          $orderedBroadcastLocales = array_unique(array_merge(
                              ['en', 'fr'],
                              array_keys($languageOptions)
                          ));
                        ?>
                        <?php foreach ($orderedBroadcastLocales as $code): ?>
                          <?php if (!isset($languageOptions[$code])) { continue; } ?>
                          <?php $info = $languageOptions[$code]; ?>
                          <?php
                            $languageName = trim((string) ($info['native'] ?? $info['label'] ?? strtoupper($code)));
                            if ($languageName === '') {
                                $languageName = strtoupper($code);
                            }
                            $languageCode = strtoupper($code);
                            $titleId = 'broadcastTitle_' . $code;
                            $messageId = 'broadcastMessage_' . $code;
                            $actionId = 'broadcastAction_' . $code;
                            $openLocale = $code === 'en' || ($code !== 'fr' && $code === $userNotificationLocale);
                          ?>
                          <details class="admin-broadcast__locale" data-broadcast-locale data-locale="<?= sanitize($code) ?>"<?= $openLocale ? ' open' : '' ?>>
                            <summary>
                              <span class="admin-broadcast__locale-label">
                                <span class="admin-broadcast__locale-name"><?= sanitize($languageName) ?></span>
                                <span class="admin-broadcast__locale-code"><?= sanitize($languageCode) ?></span>
                              </span>
                            </summary>
                            <div class="admin-broadcast__locale-content">
                              <div class="admin-broadcast__field">
                                <label for="<?= sanitize($titleId) ?>"><?= __e('dashboard.admin.notifications.broadcast.fields.title') ?></label>
                                <input type="text" id="<?= sanitize($titleId) ?>" name="translations[<?= sanitize($code) ?>][title]" data-broadcast-title lang="<?= sanitize($code) ?>" autocomplete="off">
                              </div>
                              <div class="admin-broadcast__field">
                                <label for="<?= sanitize($messageId) ?>"><?= __e('dashboard.admin.notifications.broadcast.fields.message') ?></label>
                                <textarea id="<?= sanitize($messageId) ?>" name="translations[<?= sanitize($code) ?>][message]" data-broadcast-message lang="<?= sanitize($code) ?>"></textarea>
                              </div>
                              <div class="admin-broadcast__field">
                                <label for="<?= sanitize($actionId) ?>"><?= __e('dashboard.admin.notifications.broadcast.fields.action_label') ?></label>
                                <input type="text" id="<?= sanitize($actionId) ?>" name="translations[<?= sanitize($code) ?>][action_label]" data-broadcast-action lang="<?= sanitize($code) ?>" autocomplete="off">
                              </div>
                            </div>
                          </details>
                        <?php endforeach; ?>
                      </div>
                    </div>
                    <button type="submit" id="notificationBroadcastSubmit"><?= __e('dashboard.admin.notifications.broadcast.submit') ?></button>
                    <div class="plan-feedback" id="notificationBroadcastFeedback" role="status" aria-live="polite"></div>
                  </div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminNewsletterPanel" role="tabpanel" aria-labelledby="adminNewsletterTab" data-admin-panel="newsletter">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.newsletter.title') ?></h3>
                <p><?= __e('dashboard.admin.newsletter.description') ?></p>
                <form id="newsletterForm" data-newsletter-form>
                  <div class="admin-newsletter">
                    <fieldset class="admin-newsletter__fieldset">
                      <legend><?= __e('dashboard.admin.newsletter.sender.title') ?></legend>
                      <div class="admin-newsletter__group-grid">
                        <div class="admin-newsletter__field">
                          <label for="newsletterSenderName"><?= __e('dashboard.admin.newsletter.sender.name_label') ?></label>
                          <input type="text" id="newsletterSenderName" name="sender_name" value="<?= htmlspecialchars($defaultNewsletterSenderName, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="off">
                        </div>
                        <div class="admin-newsletter__field">
                          <label for="newsletterSenderEmail"><?= __e('dashboard.admin.newsletter.sender.email_label') ?></label>
                          <input type="email" id="newsletterSenderEmail" name="sender_email" value="<?= htmlspecialchars($defaultNewsletterSenderEmail, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="off">
                        </div>
                        <div class="admin-newsletter__field">
                          <label for="newsletterReplyTo"><?= __e('dashboard.admin.newsletter.sender.reply_to_label') ?></label>
                          <input type="email" id="newsletterReplyTo" name="reply_to" placeholder="<?= __e('dashboard.admin.newsletter.sender.reply_to_placeholder') ?>" autocomplete="off">
                          <small class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.sender.helper') ?></small>
                        </div>
                      </div>
                    </fieldset>
                    <fieldset class="admin-newsletter__fieldset">
                      <legend><?= __e('dashboard.admin.newsletter.recipients.title') ?></legend>
                      <div class="admin-newsletter__field">
                        <p class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.recipients.helper') ?></p>
                        <div class="admin-newsletter__choices" role="radiogroup" aria-label="<?= __e('dashboard.admin.newsletter.recipients.title') ?>">
                          <label class="admin-newsletter__choice">
                            <input type="radio" name="recipient_mode" value="all" checked data-newsletter-recipient-mode>
                            <span><?= __e('dashboard.admin.newsletter.recipients.mode_all') ?></span>
                          </label>
                          <label class="admin-newsletter__choice">
                            <input type="radio" name="recipient_mode" value="selected" data-newsletter-recipient-mode>
                            <span><?= __e('dashboard.admin.newsletter.recipients.mode_selected') ?></span>
                          </label>
                        </div>
                      </div>
                      <div class="admin-newsletter__field" data-newsletter-recipient-select hidden>
                        <label for="newsletterRecipients"><?= __e('dashboard.admin.newsletter.recipients.select_label') ?></label>
                        <?php if ($adminUsers): ?>
                          <select id="newsletterRecipients" name="recipients[]" multiple size="8" class="admin-newsletter__select" data-newsletter-recipient-options>
                            <?php foreach ($adminUsers as $adminUser): ?>
                              <?php
                                $recipientEmail = (string) ($adminUser['email'] ?? '');
                                $recipientDisplay = trim($adminUser['display_name'] !== '' ? $adminUser['display_name'] : $recipientEmail);
                                $optionLabel = $recipientDisplay !== '' && $recipientEmail !== '' && strcasecmp($recipientDisplay, $recipientEmail) !== 0
                                    ? $recipientDisplay . ' – ' . $recipientEmail
                                    : ($recipientDisplay !== '' ? $recipientDisplay : $recipientEmail);
                              ?>
                              <option value="<?= (int) $adminUser['id'] ?>" data-email="<?= sanitize($recipientEmail) ?>" data-name="<?= sanitize($recipientDisplay) ?>">
                                <?= sanitize($optionLabel) ?>
                              </option>
                            <?php endforeach; ?>
                          </select>
                          <small class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.recipients.select_helper') ?></small>
                        <?php else: ?>
                          <p class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.recipients.empty') ?></p>
                        <?php endif; ?>
                      </div>
                      <div class="admin-newsletter__field">
                        <label for="newsletterExtraEmails"><?= __e('dashboard.admin.newsletter.recipients.additional_label') ?></label>
                        <input type="text" id="newsletterExtraEmails" name="extra_emails" placeholder="<?= __e('dashboard.admin.newsletter.recipients.additional_placeholder') ?>" autocomplete="off">
                      </div>
                    </fieldset>
                    <fieldset class="admin-newsletter__fieldset">
                      <legend><?= __e('dashboard.admin.newsletter.content.title') ?></legend>
                      <div class="admin-newsletter__field">
                        <label for="newsletterSubject"><?= __e('dashboard.admin.newsletter.content.subject_label') ?></label>
                        <input type="text" id="newsletterSubject" name="subject" autocomplete="off" placeholder="<?= __e('dashboard.admin.newsletter.content.subject_placeholder') ?>">
                      </div>
                      <div class="admin-newsletter__field">
                        <label for="newsletterHtmlContent"><?= __e('dashboard.admin.newsletter.content.html_label') ?></label>
                        <textarea id="newsletterHtmlContent" name="html" rows="14" data-newsletter-html placeholder="<?= __e('dashboard.admin.newsletter.content.html_placeholder') ?>"></textarea>
                        <small class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.content.helper') ?></small>
                      </div>
                      <div class="admin-newsletter__field">
                        <label for="newsletterTextContent"><?= __e('dashboard.admin.newsletter.content.text_label') ?></label>
                        <textarea id="newsletterTextContent" name="text" rows="8" placeholder="<?= __e('dashboard.admin.newsletter.content.text_placeholder') ?>"></textarea>
                      </div>
                    </fieldset>
                    <fieldset class="admin-newsletter__fieldset">
                      <legend><?= __e('dashboard.admin.newsletter.delivery.title') ?></legend>
                      <div class="admin-newsletter__delivery-grid">
                        <div class="admin-newsletter__field">
                          <label for="newsletterTransport"><?= __e('dashboard.admin.newsletter.delivery.transport_label') ?></label>
                          <select id="newsletterTransport" name="transport" data-newsletter-transport>
                            <option value="phpmail"><?= __e('dashboard.admin.newsletter.delivery.transport_options.phpmail') ?></option>
                            <option value="smtp"><?= __e('dashboard.admin.newsletter.delivery.transport_options.smtp') ?></option>
                          </select>
                        </div>
                        <div class="admin-newsletter__field">
                          <label for="newsletterBatchSize"><?= __e('dashboard.admin.newsletter.delivery.batch_label') ?></label>
                          <input type="number" min="1" step="1" id="newsletterBatchSize" name="batch_size" value="10" data-newsletter-batch>
                        </div>
                        <div class="admin-newsletter__field">
                          <label for="newsletterIntervalValue"><?= __e('dashboard.admin.newsletter.delivery.interval_label') ?></label>
                          <div class="admin-newsletter__group-grid">
                            <input type="number" min="0" step="1" id="newsletterIntervalValue" name="interval_value" value="1" data-newsletter-interval-value>
                            <select id="newsletterIntervalUnit" name="interval_unit" data-newsletter-interval-unit>
                              <option value="minutes" selected><?= __e('dashboard.admin.newsletter.delivery.interval_unit.minutes') ?></option>
                              <option value="seconds"><?= __e('dashboard.admin.newsletter.delivery.interval_unit.seconds') ?></option>
                              <option value="hours"><?= __e('dashboard.admin.newsletter.delivery.interval_unit.hours') ?></option>
                            </select>
                          </div>
                          <small class="admin-newsletter__hint"><?= __e('dashboard.admin.newsletter.delivery.interval_helper') ?></small>
                        </div>
                      </div>
                      <div class="admin-newsletter__smtp" data-newsletter-smtp hidden>
                        <div class="admin-newsletter__group-grid">
                          <div class="admin-newsletter__field">
                            <label for="newsletterSmtpHost"><?= __e('dashboard.admin.newsletter.delivery.smtp.host_label') ?></label>
                            <input type="text" id="newsletterSmtpHost" name="smtp_host" autocomplete="off">
                          </div>
                          <div class="admin-newsletter__field">
                            <label for="newsletterSmtpPort"><?= __e('dashboard.admin.newsletter.delivery.smtp.port_label') ?></label>
                            <input type="number" min="1" step="1" id="newsletterSmtpPort" name="smtp_port" value="587">
                          </div>
                          <div class="admin-newsletter__field">
                            <label for="newsletterSmtpEncryption"><?= __e('dashboard.admin.newsletter.delivery.smtp.encryption_label') ?></label>
                            <select id="newsletterSmtpEncryption" name="smtp_encryption">
                              <option value="none"><?= __e('dashboard.admin.newsletter.delivery.smtp.encryption_none') ?></option>
                              <option value="ssl"><?= __e('dashboard.admin.newsletter.delivery.smtp.encryption_ssl') ?></option>
                              <option value="tls" selected><?= __e('dashboard.admin.newsletter.delivery.smtp.encryption_tls') ?></option>
                            </select>
                          </div>
                        </div>
                        <div class="admin-newsletter__group-grid">
                          <div class="admin-newsletter__field">
                            <label for="newsletterSmtpUsername"><?= __e('dashboard.admin.newsletter.delivery.smtp.username_label') ?></label>
                            <input type="text" id="newsletterSmtpUsername" name="smtp_username" autocomplete="off">
                          </div>
                          <div class="admin-newsletter__field">
                            <label for="newsletterSmtpPassword"><?= __e('dashboard.admin.newsletter.delivery.smtp.password_label') ?></label>
                            <input type="password" id="newsletterSmtpPassword" name="smtp_password" autocomplete="off">
                          </div>
                        </div>
                      </div>
                    </fieldset>
                  </div>
                  <button type="submit" data-newsletter-submit><?= __e('dashboard.admin.newsletter.submit') ?></button>
                  <div class="plan-feedback" id="newsletterFeedback" data-newsletter-feedback role="status" aria-live="polite"></div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminAiPanel" role="tabpanel" aria-labelledby="adminAiTab" data-admin-panel="ai">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.ai.title') ?></h3>
                <p><?= __e('dashboard.admin.ai.description') ?></p>
                <?php $aiStatusKey = $sunoApiKeyConfigured ? 'dashboard.admin.ai.status.configured' : 'dashboard.admin.ai.status.missing'; ?>
                <form id="aiSettingsForm" data-ai-settings>
                  <label for="sunoApiKey"><?= __e('dashboard.admin.ai.fields.api_key_label') ?></label>
                  <input
                    type="password"
                    id="sunoApiKey"
                    name="suno_api_key"
                    value="<?= htmlspecialchars($sunoApiKeyValue, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                    placeholder="<?= __e('dashboard.admin.ai.fields.api_key_placeholder') ?>"
                    autocomplete="off"
                    spellcheck="false"
                    data-ai-key-input
                  >
                  <small><?= __e('dashboard.admin.ai.fields.api_key_helper') ?></small>
                  <p class="admin-configuration__helper" data-ai-status data-ai-state="<?= $sunoApiKeyConfigured ? 'configured' : 'missing' ?>"><?= __e($aiStatusKey) ?></p>
                  <button type="submit" id="aiSettingsSubmit" data-ai-submit><?= __e('dashboard.admin.ai.submit') ?></button>
                  <div class="plan-feedback" id="aiSettingsFeedback" data-ai-feedback role="status" aria-live="polite"></div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminDesignPanel" role="tabpanel" aria-labelledby="adminDesignTab" data-admin-panel="design">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.design.title') ?></h3>
                <p><?= __e('dashboard.admin.design.description') ?></p>
                <form id="designSettingsForm" data-design-settings>
                  <div class="admin-design">
                    <?php $designHelper = (string) ($adminDesignTranslations['helper'] ?? ''); ?>
                    <?php if ($designHelper !== ''): ?>
                      <div class="admin-design__intro">
                        <p><?= sanitize($designHelper) ?></p>
                      </div>
                    <?php endif; ?>
                    <div class="admin-design__grid">
                      <?php foreach ($dashboardDesignVariants as $variantKey => $variantConfig): ?>
                        <?php
                          $variantId = 'dashboardDesign_' . preg_replace('/[^a-z0-9_-]/i', '_', (string) $variantKey);
                          $isVariantActive = $dashboardDesignVariant === $variantKey;
                          $variantHighlights = array_filter((array) ($variantConfig['highlights'] ?? []));
                        ?>
                        <label class="admin-design__option<?= $isVariantActive ? ' is-active' : '' ?>" for="<?= sanitize($variantId) ?>" data-design-option>
                          <input
                            type="radio"
                            id="<?= sanitize($variantId) ?>"
                            name="dashboard_design_variant"
                            value="<?= sanitize((string) $variantKey) ?>"
                            <?= $isVariantActive ? 'checked' : '' ?>
                          >
                          <h3><?= sanitize((string) ($variantConfig['title'] ?? ucfirst((string) $variantKey))) ?></h3>
                          <?php $variantDescription = trim((string) ($variantConfig['description'] ?? '')); ?>
                          <?php if ($variantDescription !== ''): ?>
                            <p><?= sanitize($variantDescription) ?></p>
                          <?php endif; ?>
                          <?php if ($variantHighlights): ?>
                            <ul class="admin-design__highlights">
                              <?php foreach ($variantHighlights as $highlight): ?>
                                <li><?= sanitize((string) $highlight) ?></li>
                              <?php endforeach; ?>
                            </ul>
                          <?php endif; ?>
                        </label>
                      <?php endforeach; ?>
                    </div>
                    <div
                      class="admin-design__preview"
                      data-design-preview
                      data-variant="<?= sanitize($dashboardDesignVariant) ?>"
                      data-variant-labels='<?= htmlspecialchars($dashboardDesignVariantLabelsJson, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>'
                    >
                      <div class="admin-design__preview-head">
                        <span class="admin-design__preview-badge"><?= __e('dashboard.admin.design.preview_badge') ?></span>
                        <span class="admin-design__preview-label" data-design-preview-label><?= sanitize($dashboardDesignVariantTitles[$dashboardDesignVariant] ?? ucfirst($dashboardDesignVariant)) ?></span>
                      </div>
                      <div class="admin-design__preview-layout" aria-hidden="true">
                        <div class="admin-design__preview-hero"></div>
                        <div class="admin-design__preview-sidebar">
                          <span></span>
                          <span></span>
                        </div>
                        <div class="admin-design__preview-grid">
                          <span class="admin-design__preview-card"></span>
                          <span class="admin-design__preview-card"></span>
                          <span class="admin-design__preview-card"></span>
                          <span class="admin-design__preview-card"></span>
                          <span class="admin-design__preview-card"></span>
                          <span class="admin-design__preview-card"></span>
                        </div>
                      </div>
                    </div>
                    <div class="admin-design__actions">
                      <button type="submit" class="admin-design__submit" data-design-submit><?= __e('dashboard.admin.design.actions.submit') ?></button>
                      <p class="admin-design__feedback" data-design-feedback role="status" aria-live="polite"></p>
                    </div>
                    <div
                      class="admin-design__notice"
                      data-design-notice
                      aria-hidden="true"
                      role="region"
                      aria-live="polite"
                    >
                      <div class="admin-design__notice-content">
                        <p class="admin-design__notice-eyebrow" data-design-notice-eyebrow></p>
                        <h4 class="admin-design__notice-title" data-design-notice-title></h4>
                        <p class="admin-design__notice-message" data-design-notice-message></p>
                      </div>
                      <div class="admin-design__notice-actions">
                        <button
                          type="button"
                          class="admin-design__notice-button admin-design__notice-button--primary"
                          data-design-notice-confirm
                        ></button>
                        <button
                          type="button"
                          class="admin-design__notice-button admin-design__notice-button--ghost"
                          data-design-notice-cancel
                        ></button>
                      </div>
                    </div>
                  </div>
                </form>
              </article>
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.design.branding.title') ?></h3>
                <p><?= __e('dashboard.admin.design.branding.description') ?></p>
                <form id="brandingSettingsForm" data-branding-settings enctype="multipart/form-data">
                  <div class="admin-branding">
                    <div class="admin-branding__group">
                      <label for="brandingSiteName"><?= __e('dashboard.admin.design.branding.fields.site_name.label') ?></label>
                      <input
                        type="text"
                        id="brandingSiteName"
                        name="site_name"
                        value="<?= htmlspecialchars($siteName, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                        autocomplete="off"
                        spellcheck="false"
                        maxlength="120"
                        required
                        data-branding-site-name
                      >
                      <small class="admin-branding__hint"><?= __e('dashboard.admin.design.branding.fields.site_name.helper') ?></small>
                      <p class="admin-branding__error" data-branding-site-name-error role="alert"></p>
                    </div>
                    <div class="admin-branding__group">
                      <label for="brandingDashboardLogo"><?= __e('dashboard.admin.design.branding.fields.dashboard_logo.label') ?></label>
                      <input
                        type="file"
                        id="brandingDashboardLogo"
                        name="dashboard_logo"
                        accept="image/png,image/jpeg,image/webp,image/svg+xml"
                        data-branding-logo-input
                      >
                      <small class="admin-branding__hint"><?= __e('dashboard.admin.design.branding.fields.dashboard_logo.helper') ?></small>
                      <div class="admin-branding__preview" data-branding-logo-preview>
                        <img
                          src="<?= htmlspecialchars($dashboardLogoUrl, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                          alt="<?= __e('dashboard.admin.design.branding.fields.dashboard_logo.preview_alt', ['site' => $siteName]) ?>"
                          data-alt-template="<?= htmlspecialchars(__('dashboard.admin.design.branding.fields.dashboard_logo.preview_alt', ['site' => ':site']), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                        >
                      </div>
                      <p class="admin-branding__error" data-branding-logo-error role="alert"></p>
                    </div>
                    <div class="admin-branding__group">
                      <label for="brandingFavicon"><?= __e('dashboard.admin.design.branding.fields.favicon.label') ?></label>
                      <input
                        type="file"
                        id="brandingFavicon"
                        name="favicon"
                        accept="image/png,image/svg+xml,image/x-icon,image/vnd.microsoft.icon"
                        data-branding-favicon-input
                      >
                      <small class="admin-branding__hint"><?= __e('dashboard.admin.design.branding.fields.favicon.helper') ?></small>
                      <div class="admin-branding__favicon-preview" data-branding-favicon-preview>
                        <img
                          src="<?= htmlspecialchars($siteFaviconUrl, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                          alt="<?= __e('dashboard.admin.design.branding.fields.favicon.preview_alt', ['site' => $siteName]) ?>"
                          data-alt-template="<?= htmlspecialchars(__('dashboard.admin.design.branding.fields.favicon.preview_alt', ['site' => ':site']), ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                        >
                      </div>
                      <p class="admin-branding__error" data-branding-favicon-error role="alert"></p>
                    </div>
                    <div class="admin-branding__group">
                      <label for="brandingFooterCopyright"><?= __e('dashboard.admin.design.branding.fields.footer_copyright.label') ?></label>
                      <input
                        type="text"
                        id="brandingFooterCopyright"
                        name="footer_copyright"
                        value="<?= htmlspecialchars($dashboardFooterTemplateSetting, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
                        placeholder="<?= __e('dashboard.admin.design.branding.fields.footer_copyright.placeholder') ?>"
                        maxlength="160"
                        autocomplete="off"
                        spellcheck="true"
                        data-branding-footer
                      >
                      <small class="admin-branding__hint"><?= __e('dashboard.admin.design.branding.fields.footer_copyright.helper') ?></small>
                      <p class="admin-branding__error" data-branding-footer-error role="alert"></p>
                    </div>
                    <div class="admin-branding__actions">
                      <button type="submit" class="admin-branding__submit" data-branding-submit><?= __e('dashboard.admin.design.branding.actions.submit') ?></button>
                      <p class="admin-branding__feedback" data-branding-feedback role="status" aria-live="polite"></p>
                    </div>
                  </div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminConfigurationPanel" role="tabpanel" aria-labelledby="adminConfigurationTab" data-admin-panel="configuration">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.configuration.title') ?></h3>
                <p><?= __e('dashboard.admin.configuration.description') ?></p>
                <form id="configurationSettingsForm" data-configuration-settings>
                  <div class="admin-configuration">
                    <div class="admin-configuration__group">
                      <h4><?= __e('dashboard.admin.configuration.studio.title') ?></h4>
                      <p><?= __e('dashboard.admin.configuration.studio.description') ?></p>
                      <label class="admin-toggle">
                        <input type="checkbox" id="dashboardStudioCardEnabled" name="studio_card" value="1"<?= $studioCardEnabled ? ' checked' : '' ?>>
                        <span class="admin-toggle__control" aria-hidden="true"></span>
                        <span class="admin-toggle__label"><?= __e('dashboard.admin.configuration.studio.toggle_label') ?></span>
                      </label>
                    </div>
                    <div class="admin-configuration__group">
                      <h4><?= __e('dashboard.admin.configuration.languages.title') ?></h4>
                      <p><?= __e('dashboard.admin.configuration.languages.description') ?></p>
                      <label class="admin-toggle">
                        <input type="checkbox" id="dashboardLanguagesMultilingual" name="languages_multilingual" value="1"<?= $languagesMultilingualEnabled ? ' checked' : '' ?> data-configuration-multilingual>
                        <span class="admin-toggle__control" aria-hidden="true"></span>
                        <span class="admin-toggle__label"><?= __e('dashboard.admin.configuration.languages.toggle_label') ?></span>
                      </label>
                      <?php if ($allLanguages): ?>
                        <?php
                          $defaultLanguageHelperRaw = __('dashboard.admin.configuration.languages.default_helper');
                          $defaultLanguageHelper = $defaultLanguageHelperRaw !== 'dashboard.admin.configuration.languages.default_helper'
                              ? trim((string) $defaultLanguageHelperRaw)
                              : '';
                          $autoDetectHelperRaw = __('dashboard.admin.configuration.languages.auto_detect_helper');
                          $autoDetectHelper = $autoDetectHelperRaw !== 'dashboard.admin.configuration.languages.auto_detect_helper'
                              ? trim((string) $autoDetectHelperRaw)
                              : '';
                        ?>
                        <div class="admin-configuration__field">
                          <label for="dashboardLanguagesDefault"><?= __e('dashboard.admin.configuration.languages.default_label') ?></label>
                          <select
                            id="dashboardLanguagesDefault"
                            name="languages_default"
                            data-configuration-default-language
                            data-enhanced-select
                          >
                            <?php foreach ($allLanguages as $code => $meta): ?>
                              <?php
                                $nativeLabel = trim((string) ($meta['native'] ?? $meta['label'] ?? strtoupper($code)));
                                $displayLabel = $nativeLabel !== '' ? $nativeLabel : strtoupper($code);
                              ?>
                              <option value="<?= sanitize($code) ?>"<?= $code === $defaultLanguageSetting ? ' selected' : '' ?>><?= sanitize($displayLabel) ?></option>
                            <?php endforeach; ?>
                          </select>
                          <?php if ($defaultLanguageHelper !== ''): ?>
                            <p class="admin-configuration__helper"><?= __e('dashboard.admin.configuration.languages.default_helper') ?></p>
                          <?php endif; ?>
                        </div>
                        <div class="admin-configuration__field admin-configuration__field--toggle">
                          <label class="admin-toggle admin-toggle--sub">
                            <input
                              type="checkbox"
                              id="dashboardLanguagesAutoDetect"
                              name="languages_auto_detect"
                              value="1"
                              data-configuration-auto-detect
                              <?= $languagesAutoDetectEnabled ? 'checked' : '' ?>
                            >
                            <span class="admin-toggle__control" aria-hidden="true"></span>
                            <span class="admin-toggle__label"><?= __e('dashboard.admin.configuration.languages.auto_detect_label') ?></span>
                          </label>
                          <?php if ($autoDetectHelper !== ''): ?>
                            <p class="admin-configuration__helper"><?= __e('dashboard.admin.configuration.languages.auto_detect_helper') ?></p>
                          <?php endif; ?>
                        </div>
                        <div
                          class="admin-configuration__options admin-configuration__options--languages"
                          data-configuration-language-options
                          data-default-language="<?= sanitize($defaultLanguageSetting) ?>"
                          data-multilingual="<?= $languagesMultilingualEnabled ? '1' : '0' ?>"
                        >
                          <?php foreach ($allLanguages as $code => $meta): ?>
                            <?php
                              $languageId = 'dashboardLanguageToggle_' . preg_replace('/[^a-z0-9_-]/i', '_', (string) $code);
                              $isLanguageEnabled = $languageAdminStates[$code] ?? true;
                              $direction = strtolower((string) ($meta['direction'] ?? 'ltr')) === 'rtl' ? 'rtl' : 'ltr';
                              $nativeLabel = trim((string) ($meta['native'] ?? $meta['label'] ?? strtoupper($code)));
                              $displayLabel = $nativeLabel !== '' ? $nativeLabel : strtoupper($code);
                              $flag = language_flag($code);
                            ?>
                            <label class="admin-toggle admin-toggle--sub">
                              <input
                                type="checkbox"
                                id="<?= sanitize($languageId) ?>"
                                name="languages[<?= sanitize($code) ?>]"
                                value="1"
                                data-configuration-language
                                data-language-code="<?= sanitize($code) ?>"
                                data-language-direction="<?= sanitize($direction) ?>"
                                <?= $isLanguageEnabled ? 'checked' : '' ?>
                              >
                              <span class="admin-toggle__control" aria-hidden="true"></span>
                              <span class="admin-toggle__label"><span class="admin-toggle__flag" aria-hidden="true"><?= sanitize($flag) ?></span><?= sanitize($displayLabel) ?></span>
                            </label>
                          <?php endforeach; ?>
                        </div>
                      <?php else: ?>
                        <p class="admin-configuration__empty"><?= __e('dashboard.admin.configuration.languages.empty') ?></p>
                      <?php endif; ?>
                      <div class="admin-configuration__actions">
                        <button type="button" class="admin-configuration__translations-button" data-translations-manage><?= __e('dashboard.admin.configuration.languages.manage_button') ?></button>
                      </div>
                    </div>
                    <div class="admin-configuration__group">
                      <h4><?= __e('dashboard.admin.configuration.cards.title') ?></h4>
                      <p><?= __e('dashboard.admin.configuration.cards.description') ?></p>
                      <?php if ($cardsTranslations): ?>
                        <div class="admin-configuration__options">
                          <?php foreach ($cardsTranslations as $cardKey => $cardTranslation): ?>
                            <?php
                              $cardId = 'dashboardCardToggle_' . preg_replace('/[^a-z0-9_-]/i', '_', (string) $cardKey);
                              $isCardEnabled = $cardVisibility[$cardKey] ?? true;
                              $cardTitle = __('dashboard.cards.' . $cardKey . '.title');
                            ?>
                            <label class="admin-toggle admin-toggle--sub">
                              <input type="checkbox" id="<?= sanitize($cardId) ?>" name="cards[<?= sanitize((string) $cardKey) ?>]" value="1" data-configuration-card="<?= sanitize((string) $cardKey) ?>"<?= $isCardEnabled ? ' checked' : '' ?>>
                              <span class="admin-toggle__control" aria-hidden="true"></span>
                              <span class="admin-toggle__label"><?= __e('dashboard.admin.configuration.cards.toggle_label', ['card' => $cardTitle]) ?></span>
                            </label>
                          <?php endforeach; ?>
                        </div>
                      <?php else: ?>
                        <p class="admin-configuration__empty"><?= __e('dashboard.admin.configuration.cards.empty') ?></p>
                      <?php endif; ?>
                    </div>
                  </div>
                  <button type="submit" id="configurationSettingsSubmit"><?= __e('dashboard.admin.configuration.submit') ?></button>
                  <div class="plan-feedback" id="configurationSettingsFeedback" role="status" aria-live="polite"></div>
                </form>
              </article>
            </div>
          </section>
          <section class="admin-panel" id="adminDistributionPanel" role="tabpanel" aria-labelledby="adminDistributionTab" data-admin-panel="distribution">
            <div class="admin-grid">
              <article class="admin-card">
                <h3><?= __e('dashboard.admin.distribution.title') ?></h3>
                <p><?= __e('dashboard.admin.distribution.description') ?></p>
                <form id="distributionSettingsForm" data-distribution-settings>
                  <label for="distributionProvider"><?= __e('dashboard.admin.distribution.provider_label') ?></label>
                  <select id="distributionProvider" name="distribution_provider" data-distribution-provider data-enhanced-select>
                    <option value="sonosuite"<?= $distributionProvider === 'sonosuite' ? ' selected' : '' ?>><?= __e('dashboard.admin.distribution.providers.sonosuite') ?></option>
                  </select>
                  <div class="admin-distribution-provider" data-provider-fields="sonosuite"<?= $distributionProvider === 'sonosuite' ? '' : ' hidden' ?>>
                    <label for="sonosuiteBaseUrl"><?= __e('dashboard.admin.distribution.fields.sonosuite.base_url_label') ?></label>
                    <input type="url" id="sonosuiteBaseUrl" name="sonosuite_base_url" value="<?= htmlspecialchars($sonosuiteBaseUrlSetting, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" placeholder="<?= __e('dashboard.admin.distribution.fields.sonosuite.base_url_placeholder') ?>" autocomplete="off">
                    <label for="sonosuiteSharedSecret"><?= __e('dashboard.admin.distribution.fields.sonosuite.shared_secret_label') ?></label>
                    <input type="password" id="sonosuiteSharedSecret" name="sonosuite_shared_secret" value="<?= htmlspecialchars($sonosuiteSharedSecretSetting, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>" autocomplete="off">
                    <small><?= __e('dashboard.admin.distribution.fields.sonosuite.helper') ?></small>
                  </div>
                  <button type="submit" id="distributionSettingsSubmit" data-distribution-submit><?= __e('dashboard.admin.distribution.submit') ?></button>
                  <div class="plan-feedback" id="distributionSettingsFeedback" data-distribution-feedback role="status" aria-live="polite"></div>
                </form>
              </article>
            </div>
          </section>
        </div>
      </section>
<?php if ($isAuraDesign): ?>
      </div>
<?php endif; ?>
    <?php endif; ?>
  </main>
  <div class="admin-design-loading" data-design-loading aria-hidden="true">
    <div class="admin-design-loading__content">
      <div class="admin-design-loading__orb" aria-hidden="true">
        <span class="admin-design-loading__ring"></span>
        <span class="admin-design-loading__ring"></span>
        <span class="admin-design-loading__spark"></span>
      </div>
      <div class="admin-design-loading__text" role="status" aria-live="polite">
        <h2 class="admin-design-loading__headline" data-design-loading-headline>Applying your new look</h2>
        <p class="admin-design-loading__subtitle" data-design-loading-variant>Refreshing the dashboard experience…</p>
      </div>
    </div>
  </div>
  <footer
    data-dashboard-footer
    data-footer-template="<?= htmlspecialchars($dashboardFooterTemplateSetting, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
    data-footer-default="<?= htmlspecialchars($dashboardFooterDefaultTemplate, ENT_QUOTES | ENT_SUBSTITUTE, 'UTF-8') ?>"
  >
    <?= sanitize($dashboardFooterContent) ?>
  </footer>
  <?php
    $dashboardClientTranslations = [
        'profile' => [
            'feedback' => $profilePanelTranslations['feedback'] ?? [],
            'submit_processing' => $profilePanelTranslations['submit_processing'] ?? '',
            'submit_label' => $profilePanelTranslations['submit'] ?? '',
            'welcome_template' => $welcomeTranslations['title'] ?? '',
            'photo_alt' => $profilePanelTranslations['photo_alt'] ?? '',
            'preview_alt' => $profilePanelTranslations['preview_alt'] ?? '',
        ],
        'cards' => [
            'coaching_alert' => $cardsTranslations['coaching']['alert'] ?? '',
        ],
        'notifications' => [
            'panel' => $notificationsPanelTranslations,
            'actions' => $notificationsActionsTranslations,
            'items' => $notificationsItemsTranslations,
        ],
        'admin' => [
            'feedback' => $adminTableFeedback,
            'confirm' => $adminTableConfirm,
            'actions' => $adminTableActions,
            'status' => $adminTableStatus,
            'empty' => $adminTableTranslations['empty'] ?? '',
            'login_history' => $adminTranslations['login_history'] ?? [],
            'user_modal' => $adminUserModalTranslations,
            'impersonation' => $adminImpersonationTranslations,
            'notifications' => $adminTranslations['notifications'] ?? [],
            'ai' => $adminTranslations['ai'] ?? [],
            'design' => $adminTranslations['design'] ?? [],
            'configuration' => $adminTranslations['configuration'] ?? [],
            'translations' => $adminTranslations['translations'] ?? [],
            'newsletter' => $adminNewsletterTranslations,
        ],
        'ai_composer' => $aiComposerTranslations,
        'royalties' => $dashboardTranslations['royalties_modal'] ?? [],
        'mastering' => $dashboardTranslations['mastering_modal'] ?? [],
        'publishing' => $dashboardTranslations['publishing_modal'] ?? [],
        'smartlinks' => $dashboardTranslations['smartlinks_modal'] ?? [],
        'express' => $dashboardTranslations['express_modal'] ?? [],
        'payments' => $dashboardTranslations['payments'] ?? [],
        'stripe' => $adminStripeTranslations,
        'distribution' => $adminTranslations['distribution'] ?? [],
        'checkout' => $checkoutTranslations,
        'js' => $dashboardJsTranslations,
        'config' => [
            'ai' => [
                'has_api_key' => $sunoApiKeyConfigured,
            ],
            'studio_card' => [
                'enabled' => $studioCardEnabled,
            ],
            'cards' => $cardVisibility,
            'mastering' => [
                'payments_enabled' => $masteringPaymentsEnabled,
            ],
            'distribution' => [
                'provider' => $distributionProvider,
            ],
            'notifications' => [
                'enabled' => $notificationsEnabled,
                'count' => $notificationsCount,
                'items' => $dashboardNotifications,
                'profile_reminder' => $notificationsProfileReminderEnabled,
            ],
            'newsletter' => [
                'default_sender' => [
                    'name' => $defaultNewsletterSenderName,
                    'email' => $defaultNewsletterSenderEmail,
                ],
                'user_count' => count($adminUsers),
            ],
            'design' => [
                'variant' => $dashboardDesignVariant,
                'branding' => [
                    'site_name' => $siteName,
                    'logo' => $dashboardLogoUrl,
                    'favicon' => $siteFaviconUrl,
                    'title_template' => $dashboardTitleTemplate,
                    'brand_alt_template' => $dashboardBrandAltTemplate,
                    'footer_copyright' => $dashboardFooterTemplateSetting,
                    'footer_default' => $dashboardFooterDefaultTemplate,
                ],
            ],
            'express_delivery' => [
                'plans' => $expressOptions,
            ],
            'currency' => [
                'default' => $defaultCurrencyCode,
                'current' => $userCurrencyCode,
                'allow_user_choice' => $currencyAllowUserChoice,
                'symbol' => $userCurrencySymbol,
            ],
            'languages' => [
                'multilingual' => $languagesMultilingualEnabled,
                'auto_detect' => $languagesAutoDetectEnabled,
                'enabled' => $languageEnabledCodes,
                'default' => $defaultLanguageSetting,
                'default_direction' => $defaultLanguageDirection,
                'available' => array_keys($languageOptions),
            ],
        ],
    ];
  ?>
  <script>
    const DASHBOARD_I18N = <?= json_encode($dashboardClientTranslations, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES) ?>;
    (function () {
      const dashboardConfig = DASHBOARD_I18N.config || {};
      const aiConfig = dashboardConfig.ai || {};
      const designConfig = dashboardConfig.design || {};
      const brandingConfig = designConfig.branding || {};
      const translationsConfig = dashboardConfig.languages || {};
      const masteringConfig = dashboardConfig.mastering || {};
      const masteringPaymentsEnabled = masteringConfig.payments_enabled !== false;
      const notificationsConfig = dashboardConfig.notifications || {};
      const newsletterConfig = dashboardConfig.newsletter || {};
      const currencyConfig = dashboardConfig.currency || {};
      const expressConfig = dashboardConfig.express_delivery || {};
      const expressPlansConfig = expressConfig.plans || {};
      const profileToggle = document.getElementById('profileToggle');
      const profilePanel = document.getElementById('profilePanel');
      const profileForm = document.getElementById('profileForm');
      const avatarInput = document.getElementById('avatarInput');
      const avatarPreview = document.getElementById('avatarPreview');
      const avatarPreviewContent = document.getElementById('avatarPreviewContent');
      const avatarUploadButton = document.getElementById('avatarUploadButton');
      const avatarRemoveButton = document.getElementById('avatarRemoveButton');
      const removeAvatarInput = document.getElementById('removeAvatar');
      const profileFeedback = document.getElementById('profileFeedback');
      const profileSubmit = document.getElementById('profileSubmit');
      const profileName = document.getElementById('profileName');
      const profileRole = document.getElementById('profileRole');
      const profileLanguageSelect = document.getElementById('language');
      const profileCurrencySelect = document.getElementById('currency');
      let profileCurrentLanguage = profileLanguageSelect
        ? profileLanguageSelect.value
        : (typeof translationsConfig.default === 'string' && translationsConfig.default
          ? translationsConfig.default
          : null);
      let profileCurrentCurrency = profileCurrencySelect
        ? profileCurrencySelect.value
        : (typeof currencyConfig.current === 'string' && currencyConfig.current ? currencyConfig.current : null);
      const addressLine1Input = document.getElementById('addressLine1');
      const addressLine2Input = document.getElementById('addressLine2');
      const postalCodeInput = document.getElementById('postalCode');
      const cityInput = document.getElementById('city');
      const phoneNumberInput = document.getElementById('phoneNumber');
      const businessTypeSelect = document.getElementById('businessType');
      const companyNameInput = document.getElementById('companyName');
      const companyVatInput = document.getElementById('companyVat');
      const companyFieldsWrapper = document.querySelector('[data-company-fields]');
      const companyFieldsHelper = document.querySelector('[data-company-fields-helper]');
      const profileAvatar = document.getElementById('profileAvatar');
      const welcomeTitle = document.querySelector('.welcome h2');
      const profilePanelTitle = document.getElementById('profilePanelTitle');
      const profilePanelClose = document.getElementById('profilePanelClose');
      const notificationsToggleButton = document.getElementById('notificationsToggle');
      const notificationsPanel = document.getElementById('notificationsPanel');
      const notificationsPanelClose = document.getElementById('notificationsPanelClose');
      const notificationsBadge = document.getElementById('notificationsBadge');
      const notificationsList = notificationsPanel ? notificationsPanel.querySelector('[data-notifications-list]') : null;
      const notificationsEmpty = notificationsPanel ? notificationsPanel.querySelector('[data-notifications-empty]') : null;
      const notificationsArea = notificationsToggleButton ? notificationsToggleButton.closest('.notifications-area') : null;
      const notificationActionButtons = notificationsPanel ? Array.from(notificationsPanel.querySelectorAll('[data-notification-action]')) : [];
      const pageHeader = document.querySelector('.page-header');
      const pageHeaderSentinel = document.getElementById('pageHeaderSentinel');
      const rootElement = document.documentElement;
      const smallScreenQuery = window.matchMedia('(max-width: 780px)');
      const adminSection = document.querySelector('.admin-section');
      const impersonationBanner = document.querySelector('[data-impersonation-banner]');
      const impersonationMessage = impersonationBanner ? impersonationBanner.querySelector('[data-impersonation-message]') : null;
      const stopImpersonatingButton = impersonationBanner ? impersonationBanner.querySelector('[data-stop-impersonating]') : null;
      const adminFeedback = document.getElementById('adminFeedback');
      const adminTableBody = adminSection ? adminSection.querySelector('.admin-table tbody') : null;
      const adminTabs = adminSection ? Array.from(adminSection.querySelectorAll('[data-admin-tab]')) : [];
      const adminPanels = adminSection ? Array.from(adminSection.querySelectorAll('[data-admin-panel]')) : [];
      const ADMIN_ACTIVE_TAB_STORAGE_KEY = 'dashboardAdminActiveTab';

      const getStoredAdminActiveTab = () => {
        if (adminTabs.length === 0) {
          return '';
        }

        try {
          const stored = window.sessionStorage ? sessionStorage.getItem(ADMIN_ACTIVE_TAB_STORAGE_KEY) : '';
          if (!stored) {
            return '';
          }
          return adminTabs.some((tab) => tab.dataset.adminTab === stored) ? stored : '';
        } catch (error) {
          return '';
        }
      };

      const persistAdminActiveTab = (value) => {
        try {
          if (!value) {
            sessionStorage.removeItem(ADMIN_ACTIVE_TAB_STORAGE_KEY);
          } else {
            sessionStorage.setItem(ADMIN_ACTIVE_TAB_STORAGE_KEY, value);
          }
        } catch (error) {
          // Ignore storage errors
        }
      };
      const userDetailModal = document.getElementById('adminUserModal');
      const userDetailModalContent = userDetailModal ? userDetailModal.querySelector('.modal__content.admin-user-modal') : null;
      const userDetailName = userDetailModal ? userDetailModal.querySelector('[data-user-modal-name]') : null;
      const userDetailEmail = userDetailModal ? userDetailModal.querySelector('[data-user-modal-email]') : null;
      const userDetailId = userDetailModal ? userDetailModal.querySelector('[data-user-modal-id]') : null;
      const userDetailSubtitle = userDetailModal ? userDetailModal.querySelector('[data-user-modal-subtitle]') : null;
      const userDetailRole = userDetailModal ? userDetailModal.querySelector('[data-user-modal-role]') : null;
      const userDetailLanguage = userDetailModal ? userDetailModal.querySelector('[data-user-modal-language]') : null;
      const userDetailStatus = userDetailModal ? userDetailModal.querySelector('[data-user-modal-status]') : null;
      const userDetailCountry = userDetailModal ? userDetailModal.querySelector('[data-user-modal-country]') : null;
      const userDetailAddress = userDetailModal ? userDetailModal.querySelector('[data-user-modal-address]') : null;
      const userDetailPhone = userDetailModal ? userDetailModal.querySelector('[data-user-modal-phone]') : null;
      const userDetailCreated = userDetailModal ? userDetailModal.querySelector('[data-user-modal-created]') : null;
      const userDetailCreatedIp = userDetailModal ? userDetailModal.querySelector('[data-user-modal-created-ip]') : null;
      const userDetailLastLogin = userDetailModal ? userDetailModal.querySelector('[data-user-modal-last-login]') : null;
      const userDetailLastLoginIpValue = userDetailModal ? userDetailModal.querySelector('[data-user-modal-last-login-ip-value]') : null;
      const userDetailLoginsButton = userDetailModal ? userDetailModal.querySelector('[data-user-modal-logins-trigger]') : null;
      const userDetailBackButton = userDetailModal ? userDetailModal.querySelector('[data-user-modal-back]') : null;
      const userDetailViews = userDetailModal ? Array.from(userDetailModal.querySelectorAll('[data-user-modal-view]')) : [];
      const loginHistoryView = userDetailModal ? userDetailModal.querySelector('[data-user-modal-view="logins"]') : null;
      const userDetailCompanyType = userDetailModal ? userDetailModal.querySelector('[data-user-modal-company-type]') : null;
      const userDetailCompanyName = userDetailModal ? userDetailModal.querySelector('[data-user-modal-company-name]') : null;
      const userDetailCompanyVat = userDetailModal ? userDetailModal.querySelector('[data-user-modal-company-vat]') : null;
      const loginHistoryList = loginHistoryView ? loginHistoryView.querySelector('[data-login-history-list]') : null;
      const loginHistoryStatus = loginHistoryView ? loginHistoryView.querySelector('[data-login-history-status]') : null;
      const loginHistoryEmpty = loginHistoryView ? loginHistoryView.querySelector('[data-login-history-empty]') : null;
      const loginHistorySubtitle = loginHistoryView ? loginHistoryView.querySelector('[data-login-history-subtitle]') : null;
      const royaltiesModal = document.getElementById('royaltiesModal');
      const royaltiesModalContent = royaltiesModal ? royaltiesModal.querySelector('.modal__content') : null;
      const royaltiesTriggers = document.querySelectorAll('[data-modal-target="royaltiesModal"]');
      const planSwitchButtons = royaltiesModal ? Array.from(royaltiesModal.querySelectorAll('[data-plan-option]')) : [];
      const planAmountMain = royaltiesModal ? royaltiesModal.querySelector('[data-plan-amount-main]') : null;
      const planAmountDecimal = royaltiesModal ? royaltiesModal.querySelector('[data-plan-amount-decimal]') : null;
      const planFrequency = royaltiesModal ? royaltiesModal.querySelector('[data-plan-frequency]') : null;
      const planLabel = royaltiesModal ? royaltiesModal.querySelector('[data-plan-label]') : null;
      const planTagline = royaltiesModal ? royaltiesModal.querySelector('[data-plan-tagline]') : null;
      const planNote = royaltiesModal ? royaltiesModal.querySelector('[data-plan-note]') : null;
      const planCurrency = royaltiesModal ? royaltiesModal.querySelector('[data-plan-currency]') : null;
      const planButton = royaltiesModal ? royaltiesModal.querySelector('[data-plan-checkout]') : null;
      const planFeedback = royaltiesModal ? royaltiesModal.querySelector('[data-plan-feedback]') : null;
      const aiComposerModal = document.getElementById('aiComposerModal');
      const aiComposerModalContent = aiComposerModal ? aiComposerModal.querySelector('.modal__content.ai-composer-modal') : null;
      const aiComposerTriggers = document.querySelectorAll('[data-modal-target="aiComposerModal"]');
      const aiComposerContainer = aiComposerModal ? aiComposerModal.querySelector('[data-ai-composer]') : null;
      const aiComposerModeButtons = aiComposerModal ? Array.from(aiComposerModal.querySelectorAll('[data-ai-mode]')) : [];
      const aiComposerModeToggle = aiComposerModal ? aiComposerModal.querySelector('[data-ai-mode-toggle]') : null;
      const aiComposerBriefInput = aiComposerModal ? aiComposerModal.querySelector('[data-ai-brief]') : null;
      const aiComposerLyricsBlock = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics-block]') : null;
      const aiComposerLyricsInput = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics]') : null;
      const aiComposerLyricsLabelGenerate = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics-label-generate]') : null;
      const aiComposerLyricsLabelWrite = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics-label-write]') : null;
      const aiComposerLyricsHelperGenerate = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics-helper-generate]') : null;
      const aiComposerLyricsHelperWrite = aiComposerModal ? aiComposerModal.querySelector('[data-ai-lyrics-helper-write]') : null;
      const aiComposerGenerateButton = aiComposerModal ? aiComposerModal.querySelector('[data-ai-generate-lyrics]') : null;
      const aiComposerInstrumentalInput = aiComposerModal ? aiComposerModal.querySelector('[data-ai-instrumental]') : null;
      const aiComposerInstrumentButtons = aiComposerModal ? Array.from(aiComposerModal.querySelectorAll('[data-ai-instrument-chip]')) : [];
      const aiComposerStyleButtons = aiComposerModal ? Array.from(aiComposerModal.querySelectorAll('[data-ai-style]')) : [];
      const aiComposerStyleHelper = aiComposerModal ? aiComposerModal.querySelector('[data-ai-style-helper]') : null;
      const aiComposerVoiceButtons = aiComposerModal ? Array.from(aiComposerModal.querySelectorAll('[data-ai-voice]')) : [];
      const aiComposerDurationButtons = aiComposerModal ? Array.from(aiComposerModal.querySelectorAll('[data-ai-duration]')) : [];
      const aiComposerTempoSlider = aiComposerModal ? aiComposerModal.querySelector('[data-ai-tempo]') : null;
      const aiComposerTempoValue = aiComposerModal ? aiComposerModal.querySelector('[data-ai-tempo-value]') : null;
      const aiComposerStatus = aiComposerModal ? aiComposerModal.querySelector('[data-ai-status]') : null;
      const aiComposerError = aiComposerModal ? aiComposerModal.querySelector('[data-ai-error]') : null;
      const aiComposerResetButton = aiComposerModal ? aiComposerModal.querySelector('[data-ai-reset]') : null;
      const aiComposerSubmitButton = aiComposerModal ? aiComposerModal.querySelector('[data-ai-submit]') : null;
      const aiComposerResultLyricsContainer = aiComposerModal ? aiComposerModal.querySelector('[data-ai-result-lyrics-container]') : null;
      const aiComposerResultLyrics = aiComposerModal ? aiComposerModal.querySelector('[data-ai-result-lyrics]') : null;
      const aiComposerPreviewSection = aiComposerModal ? aiComposerModal.querySelector('[data-ai-preview-section]') : null;
      const aiComposerJobLabel = aiComposerModal ? aiComposerModal.querySelector('[data-ai-job]') : null;
      const aiComposerAudio = aiComposerModal ? aiComposerModal.querySelector('[data-ai-audio]') : null;
      const aiComposerState = {
        mode: aiComposerContainer && aiComposerContainer.dataset.aiDefaultMode === 'write' ? 'write' : 'generate',
        styleId: aiComposerContainer ? aiComposerContainer.dataset.aiDefaultStyle || 'hyperpop-euphoria' : 'hyperpop-euphoria',
        stylePrompt: aiComposerContainer ? aiComposerContainer.dataset.aiDefaultStylePrompt || '' : '',
        voiceId: aiComposerContainer ? aiComposerContainer.dataset.aiDefaultVoice || 'lumen-femme' : 'lumen-femme',
        instrumental: aiComposerContainer ? aiComposerContainer.dataset.aiDefaultInstrumental || '' : '',
        brief: aiComposerContainer ? aiComposerContainer.dataset.aiDefaultBrief || '' : '',
        lyrics: '',
        duration: aiComposerContainer
          ? Number.parseInt(aiComposerContainer.dataset.aiDefaultDuration || '60', 10) || 60
          : 60,
        tempo: aiComposerContainer
          ? Number.parseInt(aiComposerContainer.dataset.aiDefaultTempo || '115', 10) || 115
          : 115,
        previewUrl: '',
        jobId: '',
      };
      let aiComposerIsRequestingLyrics = false;
      let aiComposerIsSubmitting = false;
      const masteringModal = document.getElementById('masteringModal');
      const masteringModalContent = masteringModal ? masteringModal.querySelector('.modal__content.mastering-modal') : null;
      const masteringModalInner = masteringModalContent
        ? masteringModalContent.querySelector('.mastering-modal__inner')
        : null;
      const masteringTriggers = document.querySelectorAll('[data-modal-target="masteringModal"]');
      const masteringDropzone = masteringModal ? masteringModal.querySelector('[data-mastering-dropzone]') : null;
      const masteringFileInput = masteringModal ? masteringModal.querySelector('[data-mastering-file]') : null;
      const masteringStatus = masteringModal ? masteringModal.querySelector('[data-mastering-status]') : null;
      const masteringProgress = masteringModal ? masteringModal.querySelector('[data-mastering-progress]') : null;
      const masteringProgressLabel = masteringModal ? masteringModal.querySelector('[data-mastering-progress-label]') : null;
      const masteringUploadSection = masteringModal ? masteringModal.querySelector('[data-mastering-upload]') : null;
      const masteringAnalysis = masteringModal ? masteringModal.querySelector('[data-mastering-analysis]') : null;
      const masteringPreview = masteringModal ? masteringModal.querySelector('[data-mastering-preview]') : null;
      const masteringPlayer = masteringModal ? masteringModal.querySelector('[data-mastering-player]') : null;
      const masteringVisualizerSection = masteringModal ? masteringModal.querySelector('[data-mastering-visualizer-section]') : null;
      const masteringOscilloscopeCanvas = masteringModal ? masteringModal.querySelector('[data-mastering-oscilloscope]') : null;
      const masteringSpectrumContainer = masteringModal ? masteringModal.querySelector('[data-mastering-spectrum]') : null;
      const masteringStereoCanvas = masteringModal ? masteringModal.querySelector('[data-mastering-stereo]') : null;
      const masteringVisualizerGrid = masteringModal ? masteringModal.querySelector('[data-mastering-visualizer-grid]') : null;
      const masteringVisualizerCards = masteringModal
        ? Array.from(masteringModal.querySelectorAll('[data-mastering-visualizer-card]'))
        : [];
      const masteringVisualizerToggles = masteringModal
        ? Array.from(masteringModal.querySelectorAll('[data-mastering-visualizer-toggle]'))
        : [];
      const masteringAudio = masteringModal ? masteringModal.querySelector('[data-mastering-audio]') : null;
      const masteringTrackName = masteringModal ? masteringModal.querySelector('[data-mastering-track-name]') : null;
      const masteringTrackDuration = masteringModal ? masteringModal.querySelector('[data-mastering-track-duration]') : null;
      const masteringPlayButton = masteringModal ? masteringModal.querySelector('[data-mastering-play]') : null;
      const masteringOriginalToggle = masteringModal ? masteringModal.querySelector('[data-mastering-toggle-original]') : null;
      const masteringMonoToggle = masteringModal ? masteringModal.querySelector('[data-mastering-mono]') : null;
      const masteringNewFileButton = masteringModal ? masteringModal.querySelector('[data-mastering-new-file]') : null;
      const masteringWaveformCanvas = masteringModal ? masteringModal.querySelector('[data-mastering-waveform]') : null;
      const masteringPlayhead = masteringModal ? masteringModal.querySelector('[data-mastering-playhead]') : null;
      const masteringCurrentTime = masteringModal ? masteringModal.querySelector('[data-mastering-current-time]') : null;
      const masteringTotalTime = masteringModal ? masteringModal.querySelector('[data-mastering-total-time]') : null;
      const masteringPresetButtons = masteringModal ? Array.from(masteringModal.querySelectorAll('[data-mastering-preset]')) : [];
      const masteringControlInputs = masteringModal ? Array.from(masteringModal.querySelectorAll('[data-mastering-control]')) : [];
      const masteringControlValueElements = masteringModal ? Array.from(masteringModal.querySelectorAll('[data-mastering-control-value]')) : [];
      const masteringCheckoutButtons = masteringModal ? Array.from(masteringModal.querySelectorAll('[data-mastering-checkout]')) : [];
      const masteringCheckoutFeedback = masteringModal ? masteringModal.querySelector('[data-mastering-checkout-feedback]') : null;
      const masteringDownloadButton = masteringModal ? masteringModal.querySelector('[data-mastering-download]') : null;
      const MASTERING_PLAYER_PIN_ANIMATION_CLASS = 'is-pinned-animating';
      const MASTERING_PLAYER_PIN_ANIMATION_NAME = 'masteringPlayerPinReveal';
      const MASTERING_PLAYER_EARLY_THRESHOLD_MIN = 120;
      const MASTERING_PLAYER_EARLY_THRESHOLD_MAX = 260;
      const MASTERING_PLAYER_MIN_SIDE_PADDING = 16;
      const smartlinksModal = document.getElementById('smartlinksModal');
      const smartlinksPage = document.querySelector('[data-smartlinks-page]');
      const smartlinksContainer = smartlinksModal
        ? smartlinksModal.querySelector('.modal__content.smartlinks-modal')
        : smartlinksPage instanceof HTMLElement
          ? smartlinksPage.querySelector('.modal__content.smartlinks-modal')
          : null;
      const smartlinksModalContent = smartlinksContainer;
      const expressModal = document.getElementById('expressDeliveryModal');
      const expressModalContent = expressModal ? expressModal.querySelector('.modal__content.express-modal') : null;
      const expressTriggers = document.querySelectorAll('[data-modal-target="expressDeliveryModal"]');
      const expressForm = expressModal ? expressModal.querySelector('[data-express-form]') : null;
      const expressReleaseInput = expressModal ? expressModal.querySelector('[data-express-album]') : null;
      const expressTypeOptions = expressModal ? Array.from(expressModal.querySelectorAll('[data-express-option]')) : [];
      const expressOptionContainers = expressModal ? Array.from(expressModal.querySelectorAll('[data-express-option-container]')) : [];
      const expressCheckoutButton = expressModal ? expressModal.querySelector('[data-express-checkout]') : null;
      const expressFeedback = expressModal ? expressModal.querySelector('[data-express-feedback]') : null;
      const expressFirstNameInput = expressModal ? expressModal.querySelector('[data-express-first-name]') : null;
      const expressLastNameInput = expressModal ? expressModal.querySelector('[data-express-last-name]') : null;
      const expressEmailInput = expressModal ? expressModal.querySelector('[data-express-email]') : null;
      const smartlinkTriggers = document.querySelectorAll('[data-modal-target="smartlinksModal"]');
      const smartlinkPageTriggers = document.querySelectorAll('[data-dashboard-page-target="smartlinks"]');
      const smartlinksTabs = smartlinksContainer ? Array.from(smartlinksContainer.querySelectorAll('[data-smartlinks-tab]')) : [];
      const smartlinksViews = smartlinksContainer ? Array.from(smartlinksContainer.querySelectorAll('[data-smartlinks-view]')) : [];
      const smartlinkForm = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-form]') : null;
      const smartlinkUpcInput = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-upc]') : null;

      let stickyHeaderActive = false;
      let masteringPlayerPinned = false;
      let masteringStickyOffset = 0;
      let masteringPlayerScrollHandler = null;
      let masteringPlayerResizeHandler = null;
      if (masteringPlayer) {
        masteringPlayer.addEventListener('animationend', (event) => {
          if (event.animationName === MASTERING_PLAYER_PIN_ANIMATION_NAME) {
            masteringPlayer.classList.remove(MASTERING_PLAYER_PIN_ANIMATION_CLASS);
          }
        });
      }
      let publishingCheckoutInProgress = false;
      let publishingCheckoutRedirecting = false;
      const smartlinkSlugInput = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-slug]') : null;
      const smartlinkPlatformInputs = smartlinksContainer ? Array.from(smartlinksContainer.querySelectorAll('[data-smartlink-platform]')) : [];
      const smartlinkSubmit = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-submit]') : null;
      const smartlinkFeedback = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-feedback]') : null;
      const smartlinkPreview = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-preview]') : null;
      const smartlinkPreviewContent = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-preview-content]') : null;
      const smartlinkPreviewPlatforms = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-preview-platforms]') : null;
      const smartlinkPreviewEmpty = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-preview-empty]') : null;
      const smartlinkPreviewLink = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-link]') : null;
      const smartlinkCopyButton = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-copy]') : null;
      const smartlinkCopyFeedback = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-copy-feedback]') : null;
      const smartlinkSuccess = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-success]') : null;
      const smartlinkCover = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-cover]') : null;
      const smartlinkTitle = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-title]') : null;
      const smartlinkSubtitle = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-subtitle]') : null;
      const smartlinkHistoryList = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-history-list]') : null;
      const smartlinkHistoryEmpty = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-history-empty]') : null;
      const smartlinkAnalyticsList = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-list]') : null;
      const smartlinkAnalyticsEmptyList = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-empty-list]') : null;
      const smartlinkAnalyticsEmpty = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-empty]') : null;
      const smartlinkAnalyticsDetails = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-details]') : null;
      const smartlinkAnalyticsTitle = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-title]') : null;
      const smartlinkAnalyticsUpdated = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-updated]') : null;
      const smartlinkAnalyticsArtwork = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-analytics-artwork]') : null;
      const smartlinkSummaryValues = smartlinksContainer ? {
        clicks: smartlinksContainer.querySelector('[data-smartlink-summary="clicks"]'),
        ctr: smartlinksContainer.querySelector('[data-smartlink-summary="ctr"]'),
        conversions: smartlinksContainer.querySelector('[data-smartlink-summary="conversions"]'),
        saves: smartlinksContainer.querySelector('[data-smartlink-summary="saves"]'),
      } : {};
      const smartlinkTimelineSvg = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-timeline]') : null;
      const smartlinkMapPulses = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-map-pulses]') : null;
      const smartlinkPlatformBreakdown = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-platform-breakdown]') : null;
      const smartlinkCitiesList = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-cities]') : null;
      const smartlinkHighlightsList = smartlinksContainer ? smartlinksContainer.querySelector('[data-smartlink-highlights]') : null;
      const paymentsModal = document.getElementById('paymentsModal');
      const paymentsTriggers = document.querySelectorAll('[data-modal-target="paymentsModal"]');
      const paymentsContent = paymentsModal ? paymentsModal.querySelector('[data-payments-content]') : null;
      const paymentsLoadingElement = paymentsModal ? paymentsModal.querySelector('[data-payments-loading]') : null;
      const paymentsErrorElement = paymentsModal ? paymentsModal.querySelector('[data-payments-error]') : null;
      const paymentsErrorMessage = paymentsModal ? paymentsModal.querySelector('[data-payments-error-message]') : null;
      const paymentsRetryButton = paymentsModal ? paymentsModal.querySelector('[data-payments-retry]') : null;
      const paymentsRefreshButton = paymentsModal ? paymentsModal.querySelector('[data-payments-refresh]') : null;
      const paymentsUpdatedContainer = paymentsModal ? paymentsModal.querySelector('[data-payments-updated-container]') : null;
      const paymentsUpdatedLabel = paymentsModal ? paymentsModal.querySelector('[data-payments-updated]') : null;
      const paymentsUpcomingList = paymentsModal ? paymentsModal.querySelector('[data-payments-upcoming]') : null;
      const paymentsUpcomingEmpty = paymentsModal ? paymentsModal.querySelector('[data-payments-upcoming-empty]') : null;
      const paymentsTableBody = paymentsModal ? paymentsModal.querySelector('[data-payments-list]') : null;
      const paymentsEmptyState = paymentsModal ? paymentsModal.querySelector('[data-payments-empty]') : null;
      const publishingModal = document.getElementById('publishingAdministrationModal');
      const publishingModalContent = publishingModal ? publishingModal.querySelector('.modal__content.publishing-modal') : null;
      const publishingTriggers = document.querySelectorAll('[data-modal-target="publishingAdministrationModal"]');
      const publishingCheckoutButton = publishingModal ? publishingModal.querySelector('[data-publishing-checkout]') : null;
      const publishingCheckoutFeedback = publishingModal ? publishingModal.querySelector('[data-publishing-feedback]') : null;
      const musicDistributionModal = document.getElementById('musicDistributionModal');
      const musicDistributionModalContent = musicDistributionModal ? musicDistributionModal.querySelector('.modal__content.distribution-modal') : null;
      const musicDistributionTriggers = document.querySelectorAll('[data-modal-target="musicDistributionModal"]');
      const musicDistributionLaunchButton = musicDistributionModal ? musicDistributionModal.querySelector('[data-distribution-launch]') : null;
      const musicDistributionLaunchLabel = musicDistributionLaunchButton ? musicDistributionLaunchButton.querySelector('span') : null;
      const musicDistributionFeedback = musicDistributionModal ? musicDistributionModal.querySelector('[data-distribution-feedback]') : null;
      const musicDistributionOptOut = musicDistributionModal ? musicDistributionModal.querySelector('[data-distribution-optout]') : null;
      const cloudModal = document.getElementById('cloudStorageModal');
      const cloudTriggers = document.querySelectorAll('[data-modal-target="cloudStorageModal"]');
      const cloudModalOptOut = cloudModal ? cloudModal.querySelector('[data-cloud-modal-optout]') : null;
      const cloudModalCta = cloudModal ? cloudModal.querySelector('[data-cloud-modal-cta]') : null;
      const cloudModalContent = cloudModal ? cloudModal.querySelector('.modal__content.cloud-modal') : null;
      const MUSIC_DISTRIBUTION_MODAL_STORAGE_KEY = 'musicdistro.musicDistribution.introHidden';
      const CLOUD_MODAL_STORAGE_KEY = 'musicdistro.cloudStorage.introHidden';
      const SMARTLINK_PLATFORMS = <?= json_encode($smartlinkPlatforms, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES) ?>;
      const SMARTLINK_SHARE_BASE = <?= json_encode($smartlinkShareBase, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES) ?>;
      const SMARTLINK_RESOLVER_ENDPOINT = '/smartlink-resolver.php';
      const SMARTLINK_ANALYTICS_ENDPOINT = '/smartlink-analytics.php';
      const smartlinksI18n = DASHBOARD_I18N.smartlinks || {};
      const expressI18n = DASHBOARD_I18N.express || {};
      const expressActionsI18n = (expressI18n.form && expressI18n.form.actions) || {};
      const expressFeedbackI18n = (expressI18n.form && expressI18n.form.feedback) || {};
      const expressSubmitTemplate = typeof expressActionsI18n.submit_label === 'string'
        ? expressActionsI18n.submit_label
        : '';
      const paymentsI18n = DASHBOARD_I18N.payments || {};
      const aiComposerI18n = DASHBOARD_I18N.ai_composer || {};
      const adminNotificationsI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.notifications) || {};
      const adminAiI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.ai) || {};
      const adminDesignI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.design) || {};
      const brandingStrings = adminDesignI18n.branding || {};
      const brandingActionsI18n = brandingStrings.actions || {};
      const brandingFeedbackI18n = brandingStrings.feedback || {};
      const adminConfigurationI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.configuration) || {};
      const adminTranslationsI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.translations) || {};
      const adminNewsletterI18n = (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.newsletter) || {};
      const publishingI18n = DASHBOARD_I18N.publishing || {};
      const LOGIN_HISTORY_ENDPOINT = '/admin-user-logins.php';
      const DESIGN_SETTINGS_ENDPOINT = '/admin-design-settings.php';
      const DESIGN_CHANGE_NOTICE_STORAGE_KEY = 'musicdistro.dashboard.designChange';
      const DESIGN_CHANGE_FEEDBACK_STORAGE_KEY = 'musicdistro.dashboard.designFeedback';
      const BRANDING_SETTINGS_ENDPOINT = '/admin-branding-settings.php';
      const stripeSettingsForm = document.querySelector('[data-stripe-settings]');
      const stripeSettingsSubmit = document.getElementById('stripeSettingsSubmit');
      const stripeSettingsFeedback = document.getElementById('stripeSettingsFeedback');
      const defaultCurrencySelect = stripeSettingsForm ? stripeSettingsForm.querySelector('#defaultCurrency') : null;
      const currencyAllowChoiceToggle = stripeSettingsForm ? stripeSettingsForm.querySelector('#currencyAllowChoice') : null;
      const currencyOptionsContainer = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-currency-options]') : null;
      const currencyToggleInputs = currencyOptionsContainer
        ? Array.from(currencyOptionsContainer.querySelectorAll('[data-currency-toggle]'))
        : [];
      const currencySymbolTargets = stripeSettingsForm
        ? Array.from(stripeSettingsForm.querySelectorAll('[data-default-currency-symbol]'))
        : [];
      const currencySymbolFallback = currencySymbolTargets.length > 0
        ? (currencySymbolTargets[0].textContent || '').trim()
        : '';
      const distributionSettingsForm = document.getElementById('distributionSettingsForm');
      const distributionSettingsSubmit = document.getElementById('distributionSettingsSubmit');
      const distributionSettingsFeedback = document.getElementById('distributionSettingsFeedback');
      const distributionProviderSelect = distributionSettingsForm ? distributionSettingsForm.querySelector('[data-distribution-provider]') : null;
      const distributionProviderSections = distributionSettingsForm ? Array.from(distributionSettingsForm.querySelectorAll('[data-provider-fields]')) : [];
      const distributionSonosuiteBaseUrlInput = distributionSettingsForm ? distributionSettingsForm.querySelector('#sonosuiteBaseUrl') : null;
      const distributionSonosuiteSecretInput = distributionSettingsForm ? distributionSettingsForm.querySelector('#sonosuiteSharedSecret') : null;
      const newsletterForm = document.getElementById('newsletterForm');
      const newsletterSubmit = newsletterForm ? newsletterForm.querySelector('[data-newsletter-submit]') : null;
      const newsletterFeedback = newsletterForm ? newsletterForm.querySelector('[data-newsletter-feedback]') : null;
      const newsletterTransportSelect = newsletterForm ? newsletterForm.querySelector('[data-newsletter-transport]') : null;
      const newsletterRecipientRadios = newsletterForm ? Array.from(newsletterForm.querySelectorAll('[data-newsletter-recipient-mode]')) : [];
      const newsletterRecipientWrapper = newsletterForm ? newsletterForm.querySelector('[data-newsletter-recipient-select]') : null;
      const newsletterRecipientsSelect = newsletterForm ? newsletterForm.querySelector('[data-newsletter-recipient-options]') : null;
      const newsletterExtraEmailsInput = newsletterForm ? newsletterForm.querySelector('#newsletterExtraEmails') : null;
      const newsletterSenderNameInput = newsletterForm ? newsletterForm.querySelector('#newsletterSenderName') : null;
      const newsletterSenderEmailInput = newsletterForm ? newsletterForm.querySelector('#newsletterSenderEmail') : null;
      const newsletterReplyToInput = newsletterForm ? newsletterForm.querySelector('#newsletterReplyTo') : null;
      const designSettingsForm = document.getElementById('designSettingsForm');
      const designSettingsSubmit = designSettingsForm ? designSettingsForm.querySelector('[data-design-submit]') : null;
      const designSettingsFeedback = designSettingsForm ? designSettingsForm.querySelector('[data-design-feedback]') : null;
      const designVariantInputs = designSettingsForm ? Array.from(designSettingsForm.querySelectorAll('input[name="dashboard_design_variant"]')) : [];
      const designPreview = designSettingsForm ? designSettingsForm.querySelector('[data-design-preview]') : null;
      const brandingSettingsForm = document.getElementById('brandingSettingsForm');
      const brandingSiteNameInput = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-site-name]') : null;
      const brandingLogoInput = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-logo-input]') : null;
      const brandingFaviconInput = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-favicon-input]') : null;
      const brandingFooterInput = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-footer]') : null;
      const brandingLogoPreviewImage = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-logo-preview] img') : null;
      const brandingFaviconPreviewImage = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-favicon-preview] img') : null;
      const brandingSubmit = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-submit]') : null;
      const brandingFeedback = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-feedback]') : null;
      const brandingSiteNameError = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-site-name-error]') : null;
      const brandingLogoError = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-logo-error]') : null;
      const brandingFaviconError = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-favicon-error]') : null;
      const brandingFooterError = brandingSettingsForm ? brandingSettingsForm.querySelector('[data-branding-footer-error]') : null;
      const dashboardLogoElement = document.querySelector('[data-dashboard-logo]');
      const dashboardTitleElement = document.querySelector('[data-dashboard-title]');
      const faviconLinkElement = document.querySelector('link[rel="icon"]');
      const dashboardFooterElement = document.querySelector('[data-dashboard-footer]');
      const designLoadingOverlay = document.querySelector('[data-design-loading]');
      const designLoadingHeadline = designLoadingOverlay
        ? designLoadingOverlay.querySelector('[data-design-loading-headline]')
        : null;
      const designLoadingVariantLabel = designLoadingOverlay
        ? designLoadingOverlay.querySelector('[data-design-loading-variant]')
        : null;
      const designChangeNotice = document.querySelector('[data-design-notice]');
      const designChangeNoticeEyebrow = designChangeNotice
        ? designChangeNotice.querySelector('[data-design-notice-eyebrow]')
        : null;
      const designChangeNoticeTitle = designChangeNotice
        ? designChangeNotice.querySelector('[data-design-notice-title]')
        : null;
      const designChangeNoticeMessage = designChangeNotice
        ? designChangeNotice.querySelector('[data-design-notice-message]')
        : null;
      const designChangeNoticeConfirm = designChangeNotice
        ? designChangeNotice.querySelector('[data-design-notice-confirm]')
        : null;
      const designChangeNoticeCancel = designChangeNotice
        ? designChangeNotice.querySelector('[data-design-notice-cancel]')
        : null;
      const designPreviewLabelsRaw = designPreview ? designPreview.dataset.variantLabels : '';
      let designPreviewLabelMap = {};
      if (designPreviewLabelsRaw) {
        try {
          const parsed = JSON.parse(designPreviewLabelsRaw);
          if (parsed && typeof parsed === 'object') {
            designPreviewLabelMap = parsed;
          }
        } catch (error) {
          designPreviewLabelMap = {};
        }
      }
      const brandingTitleTemplate = typeof brandingConfig.title_template === 'string'
        ? brandingConfig.title_template
        : '';
      const brandingAltTemplate = typeof brandingConfig.brand_alt_template === 'string'
        ? brandingConfig.brand_alt_template
        : '';
      const brandingDefaultFooterTemplate = typeof brandingConfig.footer_default === 'string'
        ? brandingConfig.footer_default
        : (dashboardFooterElement && typeof dashboardFooterElement.dataset.footerDefault === 'string'
          ? dashboardFooterElement.dataset.footerDefault
          : '');
      let brandingCurrentSiteName = typeof brandingConfig.site_name === 'string' ? brandingConfig.site_name : '';
      let brandingCurrentLogo = typeof brandingConfig.logo === 'string' ? brandingConfig.logo : '';
      let brandingCurrentFavicon = typeof brandingConfig.favicon === 'string' ? brandingConfig.favicon : '';
      let brandingCurrentFooterTemplate = typeof brandingConfig.footer_copyright === 'string'
        ? brandingConfig.footer_copyright
        : (dashboardFooterElement && typeof dashboardFooterElement.dataset.footerTemplate === 'string'
          ? dashboardFooterElement.dataset.footerTemplate
          : '');
      let brandingLogoObjectUrl = null;
      let brandingFaviconObjectUrl = null;
      const newsletterSubjectInput = newsletterForm ? newsletterForm.querySelector('#newsletterSubject') : null;
      const newsletterHtmlInput = newsletterForm ? newsletterForm.querySelector('[data-newsletter-html]') : null;
      const newsletterTextInput = newsletterForm ? newsletterForm.querySelector('#newsletterTextContent') : null;
      const newsletterBatchInput = newsletterForm ? newsletterForm.querySelector('[data-newsletter-batch]') : null;
      const newsletterIntervalValueInput = newsletterForm ? newsletterForm.querySelector('[data-newsletter-interval-value]') : null;
      const newsletterIntervalUnitSelect = newsletterForm ? newsletterForm.querySelector('[data-newsletter-interval-unit]') : null;
      const newsletterSmtpSection = newsletterForm ? newsletterForm.querySelector('[data-newsletter-smtp]') : null;
      const newsletterSmtpHostInput = newsletterForm ? newsletterForm.querySelector('#newsletterSmtpHost') : null;
      const newsletterSmtpPortInput = newsletterForm ? newsletterForm.querySelector('#newsletterSmtpPort') : null;
      const newsletterSmtpEncryptionSelect = newsletterForm ? newsletterForm.querySelector('#newsletterSmtpEncryption') : null;
      const newsletterSmtpUsernameInput = newsletterForm ? newsletterForm.querySelector('#newsletterSmtpUsername') : null;
      const newsletterSmtpPasswordInput = newsletterForm ? newsletterForm.querySelector('#newsletterSmtpPassword') : null;
      const notificationSettingsForm = document.getElementById('notificationSettingsForm');
      const notificationSettingsSubmit = document.getElementById('notificationSettingsSubmit');
      const notificationSettingsFeedback = document.getElementById('notificationSettingsFeedback');
      const notificationBroadcastForm = document.getElementById('notificationBroadcastForm');
      const notificationBroadcastSubmit = document.getElementById('notificationBroadcastSubmit');
      const notificationBroadcastFeedback = document.getElementById('notificationBroadcastFeedback');
      const notificationsEnabledInput = notificationSettingsForm ? notificationSettingsForm.querySelector('#dashboardNotificationsEnabled') : null;
      const notificationsProfileReminderInput = notificationSettingsForm ? notificationSettingsForm.querySelector('#dashboardNotificationsProfileReminder') : null;
      const notificationAutomationsGroup = notificationSettingsForm ? notificationSettingsForm.querySelector('[data-notification-automations]') : null;
      const aiSettingsForm = document.getElementById('aiSettingsForm');
      const aiSettingsSubmit = document.getElementById('aiSettingsSubmit');
      const aiSettingsFeedback = document.getElementById('aiSettingsFeedback');
      const aiStatusElement = aiSettingsForm ? aiSettingsForm.querySelector('[data-ai-status]') : null;
      const aiKeyInput = aiSettingsForm ? aiSettingsForm.querySelector('[data-ai-key-input]') : null;
      const configurationSettingsForm = document.getElementById('configurationSettingsForm');
      const configurationSettingsSubmit = document.getElementById('configurationSettingsSubmit');
      const configurationSettingsFeedback = document.getElementById('configurationSettingsFeedback');
      const configurationStudioToggle = configurationSettingsForm ? configurationSettingsForm.querySelector('#dashboardStudioCardEnabled') : null;
      const configurationCardInputs = configurationSettingsForm ? Array.from(configurationSettingsForm.querySelectorAll('[data-configuration-card]')) : [];
      const configurationLanguagesContainer = configurationSettingsForm ? configurationSettingsForm.querySelector('[data-configuration-language-options]') : null;
      const configurationLanguageInputs = configurationLanguagesContainer ? Array.from(configurationLanguagesContainer.querySelectorAll('[data-configuration-language]')) : [];
      const configurationDefaultLanguageSelect = configurationSettingsForm ? configurationSettingsForm.querySelector('[data-configuration-default-language]') : null;
      const configurationAutoDetectToggle = configurationSettingsForm ? configurationSettingsForm.querySelector('[data-configuration-auto-detect]') : null;
      const configurationMultilingualToggle = configurationSettingsForm ? configurationSettingsForm.querySelector('[data-configuration-multilingual]') : null;
      const monetizationPaymentsToggle = stripeSettingsForm ? stripeSettingsForm.querySelector('#masteringPaymentsEnabled') : null;
      const monetizationStateLabel = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-monetization-state]') : null;
      const monetizationGrid = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-monetization-grid]') : null;
      const monetizationInputs = stripeSettingsForm ? Array.from(stripeSettingsForm.querySelectorAll('[data-monetization-input]')) : [];
      const monetizationSingleInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#masteringPriceSingle') : null;
      const monetizationYearlyInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#masteringPriceYearly') : null;
      const publishingSetupPriceInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#publishingSetupPrice') : null;
      const cloudUsageToggle = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudUsageEnabled') : null;
      const cloudUsageGrid = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-cloud-usage-grid]') : null;
      const cloudUsageInputs = stripeSettingsForm ? Array.from(stripeSettingsForm.querySelectorAll('[data-cloud-usage-input]')) : [];
      const cloudUsageState = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-cloud-usage-state]') : null;
      const cloudPricePerMbInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudPricePerMb') : null;
      const cloudPricePerFileInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudPricePerFile') : null;
      const cloudSubscriptionToggle = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudSubscriptionEnabled') : null;
      const cloudSubscriptionGrid = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-cloud-subscription-grid]') : null;
      const cloudSubscriptionInputs = stripeSettingsForm ? Array.from(stripeSettingsForm.querySelectorAll('[data-cloud-subscription-input]')) : [];
      const cloudSubscriptionState = stripeSettingsForm ? stripeSettingsForm.querySelector('[data-cloud-subscription-state]') : null;
      const cloudSubscriptionPriceInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudSubscriptionPrice') : null;
      const cloudSubscriptionStorageInput = stripeSettingsForm ? stripeSettingsForm.querySelector('#cloudSubscriptionStorage') : null;
      const translationsModal = document.getElementById('translationsModal');
      const translationsModalContent = translationsModal ? translationsModal.querySelector('.modal__content.translations-modal') : null;
      const translationsLoadingElement = translationsModal ? translationsModal.querySelector('[data-translations-loading]') : null;
      const translationsErrorElement = translationsModal ? translationsModal.querySelector('[data-translations-error]') : null;
      const translationsErrorMessage = translationsErrorElement ? translationsErrorElement.querySelector('[data-translations-error-message]') : null;
      const translationsContentContainer = translationsModal ? translationsModal.querySelector('[data-translations-content]') : null;
      const TRANSLATIONS_KEY_COLUMN_WIDTH = 260;
      const TRANSLATIONS_LOCALE_MIN_WIDTH = 260;
      const translationsTableContainer = translationsModal ? translationsModal.querySelector('[data-translations-table-container]') : null;
      const translationsTableElement = translationsModal ? translationsModal.querySelector('.translations-table') : null;
      const translationsTableHeadRow = translationsModal ? translationsModal.querySelector('[data-translations-head-row]') : null;
      const translationsTableBody = translationsModal ? translationsModal.querySelector('[data-translations-table-body]') : null;
      const translationsEmptyState = translationsModal ? translationsModal.querySelector('[data-translations-empty]') : null;
      const translationsFeedback = translationsModal ? translationsModal.querySelector('[data-translations-feedback]') : null;

      const aiStatusMessages = (adminAiI18n && adminAiI18n.status) || {};

      function updateAiStatus(configured) {
        if (!aiStatusElement) {
          return;
        }

        const message = configured
          ? aiStatusMessages.configured || 'A Suno API key is configured.'
          : aiStatusMessages.missing || 'No Suno API key configured.';

        aiStatusElement.textContent = message;
        aiStatusElement.dataset.aiState = configured ? 'configured' : 'missing';
      }

      if (aiStatusElement) {
        const initialConfigured = typeof aiConfig.has_api_key === 'boolean'
          ? aiConfig.has_api_key
          : Boolean(aiKeyInput && typeof aiKeyInput.value === 'string' && aiKeyInput.value.trim() !== '');
        updateAiStatus(initialConfigured);
      }
      const translationsSearchInput = translationsModal ? translationsModal.querySelector('[data-translations-search]') : null;
      const translationsSaveButton = translationsModal ? translationsModal.querySelector('[data-translations-save]') : null;
      const translationsRetryButton = translationsModal ? translationsModal.querySelector('[data-translations-retry]') : null;
      const manageTranslationsButton = document.querySelector('[data-translations-manage]');
      const translationsPagination = translationsModal ? translationsModal.querySelector('[data-translations-pagination]') : null;
      const translationsPaginationStatus = translationsPagination ? translationsPagination.querySelector('[data-translations-pagination-status]') : null;
      const translationsPaginationPrev = translationsPagination ? translationsPagination.querySelector('[data-translations-page="prev"]') : null;
      const translationsPaginationNext = translationsPagination ? translationsPagination.querySelector('[data-translations-page="next"]') : null;
      const TRANSLATIONS_ENDPOINT = '/admin-translations.php';
      let translationsLoaded = false;
      let translationsLoading = false;
      let translationsLanguages = [];
      let translationsOriginals = {};
      let translationsCurrentValues = {};
      let translationsFilterQuery = '';
      let translationsPage = 1;
      let translationsFilteredKeys = [];
      let translationsAllKeys = [];
      let translationsNormalizedKeys = new Map();
      const TRANSLATIONS_PAGE_SIZE = 20;
      const translationsChangedKeys = new Set();
      const translationsTableStrings = translationsModal && adminTranslationsI18n && typeof adminTranslationsI18n.table === 'object'
        ? adminTranslationsI18n.table
        : {};
      const translationsPaginationStrings = translationsModal && adminTranslationsI18n && typeof adminTranslationsI18n.pagination === 'object'
        ? adminTranslationsI18n.pagination
        : {};
      const normalizeLanguageCode = (value) => (typeof value === 'string' ? value.trim().toLowerCase() : '');

      let defaultLanguageCode = normalizeLanguageCode(
        typeof translationsConfig.default === 'string' && translationsConfig.default
          ? translationsConfig.default
          : (configurationLanguagesContainer && typeof configurationLanguagesContainer.dataset.defaultLanguage === 'string'
            ? configurationLanguagesContainer.dataset.defaultLanguage
            : '')
      );

      if (!defaultLanguageCode && configurationDefaultLanguageSelect && typeof configurationDefaultLanguageSelect.value === 'string') {
        defaultLanguageCode = normalizeLanguageCode(configurationDefaultLanguageSelect.value);
      }

      if (configurationLanguagesContainer) {
        configurationLanguagesContainer.dataset.defaultLanguage = defaultLanguageCode;
      }

      const getNewsletterRecipientMode = () => {
        if (!newsletterRecipientRadios || newsletterRecipientRadios.length === 0) {
          return 'all';
        }

        const activeRadio = newsletterRecipientRadios.find((radio) => radio instanceof HTMLInputElement && radio.checked);

        if (activeRadio && typeof activeRadio.value === 'string' && activeRadio.value !== '') {
          return activeRadio.value;
        }

        return 'all';
      };

      const updateNewsletterRecipientsVisibility = () => {
        if (!newsletterRecipientWrapper) {
          return;
        }

        const mode = getNewsletterRecipientMode();
        const showSelect = mode === 'selected';
        newsletterRecipientWrapper.hidden = !showSelect;

        if (newsletterRecipientsSelect) {
          const options = Array.from(newsletterRecipientsSelect.options || []);
          options.forEach((option) => {
            option.disabled = !showSelect;
          });
        }
      };

      const updateNewsletterTransportVisibility = () => {
        if (!newsletterSmtpSection) {
          return;
        }

        const transportValue = newsletterTransportSelect && typeof newsletterTransportSelect.value === 'string'
          ? newsletterTransportSelect.value
          : 'phpmail';
        const showSmtp = transportValue === 'smtp';
        newsletterSmtpSection.hidden = !showSmtp;

        const smtpFields = Array.from(newsletterSmtpSection.querySelectorAll('input, select, textarea'));
        smtpFields.forEach((field) => {
          if ('disabled' in field) {
            field.disabled = !showSmtp;
          }
        });
      };

      function updateDesignOptionsState() {
        if (!designVariantInputs || designVariantInputs.length === 0) {
          return;
        }

        designVariantInputs.forEach((input) => {
          const option = input.closest('[data-design-option]');
          if (option) {
            option.classList.toggle('is-active', input.checked);
          }
        });
      }

      function getDesignVariantLabel(variant) {
        if (typeof variant !== 'string' || variant === '') {
          return '';
        }

        const normalizedVariant = variant.toLowerCase();
        const previewLabelCandidate = Object.prototype.hasOwnProperty.call(designPreviewLabelMap, normalizedVariant)
          ? designPreviewLabelMap[normalizedVariant]
          : null;

        return typeof previewLabelCandidate === 'string' && previewLabelCandidate !== ''
          ? previewLabelCandidate
          : variant;
      }

      function updateDesignPreviewVariant(variant) {
        if (!designPreview) {
          return;
        }

        if (typeof variant !== 'string' || variant === '') {
          return;
        }

        designPreview.dataset.variant = variant;
        const previewLabel = getDesignVariantLabel(variant);
        const labelTarget = designPreview.querySelector('[data-design-preview-label]');
        if (labelTarget) {
          labelTarget.textContent = previewLabel;
        }
      }

      function formatDesignNoticeString(template, variantLabel) {
        if (typeof template !== 'string' || template === '') {
          return '';
        }

        const label = typeof variantLabel === 'string' ? variantLabel : '';
        return template.replace(/\{design\}/gi, label);
      }

      function setDesignNoticeVariant(variant) {
        if (!designChangeNotice) {
          return;
        }

        if (typeof variant === 'string' && variant !== '') {
          designChangeNotice.dataset.designVariant = variant;
        } else {
          delete designChangeNotice.dataset.designVariant;
        }
      }

      function hideDesignChangeNotice() {
        if (!designChangeNotice) {
          return;
        }

        designNoticeMode = 'idle';
        designNoticePreviousVariant = '';
        delete designChangeNotice.dataset.designNoticeMode;
        designChangeNotice.classList.remove('is-visible');
        designChangeNotice.setAttribute('aria-hidden', 'true');
        setDesignNoticeVariant('');
        if (designChangeNoticeEyebrow) {
          designChangeNoticeEyebrow.textContent = '';
        }
        if (designChangeNoticeTitle) {
          designChangeNoticeTitle.textContent = '';
        }
        if (designChangeNoticeMessage) {
          designChangeNoticeMessage.textContent = '';
        }
        if (designChangeNoticeConfirm) {
          const originalLabel = designChangeNoticeConfirm.dataset.originalLabel || '';
          if (originalLabel) {
            designChangeNoticeConfirm.textContent = originalLabel;
          }
          designChangeNoticeConfirm.classList.remove('is-loading');
          designChangeNoticeConfirm.disabled = false;
        }
        if (designChangeNoticeCancel) {
          designChangeNoticeCancel.disabled = false;
        }

        if (designSettingsSubmit && !designSettingsSaving) {
          designSettingsSubmit.disabled = false;
        }
      }

      function showDesignChangeNotice(variant, mode = 'preview', previousVariant = '') {
        if (!designChangeNotice) {
          return;
        }

        const noticeMode = typeof mode === 'string' && mode !== '' ? mode : 'preview';
        designNoticeMode = noticeMode;
        designNoticePreviousVariant = typeof previousVariant === 'string' ? previousVariant : '';
        designChangeNotice.dataset.designNoticeMode = noticeMode;
        const noticeConfig = adminDesignI18n.notice || {};
        const variantLabel = getDesignVariantLabel(variant);
        const fallbackVariant = variantLabel || variant || '';

        if (designChangeNoticeEyebrow) {
          const eyebrowTemplate = typeof noticeConfig.eyebrow === 'string' ? noticeConfig.eyebrow : '';
          designChangeNoticeEyebrow.textContent = formatDesignNoticeString(eyebrowTemplate, fallbackVariant);
        }

        if (designChangeNoticeTitle) {
          const titleTemplate = typeof noticeConfig.title === 'string' && noticeConfig.title !== ''
            ? noticeConfig.title
            : 'Previewing {design}';
          designChangeNoticeTitle.textContent = formatDesignNoticeString(titleTemplate, fallbackVariant);
        }

        if (designChangeNoticeMessage) {
          const messageTemplate = typeof noticeConfig.message === 'string' && noticeConfig.message !== ''
            ? noticeConfig.message
            : 'Keep this layout or revert to the previous one?';
          designChangeNoticeMessage.textContent = formatDesignNoticeString(messageTemplate, fallbackVariant);
        }

        if (designChangeNoticeConfirm) {
          const confirmLabel = typeof noticeConfig.confirm === 'string' && noticeConfig.confirm !== ''
            ? noticeConfig.confirm
            : ((adminDesignI18n.actions && adminDesignI18n.actions.submit) || 'Save design');
          designChangeNoticeConfirm.textContent = confirmLabel;
          designChangeNoticeConfirm.dataset.originalLabel = confirmLabel;
          designChangeNoticeConfirm.disabled = false;
          designChangeNoticeConfirm.classList.remove('is-loading');
        }

        if (designChangeNoticeCancel) {
          const cancelLabel = typeof noticeConfig.cancel === 'string' && noticeConfig.cancel !== ''
            ? noticeConfig.cancel
            : 'Cancel';
          designChangeNoticeCancel.textContent = cancelLabel;
          designChangeNoticeCancel.disabled = false;
        }

        if (designSettingsSubmit) {
          designSettingsSubmit.disabled = noticeMode === 'preview';
        }

        setDesignNoticeVariant(variant);
        designChangeNotice.classList.add('is-visible');
        designChangeNotice.setAttribute('aria-hidden', 'false');
      }

      function setDesignNoticeLoading(isLoading) {
        if (!designChangeNotice) {
          return;
        }

        const active = Boolean(isLoading);
        if (designChangeNoticeConfirm) {
          const storedLabel = designChangeNoticeConfirm.dataset.originalLabel
            || designChangeNoticeConfirm.textContent
            || '';
          if (!designChangeNoticeConfirm.dataset.originalLabel && storedLabel) {
            designChangeNoticeConfirm.dataset.originalLabel = storedLabel;
          }

          if (active) {
            const loadingLabel = (adminDesignI18n.actions && adminDesignI18n.actions.processing)
              || storedLabel
              || 'Saving…';
            designChangeNoticeConfirm.textContent = loadingLabel;
            designChangeNoticeConfirm.classList.add('is-loading');
          } else {
            const resetLabel = designChangeNoticeConfirm.dataset.originalLabel || storedLabel;
            if (resetLabel) {
              designChangeNoticeConfirm.textContent = resetLabel;
            }
            designChangeNoticeConfirm.classList.remove('is-loading');
          }

          designChangeNoticeConfirm.disabled = active;
        }

        if (designChangeNoticeCancel) {
          designChangeNoticeCancel.disabled = active;
        }
      }

      function storeDesignChangeNotice(nextVariant, previousVariant) {
        if (typeof nextVariant !== 'string' || nextVariant === '') {
          return;
        }

        if (!window.sessionStorage) {
          return;
        }

        const payload = {
          current: nextVariant,
          previous: typeof previousVariant === 'string' ? previousVariant : '',
        };

        try {
          sessionStorage.setItem(DESIGN_CHANGE_NOTICE_STORAGE_KEY, JSON.stringify(payload));
        } catch (error) {
          // Ignore storage errors
        }
      }

      function consumeStoredDesignChangeNotice() {
        if (!window.sessionStorage) {
          return null;
        }

        try {
          const stored = sessionStorage.getItem(DESIGN_CHANGE_NOTICE_STORAGE_KEY);
          if (!stored) {
            return null;
          }

          sessionStorage.removeItem(DESIGN_CHANGE_NOTICE_STORAGE_KEY);
          const parsed = JSON.parse(stored);
          if (!parsed || typeof parsed !== 'object') {
            return null;
          }

          const currentVariant = typeof parsed.current === 'string' ? parsed.current : '';
          const previousVariant = typeof parsed.previous === 'string' ? parsed.previous : '';
          return {
            current: currentVariant,
            previous: previousVariant,
          };
        } catch (error) {
          try {
            sessionStorage.removeItem(DESIGN_CHANGE_NOTICE_STORAGE_KEY);
          } catch (storageError) {
            // Ignore storage errors
          }
          return null;
        }
      }

      function clearStoredDesignChangeNotice() {
        if (!window.sessionStorage) {
          return;
        }

        try {
          sessionStorage.removeItem(DESIGN_CHANGE_NOTICE_STORAGE_KEY);
        } catch (error) {
          // Ignore storage errors
        }
      }

      function storeDesignChangeFeedback(message) {
        if (typeof message !== 'string') {
          return false;
        }

        const trimmed = message.trim();
        if (trimmed === '') {
          return false;
        }

        if (!window.sessionStorage) {
          return false;
        }

        try {
          sessionStorage.setItem(
            DESIGN_CHANGE_FEEDBACK_STORAGE_KEY,
            JSON.stringify({ message: trimmed })
          );
          return true;
        } catch (error) {
          return false;
        }
      }

      function consumeStoredDesignFeedback() {
        if (!window.sessionStorage) {
          return '';
        }

        try {
          const stored = sessionStorage.getItem(DESIGN_CHANGE_FEEDBACK_STORAGE_KEY);
          if (!stored) {
            return '';
          }

          sessionStorage.removeItem(DESIGN_CHANGE_FEEDBACK_STORAGE_KEY);
          const parsed = JSON.parse(stored);
          if (!parsed || typeof parsed !== 'object') {
            return '';
          }

          const message = typeof parsed.message === 'string' ? parsed.message.trim() : '';
          return message;
        } catch (error) {
          try {
            sessionStorage.removeItem(DESIGN_CHANGE_FEEDBACK_STORAGE_KEY);
          } catch (storageError) {
            // Ignore storage errors
          }
          return '';
        }
      }

      function maybeShowStoredDesignFeedback() {
        if (!designSettingsFeedback) {
          consumeStoredDesignFeedback();
          return;
        }

        const feedbackMessage = consumeStoredDesignFeedback();
        if (!feedbackMessage) {
          return;
        }

        designSettingsFeedback.textContent = feedbackMessage;
        designSettingsFeedback.classList.remove('error');
        designSettingsFeedback.classList.add('success');
      }

      function maybeShowStoredDesignNotice() {
        const storedNotice = consumeStoredDesignChangeNotice();
        if (!storedNotice) {
          return;
        }

        const currentVariant = typeof storedNotice.current === 'string' ? storedNotice.current : '';
        if (!currentVariant || currentVariant !== savedDesignVariant) {
          return;
        }

        const previousVariant = typeof storedNotice.previous === 'string' ? storedNotice.previous : '';
        const bodyElement = document.body;
        if (
          bodyElement
          && bodyElement.dataset
          && bodyElement.dataset.dashboardDesign === 'aura'
        ) {
          pendingDashboardPageId = 'admin';
        }
        showDesignChangeNotice(currentVariant, 'post-change', previousVariant);
      }

      function applyDashboardDesignVariant(variant) {
        if (typeof variant !== 'string' || variant === '') {
          return;
        }

        document.body.dataset.dashboardDesign = variant;
        updateDesignPreviewVariant(variant);
        updateDesignOptionsState();
      }

      function submitPendingDesignVariant() {
        if (!designSettingsForm || designSettingsSaving) {
          return;
        }

        const targetVariant = pendingDesignVariant || previewDesignVariant;
        if (!targetVariant || targetVariant === savedDesignVariant) {
          return;
        }

        designSettingsSaving = true;
        setDesignNoticeLoading(true);

        if (typeof designSettingsForm.requestSubmit === 'function') {
          designSettingsForm.requestSubmit();
        } else {
          const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
          designSettingsForm.dispatchEvent(submitEvent);
        }
      }

      function cacheBustUrl(url) {
        if (typeof url !== 'string' || url === '') {
          return '';
        }

        const separator = url.includes('?') ? '&' : '?';
        return `${url}${separator}v=${Date.now()}`;
      }

      function clearBrandingErrors() {
        if (brandingSiteNameError) {
          brandingSiteNameError.textContent = '';
        }
        if (brandingLogoError) {
          brandingLogoError.textContent = '';
        }
        if (brandingFaviconError) {
          brandingFaviconError.textContent = '';
        }
        if (brandingFooterError) {
          brandingFooterError.textContent = '';
        }
      }

      function formatBrandingFooter(template) {
        if (typeof template !== 'string' || template === '') {
          return '';
        }

        const year = new Date().getFullYear().toString();
        const site = brandingCurrentSiteName || '';
        return template.replace(/:year/gi, year).replace(/:site/gi, site);
      }

      function renderBrandingFooter() {
        if (!dashboardFooterElement) {
          return;
        }

        const storedTemplate = typeof brandingCurrentFooterTemplate === 'string'
          ? brandingCurrentFooterTemplate
          : '';
        const template = storedTemplate !== ''
          ? storedTemplate
          : (brandingDefaultFooterTemplate || '');
        const rendered = formatBrandingFooter(template);
        dashboardFooterElement.textContent = rendered;
        dashboardFooterElement.dataset.footerTemplate = storedTemplate;
      }

      function applyBrandingFooter(template) {
        const nextTemplate = typeof template === 'string' ? template.trim() : '';
        brandingCurrentFooterTemplate = nextTemplate;

        if (brandingFooterInput) {
          brandingFooterInput.value = nextTemplate;
        }

        renderBrandingFooter();
      }

      function applyBrandingSiteName(nextSiteName) {
        if (typeof nextSiteName !== 'string' || nextSiteName.trim() === '') {
          return;
        }

        const trimmed = nextSiteName.trim();
        brandingCurrentSiteName = trimmed;

        if (brandingSiteNameInput) {
          brandingSiteNameInput.value = trimmed;
        }

        if (dashboardTitleElement) {
          const template = dashboardTitleElement.dataset.titleTemplate || brandingTitleTemplate;
          if (template) {
            dashboardTitleElement.textContent = template.replace(':site', trimmed);
          } else {
            dashboardTitleElement.textContent = trimmed;
          }
        }

        if (dashboardLogoElement) {
          const altTemplate = dashboardLogoElement.dataset.altTemplate || brandingAltTemplate;
          if (altTemplate) {
            dashboardLogoElement.setAttribute('alt', altTemplate.replace(':site', trimmed));
          }
        }

        if (brandingLogoPreviewImage) {
          const altTemplate = brandingLogoPreviewImage.dataset.altTemplate || '';
          if (altTemplate) {
            brandingLogoPreviewImage.setAttribute('alt', altTemplate.replace(':site', trimmed));
          }
        }

        if (brandingFaviconPreviewImage) {
          const altTemplate = brandingFaviconPreviewImage.dataset.altTemplate || '';
          if (altTemplate) {
            brandingFaviconPreviewImage.setAttribute('alt', altTemplate.replace(':site', trimmed));
          }
        }

        if (brandingTitleTemplate) {
          document.title = brandingTitleTemplate.replace(':site', trimmed);
        }

        renderBrandingFooter();
      }

      function applyBrandingLogo(nextLogoUrl, bust = true) {
        if (typeof nextLogoUrl !== 'string' || nextLogoUrl === '') {
          return;
        }

        brandingCurrentLogo = nextLogoUrl;

        if (brandingLogoObjectUrl) {
          URL.revokeObjectURL(brandingLogoObjectUrl);
          brandingLogoObjectUrl = null;
        }

        const resolvedUrl = bust ? cacheBustUrl(nextLogoUrl) : nextLogoUrl;

        if (brandingLogoPreviewImage) {
          brandingLogoPreviewImage.src = resolvedUrl;
        }

        if (dashboardLogoElement) {
          dashboardLogoElement.src = resolvedUrl;
        }
      }

      function applyBrandingFavicon(nextFaviconUrl, bust = true) {
        if (typeof nextFaviconUrl !== 'string' || nextFaviconUrl === '') {
          return;
        }

        brandingCurrentFavicon = nextFaviconUrl;

        if (brandingFaviconObjectUrl) {
          URL.revokeObjectURL(brandingFaviconObjectUrl);
          brandingFaviconObjectUrl = null;
        }

        const resolvedUrl = bust ? cacheBustUrl(nextFaviconUrl) : nextFaviconUrl;

        if (brandingFaviconPreviewImage) {
          brandingFaviconPreviewImage.src = resolvedUrl;
        }

        if (faviconLinkElement) {
          faviconLinkElement.setAttribute('href', resolvedUrl);
        }
      }

      function applyBrandingPayload(payload) {
        if (!payload || typeof payload !== 'object') {
          return;
        }

        if (typeof payload.site_name === 'string' && payload.site_name.trim() !== '') {
          applyBrandingSiteName(payload.site_name);
        }

        if (typeof payload.logo === 'string' && payload.logo !== '') {
          applyBrandingLogo(payload.logo);
        }

        if (typeof payload.favicon === 'string' && payload.favicon !== '') {
          applyBrandingFavicon(payload.favicon);
        }
        if (Object.prototype.hasOwnProperty.call(payload, 'footer_copyright')) {
          const footerTemplate = typeof payload.footer_copyright === 'string'
            ? payload.footer_copyright
            : '';
          applyBrandingFooter(footerTemplate);
        }
      }

      if (brandingLogoInput) {
        brandingLogoInput.addEventListener('change', () => {
          if (brandingLogoObjectUrl) {
            URL.revokeObjectURL(brandingLogoObjectUrl);
            brandingLogoObjectUrl = null;
          }

          const files = brandingLogoInput.files;
          if (files && files[0]) {
            brandingLogoObjectUrl = URL.createObjectURL(files[0]);
            if (brandingLogoPreviewImage) {
              brandingLogoPreviewImage.src = brandingLogoObjectUrl;
            }
          } else if (brandingCurrentLogo) {
            applyBrandingLogo(brandingCurrentLogo, false);
          }
        });
      }

      if (brandingFaviconInput) {
        brandingFaviconInput.addEventListener('change', () => {
          if (brandingFaviconObjectUrl) {
            URL.revokeObjectURL(brandingFaviconObjectUrl);
            brandingFaviconObjectUrl = null;
          }

          const files = brandingFaviconInput.files;
          if (files && files[0]) {
            brandingFaviconObjectUrl = URL.createObjectURL(files[0]);
            if (brandingFaviconPreviewImage) {
              brandingFaviconPreviewImage.src = brandingFaviconObjectUrl;
            }
          } else if (brandingCurrentFavicon) {
            applyBrandingFavicon(brandingCurrentFavicon, false);
          }
        });
      }

      function escapeSelector(value) {
        if (typeof value !== 'string') {
          return '';
        }
        if (window.CSS && typeof window.CSS.escape === 'function') {
          return window.CSS.escape(value);
        }
        return value.replace(/([\0-\x1F\x7F!"#$%&'()*+,./:;<=>?@[\]^`{|}~])/g, '\\$1');
      }

      function updateLanguageOptionsState() {
        if (!configurationLanguagesContainer) {
          return;
        }

        const multilingualEnabled = !configurationMultilingualToggle || configurationMultilingualToggle.checked;
        configurationLanguagesContainer.dataset.multilingual = multilingualEnabled ? '1' : '0';

        if (configurationDefaultLanguageSelect && defaultLanguageCode) {
          configurationDefaultLanguageSelect.value = defaultLanguageCode;
        }

        configurationLanguagesContainer.dataset.defaultLanguage = defaultLanguageCode;

        configurationLanguageInputs.forEach((input) => {
          if (!(input instanceof HTMLInputElement)) {
            return;
          }
          const code = input.dataset.languageCode || '';
          const normalizedCode = normalizeLanguageCode(code);
          const isDefault = normalizedCode !== '' && normalizedCode === defaultLanguageCode;

          if (isDefault) {
            input.checked = true;
          }

          const shouldDisable = !multilingualEnabled || isDefault;
          input.disabled = shouldDisable;
          input.setAttribute('aria-disabled', shouldDisable ? 'true' : 'false');
        });
      }

      function enforceLanguageSelection(input) {
        if (!configurationLanguageInputs || configurationLanguageInputs.length === 0) {
          return;
        }

        if (!configurationMultilingualToggle || !configurationMultilingualToggle.checked) {
          if (input instanceof HTMLInputElement) {
            input.checked = true;
          }
          return;
        }

        const enabledCount = configurationLanguageInputs.reduce((count, element) => {
          if (element instanceof HTMLInputElement && element.checked) {
            return count + 1;
          }
          return count;
        }, 0);

        if (enabledCount === 0 && input instanceof HTMLInputElement) {
          input.checked = true;
        }
      }

      let savedDesignVariant = typeof designConfig.variant === 'string' && designConfig.variant !== ''
        ? designConfig.variant
        : (document.body.dataset.dashboardDesign || 'classic');
      let previewDesignVariant = document.body.dataset.dashboardDesign || savedDesignVariant;
      let designSettingsSaving = false;
      let pendingDesignVariant = null;
      let designNoticeMode = 'idle';
      let designNoticePreviousVariant = '';
      let pendingDashboardPageId = '';

      updateDesignOptionsState();
      updateDesignPreviewVariant(previewDesignVariant);
      applyBrandingFooter(brandingCurrentFooterTemplate);
      maybeShowStoredDesignNotice();
      maybeShowStoredDesignFeedback();

      if (designVariantInputs && designVariantInputs.length > 0) {
        designVariantInputs.forEach((input) => {
          if (!(input instanceof HTMLInputElement)) {
            return;
          }
          input.addEventListener('change', () => {
            if (!input.checked) {
              return;
            }

            const variantValue = typeof input.value === 'string' ? input.value.trim() : '';
            if (variantValue === '') {
              return;
            }

            if (designSettingsSaving) {
              if (variantValue !== previewDesignVariant) {
                input.checked = false;
                const activeInput = designVariantInputs.find((candidate) => (
                  candidate instanceof HTMLInputElement
                    && typeof candidate.value === 'string'
                    && candidate.value.trim() === previewDesignVariant
                ));
                if (activeInput) {
                  activeInput.checked = true;
                }
                updateDesignOptionsState();
              }
              return;
            }

            previewDesignVariant = variantValue;
            applyDashboardDesignVariant(previewDesignVariant);

            if (designSettingsFeedback) {
              designSettingsFeedback.textContent = '';
              designSettingsFeedback.classList.remove('error', 'success');
            }

            if (variantValue === savedDesignVariant) {
              pendingDesignVariant = null;
              hideDesignChangeNotice();
              return;
            }

            pendingDesignVariant = variantValue;

            if (designNoticeMode === 'post-change') {
              clearStoredDesignChangeNotice();
            }

            hideDesignChangeNotice();
            submitPendingDesignVariant();
          });
        });
      }

      if (designChangeNoticeConfirm) {
        designChangeNoticeConfirm.addEventListener('click', () => {
          if (designNoticeMode === 'post-change') {
            clearStoredDesignChangeNotice();
            hideDesignChangeNotice();
            return;
          }

          if (!designSettingsForm || designSettingsSaving) {
            return;
          }

          const targetVariant = pendingDesignVariant || previewDesignVariant;
          if (!targetVariant || targetVariant === savedDesignVariant) {
            hideDesignChangeNotice();
            return;
          }

          setDesignNoticeLoading(true);
          designSettingsSaving = true;

          if (typeof designSettingsForm.requestSubmit === 'function') {
            designSettingsForm.requestSubmit();
          } else {
            const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
            designSettingsForm.dispatchEvent(submitEvent);
          }
        });
      }

      if (designChangeNoticeCancel) {
        designChangeNoticeCancel.addEventListener('click', () => {
          if (designSettingsSaving) {
            return;
          }

          if (designNoticeMode === 'post-change') {
            const revertVariant = typeof designNoticePreviousVariant === 'string'
              ? designNoticePreviousVariant.trim()
              : '';

            clearStoredDesignChangeNotice();

            if (!revertVariant || !designSettingsForm) {
              hideDesignChangeNotice();
              return;
            }

            pendingDesignVariant = revertVariant;

            designVariantInputs.forEach((element) => {
              if (!(element instanceof HTMLInputElement)) {
                return;
              }

              const value = typeof element.value === 'string' ? element.value.trim() : '';
              element.checked = value !== '' && value === revertVariant;
            });

            updateDesignOptionsState();
            previewDesignVariant = revertVariant;
            applyDashboardDesignVariant(revertVariant);
            hideDesignChangeNotice();

            if (typeof designSettingsForm.requestSubmit === 'function') {
              designSettingsForm.requestSubmit();
            } else {
              const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
              designSettingsForm.dispatchEvent(submitEvent);
            }
            return;
          }

          pendingDesignVariant = null;

          designVariantInputs.forEach((element) => {
            if (!(element instanceof HTMLInputElement)) {
              return;
            }

            const value = typeof element.value === 'string' ? element.value.trim() : '';
            element.checked = value !== '' && value === savedDesignVariant;
          });

          previewDesignVariant = savedDesignVariant;
          applyDashboardDesignVariant(savedDesignVariant);
          hideDesignChangeNotice();
        });
      }

      function clearTranslationsFeedback() {
        if (!translationsFeedback) {
          return;
        }
        translationsFeedback.textContent = '';
        translationsFeedback.classList.remove('success', 'error');
      }

      function setTranslationsLoadingState(isLoading) {
        translationsLoading = isLoading;
        if (translationsLoadingElement) {
          translationsLoadingElement.hidden = !isLoading;
        }
        if (translationsContentContainer) {
          translationsContentContainer.hidden = isLoading;
        }
        if (translationsErrorElement) {
          translationsErrorElement.hidden = true;
        }
        updateTranslationsSaveState();
      }

      function showTranslationsError(message) {
        if (translationsErrorElement) {
          translationsErrorElement.hidden = false;
        }
        if (translationsErrorMessage) {
          translationsErrorMessage.textContent = message || '';
        }
        if (translationsContentContainer) {
          translationsContentContainer.hidden = true;
        }
        if (translationsLoadingElement) {
          translationsLoadingElement.hidden = true;
        }
        updateTranslationsSaveState();
      }

      function getTranslationOriginal(locale, key) {
        if (!translationsOriginals || typeof translationsOriginals !== 'object') {
          return '';
        }
        const entry = translationsOriginals[key] || {};
        const value = entry && typeof entry[locale] === 'string' ? entry[locale] : '';
        return value;
      }

      function getTranslationCurrent(locale, key) {
        if (!translationsCurrentValues || typeof translationsCurrentValues !== 'object') {
          return '';
        }
        const entry = translationsCurrentValues[key] || {};
        const value = entry && typeof entry[locale] === 'string' ? entry[locale] : '';
        return value;
      }

      function setTranslationCurrent(locale, key, value) {
        if (!translationsCurrentValues || typeof translationsCurrentValues !== 'object') {
          translationsCurrentValues = {};
        }
        if (!translationsCurrentValues[key] || typeof translationsCurrentValues[key] !== 'object') {
          translationsCurrentValues[key] = {};
        }
        translationsCurrentValues[key][locale] = value;
      }

      function updateTranslationEntryState(key, providedRow = null) {
        if (!translationsTableBody) {
          return;
        }
        const row = providedRow
          || translationsTableBody.querySelector(`[data-translation-key="${escapeSelector(key)}"]`);
        if (!row) {
          return;
        }

        let hasChanges = false;
        translationsLanguages.forEach((language) => {
          const locale = typeof language.code === 'string' ? language.code : '';
          if (!locale) {
            return;
          }
          if (getTranslationCurrent(locale, key) !== getTranslationOriginal(locale, key)) {
            hasChanges = true;
          }
        });

        row.classList.toggle('translations-table__row--modified', hasChanges);

        if (hasChanges) {
          translationsChangedKeys.add(key);
        } else {
          translationsChangedKeys.delete(key);
        }
      }

      function updateTranslationsSaveState() {
        if (!translationsSaveButton) {
          return;
        }

        const hasChanges = translationsChangedKeys.size > 0;
        translationsSaveButton.disabled = translationsLoading || !hasChanges;
      }

      function filterTranslationsList(query) {
        translationsFilterQuery = typeof query === 'string' ? query.trim().toLowerCase() : '';
        const normalizedQuery = translationsFilterQuery;

        translationsFilteredKeys = translationsAllKeys.filter((key) => {
          const normalizedKey = translationsNormalizedKeys.get(key) || key.toLowerCase();
          return normalizedQuery === '' || normalizedKey.includes(normalizedQuery);
        });

        translationsPage = 1;
        updateTranslationsPagination();
      }

      function scrollTranslationsTableToTop() {
        if (!translationsTableContainer) {
          return;
        }
        try {
          translationsTableContainer.scrollTo({ top: 0 });
        } catch (error) {
          translationsTableContainer.scrollTop = 0;
        }
      }

      function createTranslationRow(key) {
        const row = document.createElement('tr');
        row.className = 'translations-table__row translations-table__row--visible';
        row.dataset.translationKey = key;

        const keyCell = document.createElement('th');
        keyCell.scope = 'row';
        keyCell.className = 'translations-table__cell translations-table__cell--key';
        const keyWrapper = document.createElement('div');
        keyWrapper.className = 'translations-key';
        const keyLabel = document.createElement('span');
        keyLabel.className = 'translations-key__label';
        keyLabel.textContent = key;
        keyWrapper.appendChild(keyLabel);
        keyCell.appendChild(keyWrapper);
        row.appendChild(keyCell);

        translationsLanguages.forEach((language) => {
          const locale = typeof language.code === 'string' ? language.code : '';
          if (!locale) {
            return;
          }

          const cell = document.createElement('td');
          cell.className = 'translations-table__cell translations-table__cell--locale';

          const textarea = document.createElement('textarea');
          textarea.className = 'translations-table__input';
          textarea.dataset.translationKey = key;
          textarea.dataset.translationLocale = locale;
          textarea.value = getTranslationCurrent(locale, key);
          textarea.lang = locale;
          textarea.dir = language.direction;
          textarea.rows = 3;
          textarea.autocomplete = 'off';
          textarea.spellcheck = true;
          textarea.addEventListener('input', handleTranslationInput);

          cell.appendChild(textarea);
          row.appendChild(cell);
        });

        updateTranslationEntryState(key, row);

        return row;
      }

      function updateTranslationsPagination() {
        if (!translationsTableBody) {
          return;
        }

        const total = translationsFilteredKeys.length;

        if (translationsTableBody) {
          translationsTableBody.innerHTML = '';
        }

        if (translationsEmptyState) {
          translationsEmptyState.hidden = total > 0;
        }

        if (total === 0) {
          if (translationsPagination) {
            translationsPagination.hidden = true;
            translationsPagination.classList.remove('translations-pagination--single');
          }
          if (translationsPaginationStatus) {
            translationsPaginationStatus.textContent = '';
          }
          updateTranslationsSaveState();
          return;
        }

        const totalPages = Math.max(1, Math.ceil(total / TRANSLATIONS_PAGE_SIZE));
        if (translationsPage > totalPages) {
          translationsPage = totalPages;
        }
        if (translationsPage < 1) {
          translationsPage = 1;
        }

        const startIndex = (translationsPage - 1) * TRANSLATIONS_PAGE_SIZE;
        const endIndex = Math.min(total, startIndex + TRANSLATIONS_PAGE_SIZE);

        const fragment = document.createDocumentFragment();

        for (let index = startIndex; index < endIndex; index += 1) {
          const key = translationsFilteredKeys[index];
          if (!key) {
            continue;
          }
          const row = createTranslationRow(key);
          fragment.appendChild(row);
        }

        translationsTableBody.appendChild(fragment);

        if (translationsPagination) {
          const hasMultiplePages = total > TRANSLATIONS_PAGE_SIZE;
          translationsPagination.hidden = false;
          translationsPagination.classList.toggle('translations-pagination--single', !hasMultiplePages);
          if (translationsPaginationPrev) {
            translationsPaginationPrev.disabled = translationsPage <= 1;
          }
          if (translationsPaginationNext) {
            translationsPaginationNext.disabled = translationsPage >= totalPages;
          }
          if (translationsPaginationStatus) {
            const displayStart = startIndex + 1;
            const displayEnd = endIndex;
            const template = typeof translationsPaginationStrings.status === 'string'
              ? translationsPaginationStrings.status
              : 'Page {page} of {pages} · Showing {start}–{end} of {total} keys';
            const label = template
              .replace('{page}', String(translationsPage))
              .replace('{pages}', String(totalPages))
              .replace('{start}', String(displayStart))
              .replace('{end}', String(displayEnd))
              .replace('{total}', String(total));
            translationsPaginationStatus.textContent = label;
          }
        }

        scrollTranslationsTableToTop();
        updateTranslationsSaveState();
      }

      function handleTranslationInput(event) {
        if (!(event.target instanceof HTMLTextAreaElement)) {
          return;
        }

        const key = event.target.dataset.translationKey || '';
        const locale = event.target.dataset.translationLocale || '';

        if (key === '' || locale === '') {
          return;
        }

        setTranslationCurrent(locale, key, event.target.value);
        updateTranslationEntryState(key, event.target.closest('tr'));
        updateTranslationsSaveState();
      }

      function renderTranslations(entries, languages) {
        if (!translationsTableBody || !translationsTableHeadRow) {
          return;
        }

        translationsTableBody.innerHTML = '';
        translationsOriginals = {};
        translationsCurrentValues = {};
        translationsChangedKeys.clear();
        translationsAllKeys = [];
        translationsNormalizedKeys = new Map();
        translationsFilteredKeys = [];

        translationsLanguages = Array.isArray(languages)
          ? languages
            .filter((language) => language && typeof language.code === 'string' && language.code !== '')
            .map((language) => ({
              code: String(language.code),
              label: typeof language.label === 'string' ? language.label : '',
              native: typeof language.native === 'string' ? language.native : '',
              direction: typeof language.direction === 'string' && language.direction === 'rtl' ? 'rtl' : 'ltr',
              flag: typeof language.flag === 'string' ? language.flag : '',
            }))
          : [];

        if (translationsTableElement) {
          const languagesCount = Math.max(1, translationsLanguages.length);
          translationsTableElement.style.setProperty('--translations-languages', String(languagesCount));
          translationsTableElement.style.setProperty('--translations-key-width', `${TRANSLATIONS_KEY_COLUMN_WIDTH}px`);
          translationsTableElement.style.setProperty('--translations-locale-min-width', `${TRANSLATIONS_LOCALE_MIN_WIDTH}px`);
          const computedMinWidth = TRANSLATIONS_KEY_COLUMN_WIDTH + (languagesCount * TRANSLATIONS_LOCALE_MIN_WIDTH);
          translationsTableElement.style.setProperty('--translations-table-min-width', `${computedMinWidth}px`);
        }

        if (translationsTableContainer) {
          translationsTableContainer.style.setProperty('--translations-key-width', `${TRANSLATIONS_KEY_COLUMN_WIDTH}px`);
          translationsTableContainer.style.setProperty('--translations-locale-min-width', `${TRANSLATIONS_LOCALE_MIN_WIDTH}px`);
        }

        translationsFilterQuery = '';

        const translationEntries = entries && typeof entries === 'object' ? entries : {};
        const translationKeys = Object.keys(translationEntries).sort((a, b) => a.localeCompare(b));

        translationsAllKeys = translationKeys.slice();
        translationsNormalizedKeys = new Map(
          translationsAllKeys.map((key) => [key, key.toLowerCase()])
        );
        translationsFilteredKeys = translationsAllKeys.slice();

        translationsTableHeadRow.innerHTML = '';
        const keyHeader = document.createElement('th');
        keyHeader.scope = 'col';
        keyHeader.className = 'translations-table__header translations-table__header--key';
        keyHeader.textContent = typeof translationsTableStrings.key === 'string'
          ? translationsTableStrings.key
          : 'Key';
        translationsTableHeadRow.appendChild(keyHeader);

        translationsLanguages.forEach((language) => {
          const headerCell = document.createElement('th');
          headerCell.scope = 'col';
          headerCell.className = 'translations-table__header translations-table__header--locale';
          const localeWrapper = document.createElement('div');
          localeWrapper.className = 'translations-locale';
          if (language.flag) {
            const flag = document.createElement('span');
            flag.className = 'translations-locale__flag';
            flag.textContent = language.flag;
            localeWrapper.appendChild(flag);
          }
          const label = document.createElement('span');
          label.className = 'translations-locale__label';
          label.textContent = language.native || language.label || language.code.toUpperCase();
          localeWrapper.appendChild(label);
          const code = document.createElement('span');
          code.className = 'translations-locale__code';
          code.textContent = language.code.toUpperCase();
          localeWrapper.appendChild(code);
          headerCell.appendChild(localeWrapper);
          translationsTableHeadRow.appendChild(headerCell);
        });

        translationsOriginals = {};
        translationsCurrentValues = {};
        translationsAllKeys.forEach((key) => {
          const keyTranslations = translationEntries[key] || {};
          translationsOriginals[key] = {};
          translationsCurrentValues[key] = {};
          translationsLanguages.forEach((language) => {
            const locale = language.code;
            const value = typeof keyTranslations[locale] === 'string' ? keyTranslations[locale] : '';
            translationsOriginals[key][locale] = value;
            translationsCurrentValues[key][locale] = value;
          });
        });

        if (translationKeys.length === 0) {
          if (translationsEmptyState) {
            translationsEmptyState.hidden = false;
          }
          if (translationsPagination) {
            translationsPagination.hidden = true;
            translationsPagination.classList.remove('translations-pagination--single');
          }
          if (translationsPaginationStatus) {
            translationsPaginationStatus.textContent = '';
          }
          if (translationsContentContainer) {
            translationsContentContainer.hidden = false;
          }
          updateTranslationsSaveState();
          return;
        }

        if (translationsContentContainer) {
          translationsContentContainer.hidden = false;
        }

        const searchValue = translationsSearchInput ? translationsSearchInput.value || '' : '';
        filterTranslationsList(searchValue);
      }

      async function loadTranslations(force = false) {
        if (translationsLoading) {
          return;
        }

        if (translationsLoaded && !force) {
          clearTranslationsFeedback();
          updateTranslationsSaveState();
          if (translationsSearchInput) {
            filterTranslationsList(translationsSearchInput.value || '');
          }
          return;
        }

        clearTranslationsFeedback();
        setTranslationsLoadingState(true);

        try {
          const response = await fetch(TRANSLATIONS_ENDPOINT, {
            credentials: 'same-origin',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
            },
          });
          const responseText = await response.text();
          let data = null;

          if (responseText) {
            try {
              data = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid translations payload', error, responseText);
            }
          }

          if (!response.ok || !data || data.status !== 'success') {
            const errorMessage = (data && data.message)
              || (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.error)
              || 'Unable to load translations.';
            showTranslationsError(errorMessage);
            translationsLoaded = false;
            return;
          }

          renderTranslations(data.translations || {}, data.languages || []);
          setTranslationsLoadingState(false);
          translationsLoaded = true;
        } catch (error) {
          console.error('Unable to load translations', error);
          const fallback = (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.error) || 'Unable to load translations.';
          showTranslationsError(fallback);
          translationsLoaded = false;
        } finally {
          translationsLoading = false;
          if (translationsLoadingElement) {
            translationsLoadingElement.hidden = true;
          }
          updateTranslationsSaveState();
        }
      }

      async function saveTranslations() {
        if (translationsLoading || translationsChangedKeys.size === 0) {
          return;
        }

        const payload = {};

        translationsChangedKeys.forEach((key) => {
          translationsLanguages.forEach((language) => {
            const locale = language.code;
            if (!locale) {
              return;
            }
            const originalValue = getTranslationOriginal(locale, key);
            const currentValue = getTranslationCurrent(locale, key);
            if (currentValue === originalValue) {
              return;
            }
            if (!payload[locale]) {
              payload[locale] = {};
            }
            payload[locale][key] = currentValue;
          });
        });

        if (Object.keys(payload).length === 0) {
          translationsChangedKeys.clear();
          updateTranslationsSaveState();
          return;
        }

        clearTranslationsFeedback();

        let originalLabel = '';
        if (translationsSaveButton) {
          originalLabel = translationsSaveButton.textContent || '';
          if (!translationsSaveButton.dataset.originalLabel) {
            translationsSaveButton.dataset.originalLabel = originalLabel;
          }
          translationsSaveButton.disabled = true;
          translationsSaveButton.classList.add('is-loading');
          const savingLabel = (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.saving) || originalLabel;
          if (savingLabel) {
            translationsSaveButton.textContent = savingLabel;
          }
        }

        try {
          const response = await fetch(TRANSLATIONS_ENDPOINT, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest',
            },
            body: JSON.stringify({ translations: payload }),
          });
          const responseText = await response.text();
          let data = null;

          if (responseText) {
            try {
              data = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid translation save payload', error, responseText);
            }
          }

          if (!response.ok || !data || data.status !== 'success') {
            const errorMessage = (data && data.message)
              || (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.error)
              || 'Unable to save translations.';
            if (translationsFeedback) {
              translationsFeedback.textContent = errorMessage;
              translationsFeedback.classList.remove('success');
              translationsFeedback.classList.add('error');
            }
            return;
          }

          const successMessage = data.message
            || (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.saved)
            || '';

          if (translationsFeedback && successMessage) {
            translationsFeedback.textContent = successMessage;
            translationsFeedback.classList.remove('error');
            translationsFeedback.classList.add('success');
          }

          const currentSearch = translationsSearchInput ? translationsSearchInput.value : '';
          translationsLoaded = false;
          translationsChangedKeys.clear();
          await loadTranslations(true);
          if (translationsSearchInput && currentSearch) {
            translationsSearchInput.value = currentSearch;
            filterTranslationsList(currentSearch);
          }
        } catch (error) {
          console.error('Unable to save translations', error);
          const fallback = (adminTranslationsI18n.feedback && adminTranslationsI18n.feedback.error) || 'Unable to save translations.';
          if (translationsFeedback) {
            translationsFeedback.textContent = fallback;
            translationsFeedback.classList.remove('success');
            translationsFeedback.classList.add('error');
          }
        } finally {
          if (translationsSaveButton) {
            const label = translationsSaveButton.dataset.originalLabel || originalLabel;
            translationsSaveButton.classList.remove('is-loading');
            translationsSaveButton.textContent = label;
          }
          updateTranslationsSaveState();
        }
      }

      const parseNewsletterEmails = (value) => {
        if (!value || typeof value !== 'string') {
          return [];
        }

        return value
          .split(/[,;\n]+/)
          .map((entry) => entry.trim())
          .filter((entry, index, list) => entry !== '' && list.indexOf(entry) === index);
      };

      const focusableSelector = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
      const docLang = document.documentElement.lang || 'en';
      const smartlinkTimelineDateFormatter = (() => {
        try {
          return new Intl.DateTimeFormat(docLang, { month: 'short', day: 'numeric' });
        } catch (error) {
          return new Intl.DateTimeFormat('en', { month: 'short', day: 'numeric' });
        }
      })();
      const relativeTimeFormatter = typeof Intl !== 'undefined' && typeof Intl.RelativeTimeFormat === 'function'
        ? new Intl.RelativeTimeFormat(docLang, { numeric: 'auto' })
        : null;
      const SMARTLINK_STORAGE_KEY = 'musicdistro.smartlinks';
      let panelOpen = false;
      let notificationsOpen = false;
      let notificationsLastTrigger = null;
      let previewObjectUrl = null;
      let pendingAvatarFile = null;
      let activeModal = null;
      let lastFocusedElement = null;
      let activeDashboardPage = '';
      let scrollLockPosition = 0;
      let scrollLockCount = 0;
      let smartlinksModalScrollLockActive = false;
      let smartlinksModalTouchStartY = null;
      let cloudModalScrollLockActive = false;
      let cloudModalTouchStartY = null;
      let currentPlan = 'monthly';
      let smartlinks = [];
      let activeSmartlinkId = null;
      let paymentsLoaded = false;
      let paymentsLoading = false;
      let paymentsDataCache = null;
      const loginHistoryCache = new Map();
      let userDetailActiveView = 'details';
      let loginHistoryActiveUserId = null;
      let loginHistoryActiveMeta = null;
      const dashboardBody = document.body;
      const dashboardDesign = dashboardBody && dashboardBody.dataset ? dashboardBody.dataset.dashboardDesign || '' : '';
      const dashboardContentContainer = dashboardDesign === 'aura'
        ? document.querySelector('[data-dashboard-content]')
        : null;
      const overviewPane = dashboardContentContainer
        ? dashboardContentContainer.querySelector('[data-dashboard-pane="overview"]')
        : null;
      const detailPane = dashboardContentContainer
        ? dashboardContentContainer.querySelector('[data-dashboard-pane="detail"]')
        : null;
      const inlineModalsEnabled = Boolean(
        dashboardDesign === 'aura'
          && dashboardContentContainer instanceof HTMLElement
          && overviewPane instanceof HTMLElement
          && detailPane instanceof HTMLElement
      );
      const inlineModalPlaceholders = new WeakMap();
      const modalTriggerMap = new Map();
      const dashboardPages = new Map();
      const dashboardPageTriggerMap = new Map();
      const pageTriggers = Array.from(document.querySelectorAll('[data-dashboard-page-target]'));
      const allModalTriggers = Array.from(document.querySelectorAll('[data-modal-target]'));
      const auraSidebar = dashboardDesign === 'aura'
        ? document.querySelector('.dashboard-sidebar')
        : null;
      const auraSidebarToggle = auraSidebar instanceof HTMLElement
        ? auraSidebar.querySelector('[data-sidebar-toggle]')
        : null;
      const auraSidebarStateKey = 'musicdistro.dashboard.aura.sidebar-state';
      let auraSidebarCollapsed = false;

      function updateAuraSidebarState(collapsed, persist = true) {
        auraSidebarCollapsed = Boolean(collapsed);
        if (dashboardBody && dashboardBody.dataset) {
          if (auraSidebarCollapsed) {
            dashboardBody.dataset.sidebarState = 'collapsed';
          } else {
            delete dashboardBody.dataset.sidebarState;
          }
        }

        if (auraSidebarToggle instanceof HTMLElement) {
          const collapseLabel = auraSidebarToggle.dataset.labelCollapse || '';
          const expandLabel = auraSidebarToggle.dataset.labelExpand || '';
          const nextLabel = auraSidebarCollapsed ? expandLabel : collapseLabel;
          auraSidebarToggle.setAttribute('aria-expanded', auraSidebarCollapsed ? 'false' : 'true');
          if (nextLabel) {
            auraSidebarToggle.setAttribute('aria-label', nextLabel);
            auraSidebarToggle.setAttribute('title', nextLabel);
          }
        }

        if (!persist) {
          return;
        }

        try {
          if (auraSidebarCollapsed) {
            window.localStorage.setItem(auraSidebarStateKey, 'collapsed');
          } else {
            window.localStorage.removeItem(auraSidebarStateKey);
          }
        } catch (error) {
          /* Ignore storage errors */
        }
      }

      function resetDashboardScrollPosition() {
        if (dashboardDesign !== 'aura') {
          return;
        }

        window.scrollTo(0, 0);
      }

      if (auraSidebarToggle instanceof HTMLElement) {
        let storedSidebarState = null;
        try {
          storedSidebarState = window.localStorage.getItem(auraSidebarStateKey);
        } catch (error) {
          storedSidebarState = null;
        }

        updateAuraSidebarState(storedSidebarState === 'collapsed', false);

        auraSidebarToggle.addEventListener('click', () => {
          updateAuraSidebarState(!auraSidebarCollapsed);
        });
      }

      allModalTriggers.forEach((trigger) => {
        if (!(trigger instanceof HTMLElement)) {
          return;
        }
        const targetId = trigger.dataset.modalTarget || '';
        if (!targetId) {
          return;
        }
        if (!modalTriggerMap.has(targetId)) {
          modalTriggerMap.set(targetId, []);
        }
        modalTriggerMap.get(targetId).push(trigger);
      });

      if (inlineModalsEnabled && dashboardBody && dashboardBody.dataset) {
        dashboardBody.dataset.inlineModals = 'enabled';
      }

      if (inlineModalsEnabled) {
        const pageSources = Array.from(document.querySelectorAll('[data-dashboard-page-source]'));
        pageSources.forEach((pageElement) => {
          if (!(pageElement instanceof HTMLElement)) {
            return;
          }
          const pageId = pageElement.dataset.dashboardPageSource || '';
          if (!pageId) {
            return;
          }
          const placeholder = document.createComment(`dashboard-page-${pageId}`);
          if (pageElement.parentNode) {
            pageElement.parentNode.insertBefore(placeholder, pageElement.nextSibling);
          }
          dashboardPages.set(pageId, {
            element: pageElement,
            placeholder,
          });
          pageElement.hidden = true;
        });

        pageTriggers.forEach((trigger) => {
          if (!(trigger instanceof HTMLElement)) {
            return;
          }
          const pageId = trigger.dataset.dashboardPageTarget || '';
          if (!pageId) {
            return;
          }
          if (!dashboardPageTriggerMap.has(pageId)) {
            dashboardPageTriggerMap.set(pageId, []);
          }
          dashboardPageTriggerMap.get(pageId).push(trigger);
        });

        if (pendingDashboardPageId && dashboardPages.has(pendingDashboardPageId)) {
          openDashboardPage(pendingDashboardPageId);
          pendingDashboardPageId = '';
        }

        const sidebarAnchorLinks = Array.from(document.querySelectorAll('.dashboard-sidebar__item[href^="#"]'));
        sidebarAnchorLinks.forEach((anchor) => {
          if (!(anchor instanceof HTMLElement)) {
            return;
          }
          anchor.addEventListener('click', () => {
            closeDashboardPage();
          });
        });

        const sidebarProfileTriggers = Array.from(document.querySelectorAll('[data-open-profile]'));
        sidebarProfileTriggers.forEach((button) => {
          if (!(button instanceof HTMLElement)) {
            return;
          }
          button.addEventListener('click', () => {
            closeDashboardPage();
          });
        });
      }

      pageTriggers.forEach((trigger) => {
        if (!(trigger instanceof HTMLElement)) {
          return;
        }
        trigger.addEventListener('click', (event) => {
          const pageId = trigger.dataset.dashboardPageTarget || '';
          if (!pageId || !inlineModalsEnabled) {
            return;
          }
          event.preventDefault();
          openDashboardPage(pageId);
        });
      });

      function smartlinkTranslate(path, fallback = '') {
        if (!path) {
          return fallback;
        }
        const segments = String(path).split('.');
        let node = smartlinksI18n;
        for (const segment of segments) {
          if (!node || typeof node !== 'object' || !(segment in node)) {
            return fallback;
          }
          node = node[segment];
        }
        return typeof node === 'string' ? node : fallback;
      }

      function hashString(value) {
        const input = String(value || '');
        let hash = 0;
        for (let index = 0; index < input.length; index += 1) {
          hash = (hash << 5) - hash + input.charCodeAt(index);
          hash |= 0;
        }
        return Math.abs(hash);
      }

      function slugify(value) {
        return String(value || '')
          .normalize('NFKD')
          .replace(/[\u0300-\u036f]/g, '')
          .replace(/[^a-zA-Z0-9]+/g, '-')
          .replace(/^-+|-+$/g, '')
          .toLowerCase();
      }

      function createSmartlinkSlug(upc, slugInput) {
        const trimmedUpc = String(upc || '').replace(/[^0-9A-Za-z]/g, '');
        const fallback = trimmedUpc ? `release-${trimmedUpc}` : `release-${Date.now()}`;
        const base = slugInput && slugInput.trim() !== '' ? slugInput : fallback;
        const cleaned = slugify(base);
        return cleaned || slugify(fallback);
      }

      function toTitleCase(value) {
        return String(value || '')
          .replace(/[-_]+/g, ' ')
          .replace(/\s+/g, ' ')
          .trim()
          .replace(/\w\S*/g, (word) => word.charAt(0).toUpperCase() + word.slice(1));
      }

      function formatSmartlinkDate(value) {
        try {
          const date = new Date(value);
          if (Number.isNaN(date.getTime())) {
            return value;
          }
          return new Intl.DateTimeFormat(docLang, { dateStyle: 'medium', timeStyle: 'short' }).format(date);
        } catch (error) {
          return value;
        }
      }

      function formatDateTime(value) {
        if (!value) {
          return '';
        }
        try {
          const date = new Date(value);
          if (Number.isNaN(date.getTime())) {
            return String(value);
          }
          return new Intl.DateTimeFormat(docLang, { dateStyle: 'medium', timeStyle: 'short' }).format(date);
        } catch (error) {
          return String(value || '');
        }
      }

      function formatRelativeTime(value) {
        if (!value || !relativeTimeFormatter) {
          return '';
        }
        try {
          const date = new Date(value);
          if (Number.isNaN(date.getTime())) {
            return '';
          }
          const now = new Date();
          const diffSeconds = Math.round((date.getTime() - now.getTime()) / 1000);
          const absSeconds = Math.abs(diffSeconds);
          let unit = 'second';
          let amount = diffSeconds;
          if (absSeconds >= 31536000) {
            unit = 'year';
            amount = Math.round(diffSeconds / 31536000);
          } else if (absSeconds >= 2592000) {
            unit = 'month';
            amount = Math.round(diffSeconds / 2592000);
          } else if (absSeconds >= 604800) {
            unit = 'week';
            amount = Math.round(diffSeconds / 604800);
          } else if (absSeconds >= 86400) {
            unit = 'day';
            amount = Math.round(diffSeconds / 86400);
          } else if (absSeconds >= 3600) {
            unit = 'hour';
            amount = Math.round(diffSeconds / 3600);
          } else if (absSeconds >= 60) {
            unit = 'minute';
            amount = Math.round(diffSeconds / 60);
          }
          return relativeTimeFormatter.format(amount, unit);
        } catch (error) {
          return '';
        }
      }

      function isValidHttpUrl(value) {
        if (!value) {
          return false;
        }
        try {
          const url = new URL(String(value));
          return url.protocol === 'http:' || url.protocol === 'https:';
        } catch (error) {
          return false;
        }
      }

      function loginHistoryText(key, replacements = {}, fallback = '') {
        if (!key) {
          return fallback;
        }
        const value = t(`admin.login_history.${key}`, replacements);
        return value || fallback;
      }

      function setUserModalView(view) {
        if (!userDetailModal) {
          return;
        }
        const target = view === 'logins' ? 'logins' : 'details';
        userDetailActiveView = target;
        userDetailModal.setAttribute('data-user-modal-view', target);
        userDetailViews.forEach((element) => {
          if (!element) {
            return;
          }
          element.hidden = element.dataset.userModalView !== target;
        });
        if (userDetailBackButton) {
          userDetailBackButton.hidden = target === 'details';
          if (target === 'details') {
            userDetailBackButton.style.transform = '';
          } else {
            updateUserModalBackPosition();
          }
        }
        if (userDetailLoginsButton) {
          if (target === 'logins') {
            userDetailLoginsButton.disabled = true;
          } else if (!userDetailLoginsButton.hidden) {
            userDetailLoginsButton.disabled = false;
          }
        }
        if (target === 'logins' && userDetailBackButton) {
          userDetailBackButton.focus();
        }
      }

      function resetLoginHistoryModal(clearContent = true) {
        if (clearContent && loginHistoryList) {
          loginHistoryList.innerHTML = '';
          loginHistoryList.hidden = true;
        }
        if (loginHistoryStatus) {
          loginHistoryStatus.hidden = true;
          loginHistoryStatus.textContent = '';
          delete loginHistoryStatus.dataset.statusType;
        }
        if (loginHistoryEmpty) {
          loginHistoryEmpty.hidden = true;
        }
      }

      function setLoginHistoryLoading(isLoading) {
        if (!loginHistoryStatus) {
          return;
        }
        const isStatusLoading = loginHistoryStatus.dataset.statusType === 'loading';
        if (isLoading) {
          loginHistoryStatus.textContent = loginHistoryText('loading', {}, 'Loading…');
          loginHistoryStatus.dataset.statusType = 'loading';
          loginHistoryStatus.hidden = false;
          if (loginHistoryEmpty) {
            loginHistoryEmpty.hidden = true;
          }
        } else if (isStatusLoading) {
          loginHistoryStatus.hidden = true;
          loginHistoryStatus.textContent = '';
          delete loginHistoryStatus.dataset.statusType;
        }
      }

      function setLoginHistoryError(message = '') {
        if (!loginHistoryStatus) {
          return;
        }
        if (!message) {
          if (loginHistoryStatus.dataset.statusType === 'error') {
            loginHistoryStatus.hidden = true;
            loginHistoryStatus.textContent = '';
            delete loginHistoryStatus.dataset.statusType;
          }
          return;
        }
        loginHistoryStatus.textContent = message;
        loginHistoryStatus.dataset.statusType = 'error';
        loginHistoryStatus.hidden = false;
        if (loginHistoryEmpty) {
          loginHistoryEmpty.hidden = true;
        }
      }

      function updateLoginHistoryMeta(userMeta) {
        const name = userMeta && userMeta.display_name ? userMeta.display_name : '';
        if (loginHistorySubtitle) {
          const subtitle = name
            ? loginHistoryText('subtitle', { name }, loginHistoryText('subtitle_generic', {}, ''))
            : loginHistoryText('subtitle_generic', {}, '');
          loginHistorySubtitle.textContent = subtitle;
        }
      }

      function renderLoginHistory(events, context = {}) {
        if (!loginHistoryList) {
          return;
        }
        loginHistoryList.innerHTML = '';
        const list = Array.isArray(events) ? events : [];
        if (list.length === 0) {
          loginHistoryList.hidden = true;
          if (loginHistoryEmpty) {
            loginHistoryEmpty.hidden = false;
          }
          return;
        }

        loginHistoryList.hidden = false;
        if (loginHistoryEmpty) {
          loginHistoryEmpty.hidden = true;
        }

        list.forEach((entry) => {
          const item = document.createElement('li');
          item.className = 'login-history-item';

          const header = document.createElement('div');
          header.className = 'login-history-item__header';

          const ipValue = document.createElement('span');
          ipValue.className = 'login-history-item__ip';
          ipValue.textContent = entry.ip_address || loginHistoryText('unknown_ip', {}, 'Unknown IP');
          header.appendChild(ipValue);

          if (entry.is_current) {
            const badge = document.createElement('span');
            badge.className = 'login-history-item__badge';
            badge.textContent = loginHistoryText('current_badge', {}, 'Most recent');
            header.appendChild(badge);
          }

          item.appendChild(header);

          const deviceLine = document.createElement('div');
          deviceLine.className = 'login-history-item__device';
          const deviceSummary = loginHistoryText('device_summary', {
            device: entry.device_type || loginHistoryText('device_unknown', {}, 'Device'),
            os: entry.os_name || loginHistoryText('os_unknown', {}, 'OS'),
            browser: entry.browser_name || loginHistoryText('browser_unknown', {}, 'Browser'),
          }, '');
          deviceLine.textContent = deviceSummary || loginHistoryText('device_summary_fallback', {}, 'Device information unavailable');
          item.appendChild(deviceLine);

          const timeRow = document.createElement('div');
          timeRow.className = 'login-history-item__time';
          const timeElement = document.createElement('time');
          const createdAt = entry.created_at || '';
          const formatted = entry.created_at_formatted || formatDateTime(createdAt);
          if (createdAt) {
            timeElement.dateTime = createdAt;
          }
          timeElement.textContent = formatted || createdAt;
          const ariaLabel = loginHistoryText('time_label', { value: formatted || createdAt }, formatted || createdAt || '');
          if (ariaLabel) {
            timeElement.setAttribute('aria-label', ariaLabel);
          }
          timeRow.appendChild(timeElement);

          const relative = formatRelativeTime(createdAt);
          if (relative) {
            const relativeSpan = document.createElement('span');
            relativeSpan.className = 'login-history-item__relative';
            relativeSpan.textContent = relative;
            timeRow.appendChild(relativeSpan);
          }

          item.appendChild(timeRow);

          if (entry.user_agent) {
            const agentRow = document.createElement('div');
            agentRow.className = 'login-history-item__agent';
            const label = document.createElement('span');
            label.className = 'login-history-item__agent-label';
            label.textContent = loginHistoryText('user_agent_label', {}, 'User agent');
            const value = document.createElement('span');
            value.className = 'login-history-item__agent-value';
            value.textContent = entry.user_agent;
            agentRow.appendChild(label);
            agentRow.appendChild(value);
            item.appendChild(agentRow);
          }

          loginHistoryList.appendChild(item);
        });
      }

      async function fetchLoginHistory(userId, force = false) {
        if (!userId) {
          return null;
        }
        if (!force && loginHistoryCache.has(userId)) {
          return loginHistoryCache.get(userId);
        }
        const url = `${LOGIN_HISTORY_ENDPOINT}?user_id=${encodeURIComponent(userId)}`;
        try {
          const response = await fetch(url, {
            credentials: 'same-origin',
            headers: {
              'Accept': 'application/json'
            }
          });
          const responseText = await response.text();
          let payload = null;
          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid login history payload', error, responseText);
            }
          }
          if (!response.ok || !payload || payload.status !== 'success') {
            const errorMessage = payload && payload.message
              ? String(payload.message)
              : loginHistoryText('error', {}, 'Unable to load login activity.');
            throw new Error(errorMessage);
          }
          loginHistoryCache.set(userId, payload);
          return payload;
        } catch (error) {
          if (force && loginHistoryCache.has(userId)) {
            return loginHistoryCache.get(userId);
          }
          throw error;
        }
      }

      async function showLoginHistory(userId, meta = null) {
        if (!loginHistoryView || !userDetailModal || !userId) {
          return;
        }

        loginHistoryActiveUserId = userId;
        loginHistoryActiveMeta = meta ? { ...meta } : null;

        const cached = loginHistoryCache.get(userId) || null;
        if (activeModal !== userDetailModal) {
          openModal(userDetailModal);
        }
        setUserModalView('logins');
        if (cached) {
          resetLoginHistoryModal(false);
          setLoginHistoryError('');
          setLoginHistoryLoading(false);
          const userPayload = cached.user || meta || {};
          updateLoginHistoryMeta(userPayload);
          renderLoginHistory(cached.events || [], userPayload);
        } else {
          resetLoginHistoryModal();
          setLoginHistoryError('');
          if (meta) {
            updateLoginHistoryMeta(meta);
          } else {
            updateLoginHistoryMeta({ display_name: '', email: '' });
          }
          setLoginHistoryLoading(true);
        }

        try {
          const payload = await fetchLoginHistory(userId, Boolean(cached));
          if (loginHistoryActiveUserId !== userId) {
            return;
          }
          setLoginHistoryLoading(false);
          setLoginHistoryError('');
          const userPayload = payload && payload.user ? payload.user : (meta || {});
          updateLoginHistoryMeta(userPayload);
          renderLoginHistory(payload && payload.events ? payload.events : [], userPayload);
      } catch (error) {
        if (loginHistoryActiveUserId !== userId) {
          return;
        }
        setLoginHistoryLoading(false);
        const fallback = loginHistoryText('error', {}, 'Unable to load login activity.');
        setLoginHistoryError(error && error.message ? error.message : fallback);
      }
    }


      function getUserModalEmptyLabel() {
        return t('admin.user_modal.empty') || '—';
      }

      function updateUserModalBackPosition() {
        if (!userDetailModalContent || !userDetailBackButton) {
          return;
        }
        const offset = userDetailModalContent.scrollTop;
        if (offset > 0) {
          userDetailBackButton.style.transform = `translateY(${offset}px)`;
        } else {
          userDetailBackButton.style.transform = '';
        }
      }

      function resetUserDetailModal() {
        if (!userDetailModal) {
          return;
        }
        if (userDetailModalContent) {
          userDetailModalContent.scrollTop = 0;
        }
        setUserModalView('details');
        loginHistoryActiveUserId = null;
        loginHistoryActiveMeta = null;
        resetLoginHistoryModal(false);
        const empty = getUserModalEmptyLabel();
        userDetailModal.removeAttribute('data-user-modal-view');
        if ('userId' in userDetailModal.dataset) {
          delete userDetailModal.dataset.userId;
        }
        if ('userDisplayName' in userDetailModal.dataset) {
          delete userDetailModal.dataset.userDisplayName;
        }
        if ('userEmail' in userDetailModal.dataset) {
          delete userDetailModal.dataset.userEmail;
        }
        if (userDetailName) {
          userDetailName.textContent = empty;
        }
        if (userDetailEmail) {
          userDetailEmail.textContent = '';
          userDetailEmail.hidden = true;
        }
        if (userDetailId) {
          userDetailId.textContent = '';
        }
        if (userDetailSubtitle) {
          userDetailSubtitle.textContent = t('admin.user_modal.subtitle', { date: empty }) || '';
        }
        const detailElements = [
          userDetailRole,
          userDetailLanguage,
          userDetailStatus,
          userDetailCountry,
          userDetailAddress,
          userDetailPhone,
          userDetailCreated,
          userDetailCreatedIp,
          userDetailLastLogin,
          userDetailCompanyType,
          userDetailCompanyName,
          userDetailCompanyVat,
        ];
        detailElements.forEach((element) => {
          if (element) {
            element.textContent = empty;
          }
        });
        if (userDetailLastLoginIpValue) {
          userDetailLastLoginIpValue.textContent = empty;
        }
        if (userDetailBackButton) {
          userDetailBackButton.style.transform = '';
        }
        if (userDetailLoginsButton) {
          userDetailLoginsButton.hidden = true;
          userDetailLoginsButton.disabled = true;
          userDetailLoginsButton.dataset.userId = '';
          userDetailLoginsButton.dataset.userName = '';
          userDetailLoginsButton.dataset.userEmail = '';
        }
      }

    function setUserDetailText(element, value, emptyLabel) {
      if (!element) {
        return;
      }
      const text = String(value || '').trim();
      element.textContent = text !== '' ? text : emptyLabel;
    }

    function setUserDetailAddress(element, parts, emptyLabel) {
      if (!element) {
        return;
      }
      const normalized = Array.isArray(parts)
        ? parts.map((part) => String(part || '').trim()).filter((part) => part !== '')
        : [];
      if (normalized.length === 0) {
        element.textContent = emptyLabel;
        return;
      }
      element.textContent = normalized.join('\n');
    }

    function populateUserDetailModal(trigger) {
      if (!trigger || !userDetailModal) {
        return;
      }
      setUserModalView('details');
      const empty = getUserModalEmptyLabel();
      const idValue = trigger.getAttribute('data-user-id') || '';
      const nameValue = trigger.getAttribute('data-user-name') || trigger.getAttribute('data-user-email') || '';
      const emailValue = trigger.getAttribute('data-user-email') || '';
      const roleValue = trigger.getAttribute('data-user-role') || '';
      const languageLabel = trigger.getAttribute('data-user-language') || '';
      const languageCode = trigger.getAttribute('data-user-language-code') || '';
      const statusLabel = trigger.getAttribute('data-user-status-label') || '';
      const countryLabel = trigger.getAttribute('data-user-country') || '';
      const phoneValue = trigger.getAttribute('data-user-phone') || '';
      const createdAt = trigger.getAttribute('data-user-created-at') || '';
      const createdIp = trigger.getAttribute('data-user-created-ip-label') || trigger.getAttribute('data-user-created-ip') || '';
      const lastLoginAt = trigger.getAttribute('data-user-last-login-at') || '';
      const lastLoginIp = trigger.getAttribute('data-user-last-login-ip-label') || trigger.getAttribute('data-user-last-login-ip') || '';
      const companyTypeLabel = trigger.getAttribute('data-user-company-type-label') || '';
      const companyNameValue = trigger.getAttribute('data-user-company-name') || '';
      const companyVatValue = trigger.getAttribute('data-user-company-vat') || '';
      const addressParts = [
        trigger.getAttribute('data-user-address-line1') || '',
        trigger.getAttribute('data-user-address-line2') || '',
      ];
      const localityParts = [];
      const postalCode = trigger.getAttribute('data-user-postal-code') || '';
      const city = trigger.getAttribute('data-user-city') || '';
      if (postalCode) {
        localityParts.push(postalCode);
      }
      if (city) {
        localityParts.push(city);
      }
      if (localityParts.length) {
        addressParts.push(localityParts.join(' '));
      }

      userDetailModal.dataset.userId = idValue;
      userDetailModal.dataset.userDisplayName = nameValue;
      userDetailModal.dataset.userEmail = emailValue;

      setUserDetailText(userDetailName, nameValue, empty);

      if (userDetailEmail) {
        if (emailValue.trim() === '') {
          userDetailEmail.textContent = '';
          userDetailEmail.hidden = true;
        } else {
          userDetailEmail.hidden = false;
          userDetailEmail.textContent = emailValue;
        }
      }

      if (userDetailId) {
        userDetailId.textContent = idValue ? `ID #${idValue}` : '';
      }

      if (userDetailSubtitle) {
        userDetailSubtitle.textContent = t('admin.user_modal.subtitle', { date: createdAt || empty }) || '';
      }

      setUserDetailText(userDetailRole, roleValue, empty);
      const languageDisplay = languageLabel && languageCode
        ? `${languageLabel} (${languageCode})`
        : (languageLabel || languageCode);
      setUserDetailText(userDetailLanguage, languageDisplay, empty);
      setUserDetailText(userDetailStatus, statusLabel, empty);
      setUserDetailText(userDetailCountry, countryLabel, empty);
      setUserDetailAddress(userDetailAddress, addressParts, empty);
      setUserDetailText(userDetailPhone, phoneValue, empty);
      setUserDetailText(userDetailCreated, createdAt, empty);
      setUserDetailText(userDetailCreatedIp, createdIp, empty);
      setUserDetailText(userDetailLastLogin, lastLoginAt, empty);
      if (userDetailLastLoginIpValue) {
        const ipText = String(lastLoginIp || '').trim();
        userDetailLastLoginIpValue.textContent = ipText !== '' ? ipText : empty;
      }
      if (userDetailLoginsButton) {
        const parsedId = Number.parseInt(idValue, 10);
        const hasUserId = !Number.isNaN(parsedId) && parsedId > 0;
        userDetailLoginsButton.hidden = !hasUserId;
        userDetailLoginsButton.disabled = !hasUserId || userDetailActiveView === 'logins';
        userDetailLoginsButton.dataset.userId = hasUserId ? String(parsedId) : '';
        userDetailLoginsButton.dataset.userName = nameValue;
        userDetailLoginsButton.dataset.userEmail = emailValue;
      }
      setUserDetailText(userDetailCompanyType, companyTypeLabel, empty);
      setUserDetailText(userDetailCompanyName, companyNameValue, empty);
      setUserDetailText(userDetailCompanyVat, companyVatValue, empty);
    }

    function showUserDetails(trigger) {
      populateUserDetailModal(trigger);
      openModal(userDetailModal, trigger);
    }


    function createSmartlinkShareUrl(slug) {
      const base = (SMARTLINK_SHARE_BASE || '').replace(/\/+$/, '/');
      const safeSlug = String(slug || '').replace(/^\/+/, '');
      return `${base}${safeSlug}`;
      }

      function loadSmartlinkStorage() {
        if (!('localStorage' in window)) {
          return [];
        }
        try {
          const stored = window.localStorage.getItem(SMARTLINK_STORAGE_KEY);
          if (!stored) {
            return [];
          }
          const parsed = JSON.parse(stored);
          return Array.isArray(parsed) ? parsed : [];
        } catch (error) {
          console.warn('Unable to read stored smartlinks', error);
          return [];
        }
      }

      function saveSmartlinkStorage(list) {
        if (!('localStorage' in window)) {
          return;
        }
        try {
          window.localStorage.setItem(SMARTLINK_STORAGE_KEY, JSON.stringify(list));
        } catch (error) {
          console.warn('Unable to persist smartlinks', error);
        }
      }

      function paymentsTranslate(path, fallback = '') {
        if (!path) {
          return fallback;
        }
        const segments = String(path).split('.');
        let node = paymentsI18n;
        for (const segment of segments) {
          if (!node || typeof node !== 'object' || !(segment in node)) {
            return fallback;
          }
          node = node[segment];
        }
        return typeof node === 'string' ? node : fallback;
      }

      const paymentsCurrencyFormatters = new Map();
      let paymentsDateTimeFormatter = null;
      let paymentsDateFormatter = null;

      function getPaymentsDateTimeFormatter() {
        if (paymentsDateTimeFormatter) {
          return paymentsDateTimeFormatter;
        }
        try {
          paymentsDateTimeFormatter = new Intl.DateTimeFormat(docLang, { dateStyle: 'medium', timeStyle: 'short' });
        } catch (error) {
          paymentsDateTimeFormatter = new Intl.DateTimeFormat('en', { dateStyle: 'medium', timeStyle: 'short' });
        }
        return paymentsDateTimeFormatter;
      }

      function getPaymentsDateFormatter() {
        if (paymentsDateFormatter) {
          return paymentsDateFormatter;
        }
        try {
          paymentsDateFormatter = new Intl.DateTimeFormat(docLang, { dateStyle: 'medium' });
        } catch (error) {
          paymentsDateFormatter = new Intl.DateTimeFormat('en', { dateStyle: 'medium' });
        }
        return paymentsDateFormatter;
      }

      function paymentsFormatDateTime(value) {
        if (value === null || value === undefined) {
          return '';
        }
        let timestamp = Number(value);
        if (!Number.isFinite(timestamp) || timestamp <= 0) {
          return '';
        }
        if (timestamp < 100000000000) {
          timestamp *= 1000;
        }
        const date = new Date(timestamp);
        if (Number.isNaN(date.getTime())) {
          return '';
        }
        try {
          return getPaymentsDateTimeFormatter().format(date);
        } catch (error) {
          return date.toLocaleString();
        }
      }

      function paymentsFormatDate(value) {
        if (value === null || value === undefined) {
          return '';
        }
        let timestamp = Number(value);
        if (!Number.isFinite(timestamp) || timestamp <= 0) {
          return '';
        }
        if (timestamp < 100000000000) {
          timestamp *= 1000;
        }
        const date = new Date(timestamp);
        if (Number.isNaN(date.getTime())) {
          return '';
        }
        try {
          return getPaymentsDateFormatter().format(date);
        } catch (error) {
          return date.toLocaleDateString();
        }
      }

      function paymentsFormatAmount(amount, currency) {
        const numericAmount = Number(amount);
        if (!Number.isFinite(numericAmount)) {
          return '';
        }
        const normalizedCurrency = String(currency || 'eur').toUpperCase();
        let formatter = paymentsCurrencyFormatters.get(normalizedCurrency);
        if (!formatter) {
          try {
            formatter = new Intl.NumberFormat(docLang, { style: 'currency', currency: normalizedCurrency });
          } catch (error) {
            formatter = new Intl.NumberFormat('en', { style: 'currency', currency: 'EUR' });
          }
          paymentsCurrencyFormatters.set(normalizedCurrency, formatter);
        }
        return formatter.format(numericAmount / 100);
      }

      function paymentsSetHidden(element, hidden) {
        if (!element) {
          return;
        }
        element.hidden = Boolean(hidden);
      }

      function paymentsStatusLabel(status, requiresAction) {
        if (requiresAction) {
          const needsAction = paymentsTranslate('status.requires_action', 'Action required');
          if (needsAction) {
            return needsAction;
          }
        }
        const normalized = String(status || '').toLowerCase();
        if (!normalized) {
          return paymentsTranslate('status.unknown', 'Unknown');
        }
        const label = paymentsTranslate(`status.${normalized}`, '');
        return label || paymentsTranslate('status.unknown', normalized);
      }

      function paymentsStatusClass(status, requiresAction, isPaid) {
        const normalized = String(status || '').toLowerCase();
        if (requiresAction || ['past_due', 'uncollectible', 'void', 'canceled', 'incomplete', 'incomplete_expired', 'requires_payment_method', 'requires_action', 'failed', 'unpaid'].includes(normalized)) {
          return 'status-pill--danger';
        }
        if (isPaid || ['paid', 'succeeded'].includes(normalized)) {
          return 'status-pill--success';
        }
        if (['processing', 'open', 'pending', 'trialing', 'active', 'scheduled', 'draft'].includes(normalized)) {
          return 'status-pill--info';
        }
        return '';
      }

      function paymentsNeedsAttention(entry) {
        if (!entry) {
          return false;
        }
        if (entry.requires_action) {
          return true;
        }
        const normalized = String(entry.status || '').toLowerCase();
        return ['open', 'past_due', 'uncollectible', 'canceled', 'void', 'incomplete', 'incomplete_expired', 'requires_payment_method', 'requires_action', 'failed', 'unpaid'].includes(normalized);
      }

      function paymentsIsWarningStatus(status) {
        const normalized = String(status || '').toLowerCase();
        return ['past_due', 'uncollectible', 'canceled', 'void', 'incomplete', 'incomplete_expired', 'requires_payment_method', 'requires_action', 'failed', 'unpaid'].includes(normalized);
      }

      function paymentsIsSuccessStatus(status) {
        const normalized = String(status || '').toLowerCase();
        return ['active', 'trialing', 'paid', 'succeeded'].includes(normalized);
      }

      function paymentsCategoryLabel(category) {
        if (!category) {
          return paymentsTranslate('category_labels.other', 'Other services');
        }
        return paymentsTranslate(`category_labels.${category}`, '') || paymentsTranslate('category_labels.other', 'Other services');
      }

      function paymentsPlanLabel(entry) {
        if (!entry) {
          return paymentsTranslate('category_labels.other', 'Other services');
        }
        const planKey = entry.plan_key || entry.planKey;
        if (planKey) {
          const label = paymentsTranslate(`plan_labels.${planKey}`, '');
          if (label) {
            return label;
          }
        }
        const description = typeof entry.description === 'string' && entry.description.trim() !== ''
          ? entry.description.trim()
          : '';
        if (description) {
          return description;
        }
        return paymentsCategoryLabel(entry.category || 'other');
      }

      function paymentsIntervalLabel(interval) {
        if (!interval) {
          return '';
        }
        return paymentsTranslate(`upcoming.intervals.${interval}`, interval);
      }

      function paymentsFormatUpdated(timestamp) {
        const formatted = paymentsFormatDateTime(timestamp);
        if (!formatted) {
          return '';
        }
        const template = paymentsTranslate('updated_at', 'Updated :time');
        return template.replace(':time', formatted);
      }

      function paymentsClearElement(element) {
        if (!element) {
          return;
        }
        while (element.firstChild) {
          element.removeChild(element.firstChild);
        }
      }

      function paymentsCreateActionButton(href, title, icon) {
        if (!href) {
          return null;
        }
        const button = document.createElement('a');
        button.className = 'payments-action-button';
        button.href = href;
        button.target = '_blank';
        button.rel = 'noopener noreferrer';
        button.title = title;
        const iconElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        iconElement.setAttribute('viewBox', '0 0 24 24');
        iconElement.setAttribute('aria-hidden', 'true');
        iconElement.setAttribute('focusable', 'false');
        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        path.setAttribute('fill', 'currentColor');
        path.setAttribute('d', icon);
        iconElement.appendChild(path);
        button.appendChild(iconElement);
        const hidden = document.createElement('span');
        hidden.className = 'visually-hidden';
        hidden.textContent = title;
        button.appendChild(hidden);
        return button;
      }

      function showPaymentsLoading() {
        paymentsSetHidden(paymentsLoadingElement, false);
        paymentsSetHidden(paymentsErrorElement, true);
        paymentsSetHidden(paymentsContent, true);
      }

      function showPaymentsError(message) {
        if (paymentsErrorMessage) {
          paymentsErrorMessage.textContent = message || paymentsTranslate('errors.generic', 'Unable to load your payments. Please try again.');
        }
        paymentsSetHidden(paymentsLoadingElement, true);
        paymentsSetHidden(paymentsContent, true);
        paymentsSetHidden(paymentsErrorElement, false);
      }

      function showPaymentsContent() {
        paymentsSetHidden(paymentsLoadingElement, true);
        paymentsSetHidden(paymentsErrorElement, true);
        paymentsSetHidden(paymentsContent, false);
      }

      function updatePaymentsUpdated(timestamp) {
        if (!paymentsUpdatedLabel || !paymentsUpdatedContainer) {
          return;
        }
        const label = paymentsFormatUpdated(timestamp);
        if (label) {
          paymentsUpdatedLabel.textContent = label;
          paymentsSetHidden(paymentsUpdatedContainer, false);
        } else {
          paymentsUpdatedLabel.textContent = '';
          paymentsSetHidden(paymentsUpdatedContainer, true);
        }
      }

      function renderPaymentsUpcoming(list) {
        if (!paymentsUpcomingList) {
          return;
        }
        paymentsClearElement(paymentsUpcomingList);
        if (!Array.isArray(list) || list.length === 0) {
          if (paymentsUpcomingEmpty) {
            paymentsUpcomingEmpty.textContent = paymentsTranslate('upcoming.empty', 'No renewals scheduled.');
            paymentsSetHidden(paymentsUpcomingEmpty, false);
          }
          return;
        }
        paymentsSetHidden(paymentsUpcomingEmpty, true);
        list.forEach((item) => {
          const card = document.createElement('article');
          card.className = 'payments-upcoming__card';
          if (paymentsIsWarningStatus(item.status) || paymentsNeedsAttention(item)) {
            card.classList.add('payments-upcoming__card--alert');
          } else if (paymentsIsSuccessStatus(item.status)) {
            card.classList.add('payments-upcoming__card--success');
          }

          const title = document.createElement('h4');
          title.className = 'payments-upcoming__title';
          title.textContent = paymentsPlanLabel(item);
          card.appendChild(title);

          const meta = document.createElement('div');
          meta.className = 'payments-upcoming__meta';
          const amountLabel = paymentsFormatAmount(item.amount, item.currency);
          if (amountLabel) {
            const amount = document.createElement('span');
            amount.className = 'payments-upcoming__amount';
            amount.textContent = amountLabel;
            meta.appendChild(amount);
            if (item.interval) {
              const interval = document.createElement('span');
              interval.textContent = `/${paymentsIntervalLabel(item.interval)}`;
              meta.appendChild(interval);
            }
          }
          const categoryLabel = paymentsCategoryLabel(item.category || '');
          if (categoryLabel) {
            const badge = document.createElement('span');
            badge.className = 'payments-upcoming__badge';
            badge.textContent = categoryLabel;
            meta.appendChild(badge);
          }
          card.appendChild(meta);

          const statusLabel = paymentsStatusLabel(item.status, item.requires_action);
          if (statusLabel) {
            const statusPill = document.createElement('span');
            const statusClass = paymentsStatusClass(item.status, item.requires_action, false);
            statusPill.className = `status-pill${statusClass ? ` ${statusClass}` : ''}`;
            statusPill.textContent = statusLabel;
            card.appendChild(statusPill);
          }

          const scheduledLabel = paymentsFormatDateTime(item.scheduled_for);
          if (scheduledLabel) {
            const dateInfo = document.createElement('span');
            dateInfo.className = 'payments-upcoming__date';
            const template = paymentsTranslate('upcoming.scheduled_on', 'Scheduled for :date');
            dateInfo.textContent = template.replace(':date', scheduledLabel);
            card.appendChild(dateInfo);
          }

          if (item.cancel_at_period_end) {
            const note = document.createElement('p');
            note.className = 'payments-upcoming__note';
            const cancelTemplate = paymentsTranslate('upcoming.cancelled_on', 'Ends on :date');
            const cancelDate = paymentsFormatDate(item.scheduled_for) || paymentsFormatDateTime(item.scheduled_for);
            note.textContent = cancelTemplate.replace(':date', cancelDate || '');
            card.appendChild(note);
          }

          if (item.retry_url && paymentsNeedsAttention(item)) {
            const actions = document.createElement('div');
            actions.className = 'payments-upcoming__actions';
            const retryTitle = paymentsTranslate('actions.retry', 'Retry payment');
            const retryButton = paymentsCreateActionButton(item.retry_url, retryTitle, 'M21 12a9 9 0 1 1-2.64-6.36L21 8V3h-5l1.76 1.76A7 7 0 1 0 19 12z');
            if (retryButton) {
              actions.appendChild(retryButton);
            }
            if (actions.childNodes.length > 0) {
              card.appendChild(actions);
            }
          }

          paymentsUpcomingList.appendChild(card);
        });
      }

      function renderPaymentsHistory(list) {
        if (!paymentsTableBody) {
          return;
        }
        paymentsClearElement(paymentsTableBody);
        if (!Array.isArray(list) || list.length === 0) {
          if (paymentsEmptyState) {
            paymentsEmptyState.textContent = paymentsTranslate('history.empty', 'No payments recorded yet.');
            paymentsSetHidden(paymentsEmptyState, false);
          }
          return;
        }
        paymentsSetHidden(paymentsEmptyState, true);
        list.forEach((entry) => {
          const row = document.createElement('tr');

          const dateCell = document.createElement('td');
          const createdLabel = paymentsFormatDateTime(entry.created);
          dateCell.textContent = createdLabel || '—';
          if (createdLabel) {
            dateCell.title = createdLabel;
          }
          row.appendChild(dateCell);

          const serviceCell = document.createElement('td');
          const serviceWrapper = document.createElement('div');
          serviceWrapper.className = 'payments-service';
          const serviceName = document.createElement('span');
          serviceName.className = 'payments-service__name';
          serviceName.textContent = paymentsPlanLabel(entry);
          serviceWrapper.appendChild(serviceName);
          const serviceMeta = document.createElement('div');
          serviceMeta.className = 'payments-service__meta';
          const categoryLabel = paymentsCategoryLabel(entry.category || '');
          if (categoryLabel) {
            const categoryBadge = document.createElement('span');
            categoryBadge.className = 'payments-tag';
            categoryBadge.textContent = categoryLabel;
            serviceMeta.appendChild(categoryBadge);
          }
          if (entry.is_subscription) {
            const subscriptionBadge = document.createElement('span');
            subscriptionBadge.className = 'payments-tag';
            subscriptionBadge.textContent = paymentsTranslate('history.subscription_tag', 'Subscription');
            serviceMeta.appendChild(subscriptionBadge);
          } else {
            const oneTimeBadge = document.createElement('span');
            oneTimeBadge.className = 'payments-tag';
            oneTimeBadge.textContent = paymentsTranslate('history.one_time_tag', 'One-time');
            serviceMeta.appendChild(oneTimeBadge);
          }
          if (entry.interval) {
            const intervalLabel = paymentsTranslate('history.interval_label', 'Every :interval').replace(':interval', paymentsIntervalLabel(entry.interval));
            const intervalBadge = document.createElement('span');
            intervalBadge.className = 'payments-tag';
            intervalBadge.textContent = intervalLabel;
            serviceMeta.appendChild(intervalBadge);
          }
          if (serviceMeta.childNodes.length > 0) {
            serviceWrapper.appendChild(serviceMeta);
          }
          serviceCell.appendChild(serviceWrapper);
          row.appendChild(serviceCell);

          const amountCell = document.createElement('td');
          const amountLabel = paymentsFormatAmount(entry.amount, entry.currency);
          amountCell.textContent = amountLabel || '—';
          row.appendChild(amountCell);

          const statusCell = document.createElement('td');
          const statusWrapper = document.createElement('div');
          statusWrapper.className = 'payments-row-status';
          const statusLabel = paymentsStatusLabel(entry.status, entry.requires_action);
          const statusClass = paymentsStatusClass(entry.status, entry.requires_action, entry.is_paid);
          const statusPill = document.createElement('span');
          statusPill.className = `status-pill${statusClass ? ` ${statusClass}` : ''}`;
          statusPill.textContent = statusLabel;
          statusWrapper.appendChild(statusPill);
          statusCell.appendChild(statusWrapper);
          row.appendChild(statusCell);

          const actionsCell = document.createElement('td');
          let hasActions = false;
          if (entry.hosted_invoice_url || entry.invoice_pdf || entry.receipt_url) {
            const actions = document.createElement('div');
            actions.className = 'payments-actions';
            if (entry.hosted_invoice_url) {
              const invoiceTitle = paymentsNeedsAttention(entry)
                ? paymentsTranslate('actions.retry', 'Retry payment')
                : paymentsTranslate('actions.view_invoice', 'View invoice');
              const iconPath = paymentsNeedsAttention(entry)
                ? 'M21 12a9 9 0 1 1-2.64-6.36L21 8V3h-5l1.76 1.76A7 7 0 1 0 19 12z'
                : 'M6 3h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm8 7H8v2h6v-2zm0 4H8v2h6v-2z';
              const invoiceButton = paymentsCreateActionButton(entry.hosted_invoice_url, invoiceTitle, iconPath);
              if (invoiceButton) {
                actions.appendChild(invoiceButton);
                hasActions = true;
              }
            }
            if (entry.invoice_pdf) {
              const downloadTitle = paymentsTranslate('actions.download_invoice', 'Download invoice');
              const downloadButton = paymentsCreateActionButton(entry.invoice_pdf, downloadTitle, 'M12 16l4-4h-3V4h-2v8H8l4 4zm-6 2h12v2H6z');
              if (downloadButton) {
                actions.appendChild(downloadButton);
                hasActions = true;
              }
            }
            if (entry.receipt_url) {
              const receiptTitle = paymentsTranslate('actions.view_receipt', 'View receipt');
              const receiptButton = paymentsCreateActionButton(entry.receipt_url, receiptTitle, 'M5 2h14a1 1 0 0 1 1 1v17l-3-2-3 2-3-2-3 2-3-2V3a1 1 0 0 1 1-1zm4 5v2h6V7H9zm0 4v2h6v-2H9z');
              if (receiptButton) {
                actions.appendChild(receiptButton);
                hasActions = true;
              }
            }
            if (hasActions) {
              actionsCell.appendChild(actions);
            }
          }
          if (!hasActions) {
            actionsCell.textContent = '—';
          }
          row.appendChild(actionsCell);

          paymentsTableBody.appendChild(row);
        });
      }

      function renderPayments(data) {
        if (!data || typeof data !== 'object') {
          return;
        }
        renderPaymentsUpcoming(Array.isArray(data.scheduled) ? data.scheduled : []);
        renderPaymentsHistory(Array.isArray(data.payments) ? data.payments : []);
        updatePaymentsUpdated(data.now);
        showPaymentsContent();
      }

      async function loadPayments(force = false) {
        if (!paymentsModal) {
          return;
        }
        if (paymentsLoading) {
          return;
        }
        if (paymentsLoaded && !force) {
          if (paymentsDataCache) {
            renderPayments(paymentsDataCache);
          }
          return;
        }
        paymentsLoading = true;
        showPaymentsLoading();
        try {
          const response = await fetch('/user-payments.php', {
            method: 'GET',
            credentials: 'same-origin',
            headers: {
              'Accept': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            }
          });
          const responseText = await response.text();
          let payload = null;
          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid payments payload', error, responseText);
            }
          }
          if (!payload || (payload.status !== 'success' && payload.status !== 'missing_key')) {
            const message = payload && payload.message
              ? payload.message
              : paymentsTranslate('errors.generic', 'Unable to load your payments. Please try again.');
            showPaymentsError(message);
            paymentsLoaded = false;
            paymentsDataCache = null;
            return;
          }
          if (payload.status === 'missing_key') {
            const message = payload.message || paymentsTranslate('errors.missing_key', 'Stripe is not configured yet.');
            showPaymentsError(message);
            paymentsLoaded = false;
            paymentsDataCache = null;
            return;
          }
          paymentsDataCache = payload;
          paymentsLoaded = true;
          renderPayments(payload);
        } catch (error) {
          console.error('Unable to load payments', error);
          const fallback = paymentsTranslate('errors.generic', 'Unable to load your payments. Please try again.');
          showPaymentsError(fallback);
          paymentsLoaded = false;
          paymentsDataCache = null;
        } finally {
          paymentsLoading = false;
        }
      }


      function setSmartlinkFeedback(message = '', status = '') {
        if (!smartlinkFeedback) {
          return;
        }
        smartlinkFeedback.textContent = message;
        smartlinkFeedback.classList.remove('error', 'success');
        if (status) {
          smartlinkFeedback.classList.add(status);
        }
      }

      function setSmartlinkLoading(isLoading) {
        if (!smartlinkSubmit) {
          return;
        }
        const defaultLabel = smartlinkSubmit.dataset.defaultLabel || smartlinkSubmit.textContent || '';
        if (!smartlinkSubmit.dataset.defaultLabel) {
          smartlinkSubmit.dataset.defaultLabel = defaultLabel;
        }
        smartlinkSubmit.disabled = Boolean(isLoading);
        smartlinkSubmit.classList.toggle('is-loading', Boolean(isLoading));
        if (isLoading) {
          smartlinkSubmit.textContent = smartlinkTranslate('form.processing', 'Generating…');
        } else {
          smartlinkSubmit.textContent = smartlinkSubmit.dataset.defaultLabel || defaultLabel;
        }
      }

      function getPlatformConfigById(id) {
        return SMARTLINK_PLATFORMS.find((platform) => platform.id === id) || null;
      }

      function normalizePlatformEntry(entry) {
        if (!entry || typeof entry !== 'object') {
          return null;
        }
        const config = entry.id ? getPlatformConfigById(entry.id) : null;
        const id = (entry.id || config?.id || '').toString();
        if (!id) {
          return null;
        }
        return {
          id,
          label: entry.label || config?.label || id,
          logo: entry.logo || config?.logo || '',
          color: entry.color || config?.color || '#6366f1',
          url: entry.url || '',
          source: entry.source || (entry.url ? 'resolved' : 'search'),
        };
      }

      function mapPlatforms(platformIds, upc, slug, resolvedPlatforms = []) {
        const resolvedMap = Array.isArray(resolvedPlatforms)
          ? resolvedPlatforms.reduce((accumulator, item) => {
              const normalized = normalizePlatformEntry(item);
              if (normalized) {
                accumulator[normalized.id] = normalized;
              }
              return accumulator;
            }, {})
          : {};
        const searchTerm = encodeURIComponent(upc || slug || '');
        return platformIds.map((id) => {
          const config = getPlatformConfigById(id) || { id, label: id, logo: '', color: '#6366f1', url_prefix: '' };
          const resolved = resolvedMap[config.id] || resolvedMap[id];
          if (resolved && resolved.url) {
            return { ...config, ...resolved };
          }
          const urlPrefix = config.url_prefix || '';
          return {
            id: config.id,
            label: config.label,
            logo: config.logo,
            color: config.color,
            url: urlPrefix ? `${urlPrefix}${searchTerm}` : '',
            source: 'search',
          };
        });
      }

      function createEmptyStats() {
        return {
          totalViews: 0,
          totalClicks: 0,
          uniqueClicks: 0,
          totalCopies: 0,
          uniqueCopies: 0,
          ctr: 0,
          conversions: 0,
          saves: 0,
          timeline: [],
          platformBreakdown: [],
          countries: [],
          cities: [],
          highlights: [],
          updatedAt: '',
        };
      }

      function buildSmartlinkStats(analytics) {
        if (!analytics || typeof analytics !== 'object') {
          return createEmptyStats();
        }
        const stats = analytics.stats && typeof analytics.stats === 'object' ? analytics.stats : {};
        const totalViews = Number(stats.views || 0);
        const totalClicks = Number(stats.clicks || 0);
        const totalCopies = Number(stats.copies || 0);
        const uniqueClicks = Number(stats.unique_clicks || 0);
        const uniqueCopies = Number(stats.unique_copies || 0);
        const ctr = totalViews > 0 ? (totalClicks / totalViews) * 100 : 0;
        const conversions = uniqueClicks;
        const saves = totalCopies;
        const timeline = Array.isArray(stats.timeline)
          ? stats.timeline.map((entry) => {
              if (entry && typeof entry === 'object') {
                const value = Number(entry.clicks ?? entry.value ?? 0) || 0;
                const date = typeof entry.date === 'string' && entry.date
                  ? entry.date
                  : typeof entry.day === 'string' && entry.day
                    ? entry.day
                    : typeof entry.timestamp === 'string' && entry.timestamp
                      ? entry.timestamp
                      : '';
                const label = typeof entry.label === 'string' ? entry.label : '';
                return {
                  value,
                  date,
                  label,
                };
              }
              const numericValue = Number(entry || 0) || 0;
              return {
                value: numericValue,
                date: '',
                label: '',
              };
            })
          : [];
        const platformBreakdown = Array.isArray(stats.platforms)
          ? stats.platforms.map((item) => ({
              id: item?.id || '',
              label: item?.label || (item?.id || '').toString(),
              color: item?.color || '#6366f1',
              percentage: Number(item?.percentage || 0),
              clicks: Number(item?.clicks || 0),
              uniqueClicks: Number(item?.unique_clicks || 0),
            }))
          : [];
        const countries = Array.isArray(stats.countries)
          ? stats.countries.map((item) => ({
              code: item?.code || '',
              name: item?.name || (item?.code || '').toString(),
              count: Number(item?.count || 0),
              percentage: Number(item?.percentage || 0),
              coords: item?.coords || { x: 50, y: 50 },
            }))
          : [];
        const cities = Array.isArray(stats.cities)
          ? stats.cities.map((item) => ({
              city: item?.city || '',
              country: item?.country || '',
              percentage: Number(item?.percentage || 0),
              count: Number(item?.count || 0),
            }))
          : [];

        const highlights = [];
        if (platformBreakdown.length > 0) {
          const topPlatform = platformBreakdown[0];
          highlights.push({
            label: topPlatform.label,
            value: `${topPlatform.percentage.toFixed(1)}%`,
          });
        }
        if (countries.length > 0) {
          const topCountry = countries[0];
          highlights.push({
            label: topCountry.name,
            value: `${Math.round(topCountry.percentage)}%`,
          });
        }
        highlights.push({
          label: smartlinkTranslate('analytics.summary.clicks', 'Total clicks'),
          value: totalClicks.toLocaleString(docLang),
        });

        return {
          totalViews,
          totalClicks,
          uniqueClicks,
          totalCopies,
          uniqueCopies,
          ctr,
          conversions,
          saves,
          timeline,
          platformBreakdown,
          countries,
          cities,
          highlights,
          updatedAt: analytics.updated_at || '',
        };
      }

      async function fetchSmartlinkAnalytics(slug) {
        if (!slug) {
          return null;
        }
        try {
          const response = await fetch(`${SMARTLINK_ANALYTICS_ENDPOINT}?slug=${encodeURIComponent(slug)}`, {
            method: 'GET',
            credentials: 'same-origin',
          });
          const parsed = await response.json().catch(() => null);
          if (!response.ok) {
            const message = parsed && typeof parsed.error === 'string' ? parsed.error : `Status ${response.status}`;
            throw new Error(message);
          }
          if (!parsed || typeof parsed !== 'object') {
            throw new Error('Invalid analytics response.');
          }
          if (parsed.success === false) {
            const message = typeof parsed.error === 'string' ? parsed.error : 'Analytics unavailable.';
            throw new Error(message);
          }
          return parsed.data || null;
        } catch (error) {
          console.warn('Unable to fetch smartlink analytics', error);
          return null;
        }
      }

      async function refreshSmartlinkAnalyticsById(id, options = {}) {
        const persist = Boolean(options.persist);
        if (!id) {
          return;
        }
        const link = smartlinks.find((item) => item.id === id);
        if (!link) {
          return;
        }
        const analytics = await fetchSmartlinkAnalytics(link.slug);
        if (!analytics) {
          if (!link.stats || typeof link.stats !== 'object') {
            link.stats = createEmptyStats();
          }
          return;
        }
        link.stats = buildSmartlinkStats(analytics);
        if (analytics.title && (!link.displayName || link.displayName === link.slug)) {
          link.displayName = analytics.title;
        }
        const artist = analytics.artist || '';
        if (!link.subtitle || link.subtitle === `UPC ${link.upc || ''}`) {
          const subtitleParts = [];
          if (artist) {
            subtitleParts.push(artist);
          }
          if (link.upc) {
            subtitleParts.push(`UPC ${link.upc}`);
          }
          link.subtitle = subtitleParts.join(' • ');
        }
        link.createdAt = analytics.created_at || link.createdAt;
        link.updatedAt = analytics.updated_at || link.updatedAt || link.createdAt;
        link.shareUrl = analytics.share_url || link.shareUrl;
        if (link.id === activeSmartlinkId) {
          renderSmartlinkAnalyticsDetails(link);
        }
        if (persist) {
          saveSmartlinkStorage(smartlinks);
        }
      }

      async function refreshAllSmartlinkAnalytics() {
        if (!smartlinks.length) {
          return;
        }
        await Promise.all(smartlinks.map((link) => refreshSmartlinkAnalyticsById(link.id)));
        ensureActiveSmartlink();
        renderSmartlinkHistory();
        renderSmartlinkAnalyticsList();
        setActiveSmartlink(activeSmartlinkId);
        saveSmartlinkStorage(smartlinks);
      }

      function normalizeStoredSmartlink(link) {
        if (!link || typeof link !== 'object') {
          return null;
        }
        const normalized = { ...link };
        const normalizedSlug = typeof normalized.slug === 'string' && normalized.slug
          ? normalized.slug
          : createSmartlinkSlug(normalized.upc || '', '');
        normalized.slug = normalizedSlug;
        normalized.shareUrl = normalized.shareUrl && normalized.shareUrl.includes('/musiclink/')
          ? normalized.shareUrl
          : createSmartlinkShareUrl(normalizedSlug);
        normalized.artwork = typeof normalized.artwork === 'string' ? normalized.artwork : '';
        if (!normalized.createdAt) {
          normalized.createdAt = new Date().toISOString();
        }
        if (!normalized.updatedAt) {
          normalized.updatedAt = normalized.createdAt;
        }
        if (!normalized.subtitle) {
          normalized.subtitle = normalized.upc ? `UPC ${normalized.upc}` : '';
        }
        if (Array.isArray(normalized.platforms)) {
          normalized.platforms = normalized.platforms
            .map((item) => normalizePlatformEntry(item))
            .filter((item) => item !== null);
        } else {
          normalized.platforms = [];
        }
        if (normalized.stats && typeof normalized.stats === 'object' && typeof normalized.stats.totalClicks !== 'undefined') {
          const stored = normalized.stats;
          normalized.stats = {
            ...createEmptyStats(),
            totalViews: Number(stored.totalViews || stored.views || 0),
            totalClicks: Number(stored.totalClicks || stored.clicks || 0),
            uniqueClicks: Number(stored.uniqueClicks || stored.conversions || 0),
            totalCopies: Number(stored.totalCopies || stored.saves || 0),
            uniqueCopies: Number(stored.uniqueCopies || 0),
            ctr: Number(stored.ctr || 0),
            conversions: Number(stored.conversions || stored.uniqueClicks || 0),
            saves: Number(stored.saves || stored.totalCopies || 0),
            timeline: Array.isArray(stored.timeline)
              ? stored.timeline.map((value) => {
                  if (value && typeof value === 'object') {
                    const numericValue = Number(value.value ?? value.clicks ?? 0) || 0;
                    const date = typeof value.date === 'string' && value.date
                      ? value.date
                      : typeof value.day === 'string' && value.day
                        ? value.day
                        : typeof value.timestamp === 'string' && value.timestamp
                          ? value.timestamp
                          : '';
                    const label = typeof value.label === 'string' ? value.label : '';
                    return {
                      value: numericValue,
                      date,
                      label,
                    };
                  }
                  const numericValue = Number(value || 0) || 0;
                  return {
                    value: numericValue,
                    date: '',
                    label: '',
                  };
                })
              : [],
            platformBreakdown: Array.isArray(stored.platformBreakdown)
              ? stored.platformBreakdown.map((item) => ({
                  id: item?.id || '',
                  label: item?.label || (item?.id || '').toString(),
                  color: item?.color || '#6366f1',
                  percentage: Number(item?.percentage || 0),
                  clicks: Number(item?.clicks || 0),
                  uniqueClicks: Number(item?.uniqueClicks || 0),
                }))
              : [],
            countries: Array.isArray(stored.countries) ? stored.countries : [],
            cities: Array.isArray(stored.cities) ? stored.cities : [],
            highlights: Array.isArray(stored.highlights) ? stored.highlights : [],
            updatedAt: stored.updatedAt || '',
          };
        } else {
          normalized.stats = createEmptyStats();
        }
        return normalized;
      }

      async function generateSmartlinkData(upc, slugInput, platformIds) {
        const slug = createSmartlinkSlug(upc, slugInput);
        const payload = {
          upc,
          slug,
          platformIds,
        };
        let responseData = null;
        try {
          const response = await fetch(SMARTLINK_RESOLVER_ENDPOINT, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(payload),
          });
          let parsed = null;
          try {
            parsed = await response.json();
          } catch (error) {
            parsed = null;
          }
          if (!response.ok) {
            const message = parsed && typeof parsed.error === 'string' && parsed.error !== ''
              ? parsed.error
              : `Request failed with status ${response.status}`;
            throw new Error(message);
          }
          if (!parsed || typeof parsed !== 'object') {
            throw new Error('Invalid response from smartlink service.');
          }
          if (parsed.success === false) {
            throw new Error(typeof parsed.error === 'string' && parsed.error !== '' ? parsed.error : 'Unable to resolve smartlink.');
          }
          responseData = parsed.data || null;
        } catch (error) {
          const message = error instanceof Error && error.message ? error.message : 'Unable to resolve smartlink.';
          throw new Error(message);
        }

        const finalSlug = responseData && typeof responseData.slug === 'string' && responseData.slug
          ? responseData.slug
          : slug;
        const platforms = mapPlatforms(
          platformIds,
          upc,
          finalSlug,
          Array.isArray(responseData?.platforms) ? responseData.platforms : []
        );
        const hasSpotifyFallback = platforms.some((platform) => platform.id === 'spotify' && platform.source === 'search');
        if (hasSpotifyFallback) {
          const fallbackMessage = smartlinkTranslate(
            'errors.spotify_failback',
            'We could not find a Spotify link for this UPC yet. Double-check the code or wait a little longer before generating your smartlink.'
          );
          throw new Error(fallbackMessage);
        }

        const analytics = await fetchSmartlinkAnalytics(finalSlug);
        const stats = analytics ? buildSmartlinkStats(analytics) : createEmptyStats();
        const title = responseData?.title || analytics?.title || toTitleCase(finalSlug);
        const subtitleParts = [];
        const artistName = responseData?.artist || analytics?.artist || '';
        if (artistName) {
          subtitleParts.push(artistName);
        }
        if (upc) {
          subtitleParts.push(`UPC ${upc}`);
        }
        const subtitle = subtitleParts.join(' • ');
        return {
          id: responseData?.id || analytics?.id || `${Date.now()}-${Math.round(Math.random() * 1000)}`,
          upc,
          slug: finalSlug,
          shareUrl: responseData?.share_url || analytics?.share_url || createSmartlinkShareUrl(finalSlug),
          createdAt: analytics?.created_at || responseData?.created_at || new Date().toISOString(),
          updatedAt: analytics?.updated_at || responseData?.updated_at || new Date().toISOString(),
          displayName: title || `Release ${upc || finalSlug}`,
          subtitle: subtitle || (upc ? `UPC ${upc}` : ''),
          artwork: responseData?.artwork || '',
          platforms,
          stats,
        };
      }

      function getSmartlinkInitials(source) {
        if (source && typeof source === 'object') {
          const candidate = source.displayName || source.slug || '';
          const initials = candidate.replace(/[^A-Za-z0-9]/g, '').slice(0, 2).toUpperCase();
          if (initials) {
            return initials;
          }
        }
        if (typeof source === 'string') {
          const initials = source.replace(/[^A-Za-z0-9]/g, '').slice(0, 2).toUpperCase();
          if (initials) {
            return initials;
          }
        }
        return 'SL';
      }

      function applySmartlinkArtwork(target, artworkUrl, fallbackText) {
        if (!target) {
          return;
        }
        const normalizedFallback = typeof fallbackText === 'string' && fallbackText !== '' ? fallbackText : 'SL';
        if (artworkUrl) {
          target.dataset.hasCover = 'true';
          target.style.backgroundImage = `url('${artworkUrl.replace(/'/g, "\\'")}')`;
          target.textContent = '';
          return;
        }
        target.dataset.hasCover = 'false';
        target.style.backgroundImage = '';
        target.textContent = normalizedFallback;
      }

      function renderSmartlinkPreview(link) {
        if (!smartlinkPreview) {
          return;
        }
        const hasLink = Boolean(link);
        if (smartlinkPreviewContent) {
          smartlinkPreviewContent.hidden = !hasLink;
        }
        if (smartlinkPreviewEmpty) {
          smartlinkPreviewEmpty.hidden = hasLink;
        }
        if (smartlinkSuccess) {
          smartlinkSuccess.classList.toggle('is-visible', hasLink);
        }
        if (!hasLink) {
          if (smartlinkPreviewLink) {
            smartlinkPreviewLink.value = '';
          }
          if (smartlinkCopyFeedback) {
            smartlinkCopyFeedback.textContent = '';
          }
          if (smartlinkPreviewPlatforms) {
            smartlinkPreviewPlatforms.innerHTML = '';
          }
          if (smartlinkCover) {
            smartlinkCover.textContent = 'UPC';
            smartlinkCover.style.backgroundImage = '';
            smartlinkCover.removeAttribute('data-has-cover');
          }
          return;
        }
        if (smartlinkPreviewLink) {
          const linkValue = link.shareUrl || createSmartlinkShareUrl(link.slug);
          smartlinkPreviewLink.value = linkValue;
        }
        if (smartlinkCopyFeedback) {
          smartlinkCopyFeedback.textContent = '';
        }
        if (smartlinkCover) {
          applySmartlinkArtwork(smartlinkCover, link.artwork || '', getSmartlinkInitials(link));
        }
        if (smartlinkTitle) {
          smartlinkTitle.textContent = link.displayName || '';
        }
        if (smartlinkSubtitle) {
          smartlinkSubtitle.textContent = link.subtitle || '';
        }
        if (smartlinkPreviewPlatforms) {
          smartlinkPreviewPlatforms.innerHTML = '';
          const ctaLabel = smartlinkTranslate('preview.cta_label', 'Listen on');
          link.platforms.forEach((platform) => {
            const item = document.createElement(platform.url ? 'a' : 'div');
            item.className = 'smartlinks-preview__platform';
            if (platform.url) {
              item.href = platform.url;
              item.target = '_blank';
              item.rel = 'noopener noreferrer';
            }
            const nameSpan = document.createElement('span');
            nameSpan.textContent = platform.label;
            const ctaSpan = document.createElement('span');
            ctaSpan.className = 'smartlinks-preview__cta';
            ctaSpan.textContent = ctaLabel;
            item.appendChild(nameSpan);
            item.appendChild(ctaSpan);
            smartlinkPreviewPlatforms.appendChild(item);
          });
        }
      }

      function renderSmartlinkHistory() {
        if (!smartlinkHistoryList || !smartlinkHistoryEmpty) {
          return;
        }
        smartlinkHistoryList.innerHTML = '';
        if (!smartlinks.length) {
          smartlinkHistoryEmpty.hidden = false;
          return;
        }
        smartlinkHistoryEmpty.hidden = true;
        smartlinks.slice(0, 6).forEach((link) => {
          const item = document.createElement('li');
          item.className = 'smartlinks-history__item';
          const meta = document.createElement('div');
          meta.className = 'smartlinks-history__meta';
          const name = document.createElement('span');
          name.className = 'smartlinks-history__name';
          name.textContent = link.displayName || link.slug;
          const date = document.createElement('span');
          date.className = 'smartlinks-history__date';
          const createdLabel = smartlinkTranslate('history.created', 'Created :date');
          date.textContent = createdLabel.replace(':date', formatSmartlinkDate(link.createdAt));
          meta.appendChild(name);
          meta.appendChild(date);
          const actions = document.createElement('div');
          actions.className = 'smartlinks-history__actions';
          const analyticsButton = document.createElement('button');
          analyticsButton.type = 'button';
          analyticsButton.dataset.smartlinkId = link.id;
          analyticsButton.dataset.smartlinkHistoryAnalytics = 'true';
          analyticsButton.textContent = smartlinkTranslate('history.analytics', 'View analytics');
          actions.appendChild(analyticsButton);
          const deleteButton = document.createElement('button');
          deleteButton.type = 'button';
          deleteButton.dataset.smartlinkId = link.id;
          deleteButton.dataset.smartlinkHistoryDelete = 'true';
          deleteButton.textContent = smartlinkTranslate('history.delete', 'Delete');
          actions.appendChild(deleteButton);
          item.appendChild(meta);
          item.appendChild(actions);
          smartlinkHistoryList.appendChild(item);
        });
      }

      function deleteSmartlink(id) {
        if (!id) {
          return false;
        }
        const index = smartlinks.findIndex((link) => link.id === id);
        if (index === -1) {
          return false;
        }
        const wasActive = smartlinks[index].id === activeSmartlinkId;
        smartlinks.splice(index, 1);
        saveSmartlinkStorage(smartlinks);
        if (!smartlinks.length) {
          activeSmartlinkId = null;
        } else if (wasActive) {
          ensureActiveSmartlink();
        }
        renderSmartlinkHistory();
        renderSmartlinkAnalyticsList();
        if (!smartlinks.length) {
          renderSmartlinkPreview(null);
          renderSmartlinkAnalyticsDetails(null);
          setSmartlinksView('create');
        } else {
          if (!activeSmartlinkId || !smartlinks.some((link) => link.id === activeSmartlinkId)) {
            ensureActiveSmartlink();
          }
          setActiveSmartlink(activeSmartlinkId);
          renderSmartlinkPreview(smartlinks[0] || null);
        }
        return true;
      }

      function renderSmartlinkAnalyticsList() {
        if (!smartlinkAnalyticsList || !smartlinkAnalyticsEmptyList) {
          return;
        }
        smartlinkAnalyticsList.innerHTML = '';
        if (!smartlinks.length) {
          smartlinkAnalyticsEmptyList.hidden = false;
          return;
        }
        smartlinkAnalyticsEmptyList.hidden = true;
        smartlinks.forEach((link) => {
          const item = document.createElement('li');
          item.className = 'smartlinks-analytics__item';
          item.dataset.smartlinkAnalyticsItem = 'true';
          item.dataset.smartlinkId = link.id;
          if (link.id === activeSmartlinkId) {
            item.classList.add('is-active');
          }
          const cover = document.createElement('span');
          cover.className = 'smartlinks-analytics__item-cover';
          cover.setAttribute('aria-hidden', 'true');
          applySmartlinkArtwork(cover, link.artwork || '', getSmartlinkInitials(link));
          const main = document.createElement('div');
          main.className = 'smartlinks-analytics__item-main';
          const name = document.createElement('strong');
          name.textContent = link.displayName || link.slug;
          main.appendChild(name);
          if (link.subtitle) {
            const subtitle = document.createElement('span');
            subtitle.textContent = link.subtitle;
            main.appendChild(subtitle);
          }
          const date = document.createElement('span');
          date.className = 'smartlinks-analytics__item-date';
          date.textContent = formatSmartlinkDate(link.createdAt);
          item.appendChild(cover);
          item.appendChild(main);
          item.appendChild(date);
          smartlinkAnalyticsList.appendChild(item);
        });
      }

      function renderSmartlinkTimeline(timeline) {
        if (!smartlinkTimelineSvg) {
          return;
        }
        smartlinkTimelineSvg.innerHTML = '';
        if (!Array.isArray(timeline) || timeline.length === 0) {
          return;
        }

        const normalizedTimeline = timeline.map((entry) => {
          if (entry && typeof entry === 'object') {
            const rawValue = Number(entry.value ?? entry.clicks ?? 0);
            const numericValue = Number.isFinite(rawValue) ? rawValue : 0;
            const date = typeof entry.date === 'string' && entry.date
              ? entry.date
              : typeof entry.day === 'string' && entry.day
                ? entry.day
                : typeof entry.timestamp === 'string' && entry.timestamp
                  ? entry.timestamp
                  : '';
            const label = typeof entry.label === 'string' ? entry.label : '';
            const rawLabel = date || label;
            return {
              value: numericValue,
              date,
              label,
              raw: rawLabel,
            };
          }
          const rawValue = Number(entry || 0);
          const numericValue = Number.isFinite(rawValue) ? rawValue : 0;
          return {
            value: numericValue,
            date: '',
            label: '',
            raw: '',
          };
        });

        if (!normalizedTimeline.length) {
          return;
        }

        const values = normalizedTimeline.map((entry) => entry.value);
        const actualMaxValue = Math.max(...values);
        const axisMaxValue = Math.max(10, Math.ceil(actualMaxValue / 10) * 10 || 10);

        const width = 120;
        const height = 40;
        const padding = { top: 6, right: 4, bottom: 8, left: 6 };
        const innerWidth = width - padding.left - padding.right;
        const innerHeight = height - padding.top - padding.bottom;
        const baselineY = height - padding.bottom;

        const points = normalizedTimeline.map((entry, index) => {
          const x = normalizedTimeline.length === 1
            ? width / 2
            : padding.left + (index / (normalizedTimeline.length - 1)) * innerWidth;
          const y = baselineY - (innerHeight * (entry.value / axisMaxValue));
          return { x, y, value: entry.value, entry };
        });

        if (!points.length) {
          return;
        }

        const svgNS = 'http://www.w3.org/2000/svg';
        const uniqueId = `smartlinksTimeline${Date.now().toString(36)}`;
        const gradientId = `${uniqueId}Fill`;
        const strokeGradientId = `${uniqueId}Stroke`;
        const glowId = `${uniqueId}Glow`;

        function createSmoothPath(pathPoints) {
          if (!pathPoints.length) {
            return '';
          }
          if (pathPoints.length === 1) {
            const { x, y } = pathPoints[0];
            return `M ${x.toFixed(2)} ${y.toFixed(2)}`;
          }
          const segments = [`M ${pathPoints[0].x.toFixed(2)} ${pathPoints[0].y.toFixed(2)}`];
          for (let index = 0; index < pathPoints.length - 1; index += 1) {
            const current = pathPoints[index];
            const next = pathPoints[index + 1];
            const previous = pathPoints[index - 1] || current;
            const nextNext = pathPoints[index + 2] || next;
            const control1X = current.x + (next.x - previous.x) / 6;
            const control1Y = current.y + (next.y - previous.y) / 6;
            const control2X = next.x - (nextNext.x - current.x) / 6;
            const control2Y = next.y - (nextNext.y - current.y) / 6;
            segments.push(
              `C ${control1X.toFixed(2)} ${control1Y.toFixed(2)} ${control2X.toFixed(2)} ${control2Y.toFixed(2)} ${next.x.toFixed(2)} ${next.y.toFixed(2)}`,
            );
          }
          return segments.join(' ');
        }

        function formatTimelineLabel(entry, fallback) {
          if (!entry) {
            return fallback;
          }
          if (entry.date) {
            const parsed = new Date(entry.date);
            if (!Number.isNaN(parsed.getTime())) {
              return smartlinkTimelineDateFormatter.format(parsed);
            }
          }
          if (entry.label) {
            return entry.label;
          }
          if (entry.raw) {
            return entry.raw;
          }
          return fallback;
        }

        const defs = document.createElementNS(svgNS, 'defs');

        const fillGradient = document.createElementNS(svgNS, 'linearGradient');
        fillGradient.setAttribute('id', gradientId);
        fillGradient.setAttribute('x1', '0%');
        fillGradient.setAttribute('y1', '0%');
        fillGradient.setAttribute('x2', '0%');
        fillGradient.setAttribute('y2', '100%');
        const stopTop = document.createElementNS(svgNS, 'stop');
        stopTop.setAttribute('offset', '0%');
        stopTop.setAttribute('stop-color', 'rgba(99, 102, 241, 0.45)');
        const stopMid = document.createElementNS(svgNS, 'stop');
        stopMid.setAttribute('offset', '55%');
        stopMid.setAttribute('stop-color', 'rgba(56, 189, 248, 0.22)');
        const stopBottom = document.createElementNS(svgNS, 'stop');
        stopBottom.setAttribute('offset', '100%');
        stopBottom.setAttribute('stop-color', 'rgba(59, 130, 246, 0)');
        fillGradient.appendChild(stopTop);
        fillGradient.appendChild(stopMid);
        fillGradient.appendChild(stopBottom);
        defs.appendChild(fillGradient);

        const strokeGradient = document.createElementNS(svgNS, 'linearGradient');
        strokeGradient.setAttribute('id', strokeGradientId);
        strokeGradient.setAttribute('x1', '0%');
        strokeGradient.setAttribute('y1', '0%');
        strokeGradient.setAttribute('x2', '100%');
        strokeGradient.setAttribute('y2', '0%');
        const strokeStart = document.createElementNS(svgNS, 'stop');
        strokeStart.setAttribute('offset', '0%');
        strokeStart.setAttribute('stop-color', 'rgba(56, 189, 248, 0.95)');
        const strokeEnd = document.createElementNS(svgNS, 'stop');
        strokeEnd.setAttribute('offset', '100%');
        strokeEnd.setAttribute('stop-color', 'rgba(236, 72, 153, 0.95)');
        strokeGradient.appendChild(strokeStart);
        strokeGradient.appendChild(strokeEnd);
        defs.appendChild(strokeGradient);

        const glowFilter = document.createElementNS(svgNS, 'filter');
        glowFilter.setAttribute('id', glowId);
        glowFilter.setAttribute('x', '-50%');
        glowFilter.setAttribute('y', '-50%');
        glowFilter.setAttribute('width', '200%');
        glowFilter.setAttribute('height', '200%');
        const blur = document.createElementNS(svgNS, 'feGaussianBlur');
        blur.setAttribute('in', 'SourceGraphic');
        blur.setAttribute('stdDeviation', '1.6');
        blur.setAttribute('result', 'glowBlur');
        const merge = document.createElementNS(svgNS, 'feMerge');
        const mergeNodeGlow = document.createElementNS(svgNS, 'feMergeNode');
        mergeNodeGlow.setAttribute('in', 'glowBlur');
        const mergeNodeGraphic = document.createElementNS(svgNS, 'feMergeNode');
        mergeNodeGraphic.setAttribute('in', 'SourceGraphic');
        merge.appendChild(mergeNodeGlow);
        merge.appendChild(mergeNodeGraphic);
        glowFilter.appendChild(blur);
        glowFilter.appendChild(merge);
        defs.appendChild(glowFilter);

        smartlinkTimelineSvg.appendChild(defs);

        const gridGroup = document.createElementNS(svgNS, 'g');
        gridGroup.setAttribute('stroke', 'rgba(148, 163, 184, 0.18)');
        gridGroup.setAttribute('stroke-width', '0.35');
        gridGroup.setAttribute('fill', 'none');

        const yLabelsGroup = document.createElementNS(svgNS, 'g');
        yLabelsGroup.setAttribute('fill', 'rgba(148, 163, 184, 0.78)');
        yLabelsGroup.setAttribute('font-size', '3.2');

        const baselineLine = document.createElementNS(svgNS, 'line');
        baselineLine.setAttribute('x1', padding.left.toFixed(2));
        baselineLine.setAttribute('y1', baselineY.toFixed(2));
        baselineLine.setAttribute('x2', (width - padding.right).toFixed(2));
        baselineLine.setAttribute('y2', baselineY.toFixed(2));
        baselineLine.setAttribute('stroke', 'rgba(148, 163, 184, 0.26)');
        baselineLine.setAttribute('stroke-dasharray', '0');
        gridGroup.appendChild(baselineLine);

        const baselineLabel = document.createElementNS(svgNS, 'text');
        baselineLabel.textContent = '0';
        baselineLabel.setAttribute('x', (padding.left + 1.5).toFixed(2));
        baselineLabel.setAttribute('y', (baselineY - 1).toFixed(2));
        baselineLabel.setAttribute('text-anchor', 'start');
        baselineLabel.setAttribute('dominant-baseline', 'middle');
        yLabelsGroup.appendChild(baselineLabel);

        for (let value = 10; value <= axisMaxValue; value += 10) {
          const ratio = value / axisMaxValue;
          const y = baselineY - innerHeight * ratio;
          const line = document.createElementNS(svgNS, 'line');
          line.setAttribute('x1', padding.left.toFixed(2));
          line.setAttribute('y1', y.toFixed(2));
          line.setAttribute('x2', (width - padding.right).toFixed(2));
          line.setAttribute('y2', y.toFixed(2));
          line.setAttribute('stroke-dasharray', '2 4');
          gridGroup.appendChild(line);

          const label = document.createElementNS(svgNS, 'text');
          label.textContent = value.toLocaleString(docLang);
          label.setAttribute('x', (padding.left + 1.5).toFixed(2));
          label.setAttribute('y', (y - 1).toFixed(2));
          label.setAttribute('text-anchor', 'start');
          label.setAttribute('dominant-baseline', 'middle');
          yLabelsGroup.appendChild(label);
        }

        smartlinkTimelineSvg.appendChild(gridGroup);
        smartlinkTimelineSvg.appendChild(yLabelsGroup);

        if (normalizedTimeline.length > 1) {
          const xTickCount = Math.min(5, Math.max(1, normalizedTimeline.length - 1));
          const xLabelsGroup = document.createElementNS(svgNS, 'g');
          xLabelsGroup.setAttribute('fill', 'rgba(148, 163, 184, 0.78)');
          xLabelsGroup.setAttribute('font-size', '3.2');
          for (let tick = 0; tick <= xTickCount; tick += 1) {
            const ratio = xTickCount === 0 ? 0 : tick / xTickCount;
            const x = padding.left + innerWidth * ratio;
            const line = document.createElementNS(svgNS, 'line');
            line.setAttribute('x1', x.toFixed(2));
            line.setAttribute('y1', padding.top.toFixed(2));
            line.setAttribute('x2', x.toFixed(2));
            line.setAttribute('y2', baselineY.toFixed(2));
            line.setAttribute('stroke-dasharray', '2 4');
            gridGroup.appendChild(line);

            const entryIndex = Math.min(
              normalizedTimeline.length - 1,
              Math.round(ratio * (normalizedTimeline.length - 1)),
            );
            const entry = normalizedTimeline[entryIndex];
            const label = document.createElementNS(svgNS, 'text');
            label.textContent = formatTimelineLabel(entry, (entryIndex + 1).toString());
            label.setAttribute('x', x.toFixed(2));
            label.setAttribute('y', (baselineY + 4.2).toFixed(2));
            label.setAttribute('text-anchor', 'middle');
            label.setAttribute('dominant-baseline', 'hanging');
            xLabelsGroup.appendChild(label);
          }
          smartlinkTimelineSvg.appendChild(xLabelsGroup);
        }

        const linePathD = createSmoothPath(points);
        if (!linePathD) {
          return;
        }

        const areaPath = document.createElementNS(svgNS, 'path');
        areaPath.setAttribute('d', `${linePathD} L ${points[points.length - 1].x.toFixed(2)} ${baselineY.toFixed(2)} L ${points[0].x.toFixed(2)} ${baselineY.toFixed(2)} Z`);
        areaPath.setAttribute('fill', `url(#${gradientId})`);
        areaPath.setAttribute('stroke', 'none');
        smartlinkTimelineSvg.appendChild(areaPath);

        const linePath = document.createElementNS(svgNS, 'path');
        linePath.setAttribute('d', linePathD);
        linePath.setAttribute('fill', 'none');
        linePath.setAttribute('stroke', `url(#${strokeGradientId})`);
        linePath.setAttribute('stroke-width', '0.9');
        linePath.setAttribute('stroke-linecap', 'round');
        linePath.setAttribute('stroke-linejoin', 'round');
        linePath.setAttribute('filter', `url(#${glowId})`);
        smartlinkTimelineSvg.appendChild(linePath);

        const lastPoint = points[points.length - 1];
        const lastEntry = normalizedTimeline[normalizedTimeline.length - 1];
        if (lastPoint && lastEntry) {
          const halo = document.createElementNS(svgNS, 'circle');
          halo.setAttribute('cx', lastPoint.x.toFixed(2));
          halo.setAttribute('cy', lastPoint.y.toFixed(2));
          halo.setAttribute('r', '3.6');
          halo.setAttribute('fill', 'rgba(236, 72, 153, 0.18)');
          halo.setAttribute('stroke', 'none');
          halo.setAttribute('filter', `url(#${glowId})`);
          smartlinkTimelineSvg.appendChild(halo);

          const circle = document.createElementNS(svgNS, 'circle');
          circle.setAttribute('cx', lastPoint.x.toFixed(2));
          circle.setAttribute('cy', lastPoint.y.toFixed(2));
          circle.setAttribute('r', '2');
          circle.setAttribute('fill', 'rgba(236, 72, 153, 0.95)');
          circle.setAttribute('stroke', 'rgba(248, 250, 252, 0.78)');
          circle.setAttribute('stroke-width', '0.7');
          circle.setAttribute('filter', `url(#${glowId})`);
          const tooltip = document.createElementNS(svgNS, 'title');
          const valueLabel = lastEntry.value.toLocaleString(docLang);
          const dateLabel = formatTimelineLabel(lastEntry, '');
          tooltip.textContent = dateLabel ? `${valueLabel} • ${dateLabel}` : valueLabel;
          circle.appendChild(tooltip);
          smartlinkTimelineSvg.appendChild(circle);
        }
      }

      function renderSmartlinkMap(countries) {
        if (!smartlinkMapPulses) {
          return;
        }
        smartlinkMapPulses.innerHTML = '';
        if (!Array.isArray(countries)) {
          return;
        }
        countries.slice(0, 6).forEach((country, index) => {
          const coords = country?.coords || { x: 50, y: 50 };
          const x = Number(coords.x);
          const y = Number(coords.y);
          if (Number.isNaN(x) || Number.isNaN(y)) {
            return;
          }
          const pulse = document.createElement('span');
          pulse.className = 'smartlinks-map__pulse';
          pulse.style.left = `${x}%`;
          pulse.style.top = `${y}%`;
          pulse.style.animationDelay = `${index * 0.4}s`;
          const label = country?.name || country?.code || '';
          const percentage = Number(country?.percentage || 0);
          pulse.title = label ? `${label} • ${Math.round(percentage)}%` : '';
          smartlinkMapPulses.appendChild(pulse);
        });
      }

      function renderSmartlinkPlatformBreakdown(items) {
        if (!smartlinkPlatformBreakdown) {
          return;
        }
        smartlinkPlatformBreakdown.innerHTML = '';
        items.forEach((item) => {
          const li = document.createElement('li');
          const label = document.createElement('strong');
          label.textContent = item.label;
          const bar = document.createElement('div');
          bar.className = 'bar';
          const fill = document.createElement('span');
          fill.style.width = `${Math.min(100, item.percentage)}%`;
          fill.style.background = item.color ? `${item.color}` : 'rgba(99, 102, 241, 0.6)';
          bar.appendChild(fill);
          const value = document.createElement('span');
          value.textContent = `${item.percentage.toFixed(1)}%`;
          li.appendChild(label);
          li.appendChild(bar);
          li.appendChild(value);
          smartlinkPlatformBreakdown.appendChild(li);
        });
      }

      function renderSmartlinkCities(items) {
        if (!smartlinkCitiesList) {
          return;
        }
        smartlinkCitiesList.innerHTML = '';
        if (!Array.isArray(items)) {
          return;
        }
        items.forEach((item) => {
          const li = document.createElement('li');
          const label = document.createElement('strong');
          label.textContent = item.city || '';
          const value = document.createElement('span');
          const countryLabel = item.country || item.country_code || '';
          const percentage = Number(item.percentage || 0);
          value.textContent = countryLabel ? `${countryLabel} • ${Math.round(percentage)}%` : `${Math.round(percentage)}%`;
          li.appendChild(label);
          li.appendChild(value);
          smartlinkCitiesList.appendChild(li);
        });
      }

      function renderSmartlinkHighlights(items) {
        if (!smartlinkHighlightsList) {
          return;
        }
        smartlinkHighlightsList.innerHTML = '';
        if (!Array.isArray(items)) {
          return;
        }
        items.forEach((item) => {
          const li = document.createElement('li');
          const label = document.createElement('strong');
          label.textContent = item.label;
          const value = document.createElement('span');
          value.textContent = item.value;
          li.appendChild(label);
          li.appendChild(value);
          smartlinkHighlightsList.appendChild(li);
        });
      }

      function renderSmartlinkAnalyticsDetails(link) {
        if (!smartlinkAnalyticsDetails || !smartlinkAnalyticsEmpty) {
          return;
        }
        if (!link) {
          smartlinkAnalyticsDetails.hidden = true;
          smartlinkAnalyticsEmpty.hidden = false;
          if (smartlinkAnalyticsArtwork) {
            smartlinkAnalyticsArtwork.textContent = '';
            smartlinkAnalyticsArtwork.style.backgroundImage = '';
            smartlinkAnalyticsArtwork.removeAttribute('data-has-cover');
          }
          return;
        }
        smartlinkAnalyticsEmpty.hidden = true;
        smartlinkAnalyticsDetails.hidden = false;
        if (smartlinkAnalyticsTitle) {
          smartlinkAnalyticsTitle.textContent = link.displayName || link.slug;
        }
        if (smartlinkAnalyticsArtwork) {
          applySmartlinkArtwork(smartlinkAnalyticsArtwork, link.artwork || '', getSmartlinkInitials(link));
        }
        const stats = link.stats && typeof link.stats === 'object' ? link.stats : createEmptyStats();
        if (smartlinkAnalyticsUpdated) {
          const updated = stats.updatedAt || link.updatedAt || link.createdAt || '';
          smartlinkAnalyticsUpdated.textContent = updated ? formatSmartlinkDate(updated) : '';
        }
        if (smartlinkSummaryValues.clicks) {
          smartlinkSummaryValues.clicks.textContent = stats.totalClicks.toLocaleString(docLang);
        }
        if (smartlinkSummaryValues.ctr) {
          smartlinkSummaryValues.ctr.textContent = `${stats.ctr.toFixed(1)}%`;
        }
        if (smartlinkSummaryValues.conversions) {
          smartlinkSummaryValues.conversions.textContent = stats.conversions.toLocaleString(docLang);
        }
        if (smartlinkSummaryValues.saves) {
          smartlinkSummaryValues.saves.textContent = stats.saves.toLocaleString(docLang);
        }
        renderSmartlinkTimeline(stats.timeline);
        renderSmartlinkMap(stats.countries);
        renderSmartlinkPlatformBreakdown(stats.platformBreakdown);
        renderSmartlinkCities(stats.cities);
        renderSmartlinkHighlights(stats.highlights);
      }

      function ensureActiveSmartlink() {
        if (!smartlinks.length) {
          activeSmartlinkId = null;
          return;
        }
        if (!activeSmartlinkId || !smartlinks.some((link) => link.id === activeSmartlinkId)) {
          activeSmartlinkId = smartlinks[0].id;
        }
      }

      function prepareSmartlinksPage() {
        setSmartlinksView('create');
        resetSmartlinkFormState();
      }

      function setSmartlinksView(view) {
        smartlinksTabs.forEach((tab) => {
          const isActive = tab.dataset.smartlinksTab === view;
          tab.classList.toggle('is-active', isActive);
          tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
        });
        smartlinksViews.forEach((target) => {
          const match = target.dataset.smartlinksView === view;
          target.classList.toggle('is-active', match);
          if (match) {
            target.removeAttribute('hidden');
          } else {
            target.setAttribute('hidden', 'true');
          }
        });
        if (view === 'analytics' && activeSmartlinkId) {
          refreshSmartlinkAnalyticsById(activeSmartlinkId, { persist: true });
        }
      }

      function setActiveSmartlink(id) {
        activeSmartlinkId = id || null;
        smartlinkAnalyticsList?.querySelectorAll('[data-smartlink-analytics-item]').forEach((item) => {
          const isActive = item.dataset.smartlinkId === activeSmartlinkId;
          item.classList.toggle('is-active', isActive);
        });
        const activeLink = smartlinks.find((link) => link.id === activeSmartlinkId) || null;
        renderSmartlinkAnalyticsDetails(activeLink);
      }

      function resetSmartlinkFormState() {
        setSmartlinkFeedback('');
        setSmartlinkLoading(false);
        if (smartlinkCopyFeedback) {
          smartlinkCopyFeedback.textContent = '';
        }
      }

      function initializeSmartlinks() {
        smartlinks = loadSmartlinkStorage()
          .map((item) => normalizeStoredSmartlink(item))
          .filter((item) => item !== null);
        ensureActiveSmartlink();
        renderSmartlinkHistory();
        renderSmartlinkAnalyticsList();
        renderSmartlinkAnalyticsDetails(smartlinks.find((link) => link.id === activeSmartlinkId) || null);
        renderSmartlinkPreview(smartlinks[0] || null);
        if (smartlinks.length) {
          refreshAllSmartlinkAnalytics();
        }
      }

      function getSelectedPlatformIds() {
        return smartlinkPlatformInputs
          .filter((input) => input.checked)
          .map((input) => input.value);
      }

      async function handleSmartlinkSubmit(event) {
        event.preventDefault();
        if (!smartlinkUpcInput) {
          return;
        }
        const upc = smartlinkUpcInput.value.trim();
        if (!upc) {
          setSmartlinkFeedback(smartlinkTranslate('errors.upc_required', 'Enter your UPC to generate a smartlink.'), 'error');
          smartlinkUpcInput.focus();
          return;
        }
        const platformIds = getSelectedPlatformIds();
        if (platformIds.length === 0) {
          setSmartlinkFeedback(smartlinkTranslate('form.platforms_hint', 'Select at least one DSP to display.'), 'error');
          return;
        }
        const slugInput = smartlinkSlugInput ? smartlinkSlugInput.value.trim() : '';
        setSmartlinkLoading(true);
        setSmartlinkFeedback('');
        try {
          const data = await generateSmartlinkData(upc, slugInput, platformIds);
          smartlinks.unshift(data);
          saveSmartlinkStorage(smartlinks);
          if (smartlinkSlugInput) {
            smartlinkSlugInput.value = data.slug;
          }
          ensureActiveSmartlink();
          setActiveSmartlink(data.id);
          renderSmartlinkPreview(data);
          renderSmartlinkHistory();
          renderSmartlinkAnalyticsList();
          setSmartlinkFeedback(smartlinkTranslate('success.title', 'Smartlink ready'), 'success');
        } catch (error) {
          console.error('Unable to generate smartlink', error);
          const message = error instanceof Error && error.message ? error.message : 'Unable to generate smartlink.';
          setSmartlinkFeedback(message, 'error');
        } finally {
          setSmartlinkLoading(false);
        }
      }

      async function handleSmartlinkCopy() {
        if (!smartlinkPreviewLink) {
          return;
        }
        const value = smartlinkPreviewLink.value;
        if (!value) {
          return;
        }
        const successText = smartlinkTranslate('preview.copied', 'Copied!');
        try {
          if (navigator.clipboard && typeof navigator.clipboard.writeText === 'function') {
            await navigator.clipboard.writeText(value);
          } else {
            const textarea = document.createElement('textarea');
            textarea.value = value;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
          }
          if (smartlinkCopyFeedback) {
            smartlinkCopyFeedback.textContent = successText;
          }
        } catch (error) {
          console.warn('Clipboard copy failed', error);
        }
      }
      initializeSmartlinks();
      let checkoutInProgress = false;
      let redirectingToCheckout = false;
      const MASTERING_ALLOWED_TYPES = ['audio/wav', 'audio/x-wav', 'audio/mpeg', 'audio/aiff', 'audio/x-aiff', 'audio/wave'];
      const MASTERING_ALLOWED_EXTENSIONS = ['.wav', '.wave', '.mp3', '.aiff', '.aif'];
      const MASTERING_MAX_SIZE = 250 * 1024 * 1024;
      const MASTERING_DEFAULT_PRESET = 'radio';
      const MASTERING_CUSTOM_PRESET = 'custom';
      const AudioContextClass = window.AudioContext || window.webkitAudioContext || null;
      const OfflineAudioContextClass = window.OfflineAudioContext || window.webkitOfflineAudioContext || null;
      const MASTERING_PRESETS = {
        original: { preGain: 1, threshold: -26, knee: 28, ratio: 1.3, attack: 0.006, release: 0.32, low: 0, mid: 0, high: 0, output: 1, q: 1, width: 100 },
        radio: { preGain: 1.15, threshold: -18, knee: 18, ratio: 3.6, attack: 0.003, release: 0.28, low: 2.6, mid: 1.4, high: 2.2, output: 1.35, q: 0.9, width: 130 },
        hiphop: { preGain: 1.12, threshold: -20, knee: 24, ratio: 3.1, attack: 0.005, release: 0.34, low: 3.5, mid: 1, high: 1.4, output: 1.28, q: 0.9, width: 115 },
        electro: { preGain: 1.08, threshold: -21, knee: 22, ratio: 2.8, attack: 0.004, release: 0.3, low: 1.4, mid: 1.8, high: 2.6, output: 1.26, q: 0.8, width: 140 },
        edm: { preGain: 1.22, threshold: -17, knee: 18, ratio: 4.5, attack: 0.0028, release: 0.26, low: 3.2, mid: 1.8, high: 2.4, output: 1.4, q: 0.85, width: 150 },
        dance: { preGain: 1.16, threshold: -19, knee: 20, ratio: 3.4, attack: 0.0035, release: 0.3, low: 2.8, mid: 1.5, high: 1.9, output: 1.32, q: 0.88, width: 135 },
        festival: { preGain: 1.24, threshold: -16, knee: 18, ratio: 4.8, attack: 0.0025, release: 0.32, low: 3.6, mid: 1.6, high: 2.7, output: 1.45, q: 0.82, width: 160 },
        warm: { preGain: 1.05, threshold: -21, knee: 22, ratio: 2.6, attack: 0.006, release: 0.42, low: 2, mid: 0.6, high: 0.5, output: 1.24, q: 1.1, width: 105 },
        spatial: { preGain: 1.08, threshold: -20, knee: 24, ratio: 2.9, attack: 0.0045, release: 0.35, low: 1.4, mid: 1, high: 2.4, output: 1.28, q: 0.75, width: 155 },
        custom: { preGain: 1.15, threshold: -18, knee: 18, ratio: 3.6, attack: 0.003, release: 0.28, low: 2.6, mid: 1.4, high: 2.2, output: 1.35, q: 0.9, width: 130 }
      };
      const MASTERING_SPECTRUM_BAR_COUNT = 28;
      const masteringSpectrumBars = [];
      let masteringState = 'idle';
      let masteringCurrentPreset = MASTERING_DEFAULT_PRESET;
      let masteringAudioContext = null;
      let masteringSourceNode = null;
      let masteringNodes = null;
      let masteringFileUrl = null;
      let masteringLoadId = 0;
      let masteringCheckoutInProgress = false;
      let masteringRedirecting = false;
      let masteringStage = 'upload';
      let masteringWaveformData = null;
      let masteringWaveformFrame = null;
      let masteringWaveformRedrawFrame = null;
      let masteringWaveformResizeObserver = null;
      let masteringVisualizerFrame = null;
      let masteringOscilloscopeData = null;
      let masteringSpectrumData = null;
      let masteringStereoLeftData = null;
      let masteringStereoRightData = null;
      let masteringWaveformDragActive = false;
      let masteringWaveformPointerId = null;
      let masteringBypass = false;
      let masteringMonoActive = false;
      let masteringLastWidth = MASTERING_PRESETS[MASTERING_DEFAULT_PRESET]?.width || 100;
      let masteringCurrentFile = null;
      let masteringDownloadInProgress = false;
      const masteringControlMap = {};
      const masteringControlValueMap = {};

      masteringControlInputs.forEach((input) => {
        const control = input.dataset.masteringControl;
        if (!control) {
          return;
        }
        masteringControlMap[control] = input;
      });

      masteringControlValueElements.forEach((element) => {
        const control = element.dataset.masteringControlValue;
        if (!control) {
          return;
        }
        masteringControlValueMap[control] = element;
      });

      if (masteringSpectrumContainer) {
        masteringSpectrumContainer.innerHTML = '';
        const barCount = Math.max(12, Number.isFinite(MASTERING_SPECTRUM_BAR_COUNT) ? MASTERING_SPECTRUM_BAR_COUNT : 24);
        for (let index = 0; index < barCount; index += 1) {
          const bar = document.createElement('span');
          bar.className = 'mastering-visualizer__bar';
          bar.style.setProperty('--bar-scale', '0.2');
          bar.style.setProperty('--bar-opacity', '0.35');
          masteringSpectrumContainer.appendChild(bar);
          masteringSpectrumBars.push(bar);
        }
      }

      clearMasteringVisualizer();

      masteringVisualizerToggles.forEach((toggle) => {
        toggle.addEventListener('click', () => {
          const target = toggle.dataset.masteringVisualizerToggle || '';
          const card = masteringVisualizerCards.find((element) => element.dataset.masteringVisualizerCard === target);
          if (!card) {
            return;
          }
          const isActive = card.dataset.visualizerActive !== 'false';
          const activeCount = masteringVisualizerCards.filter((element) => element.dataset.visualizerActive !== 'false').length;
          if (isActive && activeCount <= 1) {
            return;
          }
          card.dataset.visualizerActive = isActive ? 'false' : 'true';
          if (!isActive) {
            window.requestAnimationFrame(() => {
              clearMasteringVisualizer();
            });
          }
          updateMasteringVisualizerLayout();
        });
      });

      updateMasteringVisualizerLayout();

      function updateMonetizationInputsState() {
        if (!stripeSettingsForm) {
          return;
        }
        const enabled = monetizationPaymentsToggle ? monetizationPaymentsToggle.checked : false;
        if (monetizationGrid) {
          monetizationGrid.setAttribute('data-monetization-grid', enabled ? 'enabled' : 'disabled');
        }
        monetizationInputs.forEach((input) => {
          if (!(input instanceof HTMLInputElement)) {
            return;
          }
          input.disabled = !enabled;
        });
        if (monetizationStateLabel) {
          const enabledText = monetizationStateLabel.dataset.stateEnabled || '';
          const disabledText = monetizationStateLabel.dataset.stateDisabled || '';
          monetizationStateLabel.textContent = enabled ? enabledText : disabledText;
        }
      }

      function updateCloudUsageState() {
        if (!stripeSettingsForm) {
          return;
        }
        const enabled = cloudUsageToggle ? cloudUsageToggle.checked : false;
        cloudUsageInputs.forEach((input) => {
          if (!(input instanceof HTMLInputElement)) {
            return;
          }
          input.disabled = !enabled;
        });
        if (cloudUsageGrid) {
          cloudUsageGrid.setAttribute('data-cloud-grid', enabled ? 'enabled' : 'disabled');
        }
        if (cloudUsageState) {
          const enabledLabel = cloudUsageState.dataset.stateEnabled || '';
          const disabledLabel = cloudUsageState.dataset.stateDisabled || '';
          cloudUsageState.textContent = enabled ? enabledLabel : disabledLabel;
        }
      }

      function updateCloudSubscriptionState() {
        if (!stripeSettingsForm) {
          return;
        }
        const enabled = cloudSubscriptionToggle ? cloudSubscriptionToggle.checked : false;
        cloudSubscriptionInputs.forEach((input) => {
          if (!(input instanceof HTMLInputElement)) {
            return;
          }
          input.disabled = !enabled;
        });
        if (cloudSubscriptionGrid) {
          cloudSubscriptionGrid.setAttribute('data-cloud-grid', enabled ? 'enabled' : 'disabled');
        }
        if (cloudSubscriptionState) {
          const enabledLabel = cloudSubscriptionState.dataset.stateEnabled || '';
          const disabledLabel = cloudSubscriptionState.dataset.stateDisabled || '';
          cloudSubscriptionState.textContent = enabled ? enabledLabel : disabledLabel;
        }
      }

      function getCloudModalPreference() {
        try {
          if (typeof window === 'undefined' || !('localStorage' in window)) {
            return false;
          }
          return window.localStorage.getItem(CLOUD_MODAL_STORAGE_KEY) === '1';
        } catch (error) {
          return false;
        }
      }

      function setCloudModalPreference(hidden) {
        try {
          if (typeof window === 'undefined' || !('localStorage' in window)) {
            return;
          }
          if (hidden) {
            window.localStorage.setItem(CLOUD_MODAL_STORAGE_KEY, '1');
          } else {
            window.localStorage.removeItem(CLOUD_MODAL_STORAGE_KEY);
          }
        } catch (error) {
          // Ignore storage errors
        }
      }

      function syncCloudModalCheckbox() {
        if (!cloudModalOptOut) {
          return;
        }
        cloudModalOptOut.checked = getCloudModalPreference();
      }

      function getCloudServiceUrl(trigger) {
        if (trigger && trigger.dataset && trigger.dataset.serviceUrl) {
          return trigger.dataset.serviceUrl;
        }
        if (cloudModalCta) {
          return cloudModalCta.getAttribute('href') || '';
        }
        return '';
      }

      function getMusicDistributionPreference() {
        try {
          return window.localStorage.getItem(MUSIC_DISTRIBUTION_MODAL_STORAGE_KEY) === '1';
        } catch (error) {
          return false;
        }
      }

      function setMusicDistributionPreference(hidden) {
        try {
          if (hidden) {
            window.localStorage.setItem(MUSIC_DISTRIBUTION_MODAL_STORAGE_KEY, '1');
          } else {
            window.localStorage.removeItem(MUSIC_DISTRIBUTION_MODAL_STORAGE_KEY);
          }
        } catch (error) {
          // Ignore storage errors
        }
      }

      function syncMusicDistributionCheckbox() {
        if (!musicDistributionOptOut) {
          return;
        }
        musicDistributionOptOut.checked = getMusicDistributionPreference();
      }

      function getMusicDistributionDefaultUrl() {
        if (musicDistributionLaunchButton && musicDistributionLaunchButton.dataset && musicDistributionLaunchButton.dataset.defaultUrl) {
          return musicDistributionLaunchButton.dataset.defaultUrl;
        }
        if (musicDistributionModalContent && musicDistributionModalContent.dataset && musicDistributionModalContent.dataset.defaultServiceUrl) {
          return musicDistributionModalContent.dataset.defaultServiceUrl;
        }
        return '';
      }

      function setMusicDistributionFeedback(message = '') {
        if (!musicDistributionFeedback) {
          return;
        }
        musicDistributionFeedback.textContent = message || '';
      }

      function setMusicDistributionButtonState(state) {
        if (!musicDistributionLaunchButton) {
          return;
        }
        const labelElement = musicDistributionLaunchLabel;
        const attributeDefault = musicDistributionLaunchButton.dataset.defaultLabel || '';
        if (!musicDistributionLaunchButton.dataset.cachedDefaultLabel) {
          const initialLabel = labelElement ? labelElement.textContent || attributeDefault : attributeDefault;
          if (initialLabel) {
            musicDistributionLaunchButton.dataset.cachedDefaultLabel = initialLabel;
          }
        }
        const defaultLabel = musicDistributionLaunchButton.dataset.cachedDefaultLabel || attributeDefault;
        const processingLabel = musicDistributionLaunchButton.dataset.processingLabel || '';
        if (state === 'processing') {
          musicDistributionLaunchButton.disabled = true;
          if (labelElement && processingLabel) {
            labelElement.textContent = processingLabel;
          }
        } else {
          musicDistributionLaunchButton.disabled = false;
          if (labelElement && defaultLabel) {
            labelElement.textContent = defaultLabel;
          }
        }
      }

      function updateDistributionFields() {
        if (!distributionProviderSelect) {
          return;
        }

        const provider = distributionProviderSelect.value;

        distributionProviderSections.forEach((section) => {
          if (!section || !section.dataset) {
            return;
          }

          if (section.dataset.providerFields === provider) {
            section.removeAttribute('hidden');
          } else {
            section.setAttribute('hidden', 'hidden');
          }
        });

        if (distributionSonosuiteBaseUrlInput) {
          distributionSonosuiteBaseUrlInput.required = provider === 'sonosuite';
        }

        if (distributionSonosuiteSecretInput) {
          distributionSonosuiteSecretInput.required = provider === 'sonosuite';
        }
      }

      function t(path, replacements = {}) {
        const segments = path.split('.');
        let value = DASHBOARD_I18N;
        for (const segment of segments) {
          if (value && Object.prototype.hasOwnProperty.call(value, segment)) {
            value = value[segment];
          } else {
            value = null;
            break;
          }
        }
        if (typeof value !== 'string') {
          return '';
        }
        let output = value;
        for (const [key, replacement] of Object.entries(replacements)) {
          const pattern = new RegExp(':' + key, 'g');
          output = output.replace(pattern, String(replacement));
        }
        return output;
      }

      function aiComposerT(path, fallback = '') {
        if (!path) {
          return fallback;
        }
        const segments = path.split('.');
        let value = aiComposerI18n;
        for (const segment of segments) {
          if (value && typeof value === 'object' && Object.prototype.hasOwnProperty.call(value, segment)) {
            value = value[segment];
          } else {
            value = null;
            break;
          }
        }
        if (typeof value === 'string') {
          return value;
        }
        return fallback;
      }

      function getPlanData(plan) {
        const royalties = DASHBOARD_I18N.royalties || {};
        const plans = royalties.plans || {};
        if (!plan || typeof plans !== 'object') {
          return null;
        }
        return plans[plan] || null;
      }

      function tm(path, replacements = {}) {
        if (!path) {
          return '';
        }
        return t('mastering.' + path, replacements);
      }

      function showMasteringStage(stage) {
        const validStage = stage === 'analysis' || stage === 'preview' ? stage : 'upload';
        masteringStage = validStage;
        const mapping = [
          ['upload', masteringUploadSection],
          ['analysis', masteringAnalysis],
          ['preview', masteringPreview],
        ];
        mapping.forEach(([name, element]) => {
          if (!element) {
            return;
          }
          const isActive = name === validStage;
          element.hidden = !isActive;
          element.setAttribute('aria-hidden', isActive ? 'false' : 'true');
        });
      }

      function setMasteringStatusMessage(message = '', statusType = '') {
        if (!masteringStatus) {
          return;
        }
        masteringStatus.textContent = message || '';
        masteringStatus.classList.remove('is-error', 'is-success');
        if (statusType === 'error') {
          masteringStatus.classList.add('is-error');
        } else if (statusType === 'success') {
          masteringStatus.classList.add('is-success');
        }
      }

      function setMasteringStatusKey(key, statusType = '') {
        if (!key) {
          setMasteringStatusMessage('', statusType);
          return;
        }
        setMasteringStatusMessage(tm('status.' + key), statusType);
      }

      function setMasteringProcessing(active, stageKey = '') {
        if (!masteringProgress) {
          return;
        }
        masteringProgress.classList.toggle('is-active', Boolean(active));
        masteringProgress.setAttribute('aria-hidden', active ? 'false' : 'true');
        if (active) {
          showMasteringStage('analysis');
        } else if (masteringState === 'ready') {
          showMasteringStage('preview');
        } else {
          showMasteringStage('upload');
        }
        if (masteringProgressLabel) {
          masteringProgressLabel.textContent = active && stageKey ? tm('processing.' + stageKey) : '';
        }
      }

      function toggleMasteringPreview(visible) {
        if (!masteringPreview) {
          return;
        }
        const show = Boolean(visible);
        masteringPreview.hidden = !show;
        masteringPreview.setAttribute('aria-hidden', show ? 'false' : 'true');
        if (show) {
          showMasteringStage('preview');
          updateMasteringPlayerOffset();
          if (masteringWaveformData && masteringWaveformData.length > 0) {
            scheduleMasteringWaveformRedraw();
          }
          startMasteringVisualizer();
          evaluateMasteringPlayerSticky();
        } else if (masteringState === 'uploading' || masteringState === 'analyzing' || masteringState === 'rendering') {
          stopMasteringVisualizer(true);
          showMasteringStage('analysis');
          setMasteringPlayerPinned(false);
        } else {
          stopMasteringVisualizer(true);
          showMasteringStage('upload');
          setMasteringPlayerPinned(false);
        }
      }

      function playMasteringPlayerPinAnimation() {
        if (!masteringPlayer) {
          return;
        }
        masteringPlayer.classList.remove(MASTERING_PLAYER_PIN_ANIMATION_CLASS);
        // Force a reflow so the animation can restart when toggling rapidly
        void masteringPlayer.offsetWidth;
        masteringPlayer.classList.add(MASTERING_PLAYER_PIN_ANIMATION_CLASS);
      }

      function setMasteringPlayerPinned(pinned) {
        if (!masteringPlayer) {
          return;
        }
        const nextPinned = Boolean(pinned);
        if (masteringPlayerPinned === nextPinned) {
          return;
        }
        masteringPlayerPinned = nextPinned;
        masteringPlayer.classList.toggle('is-pinned', nextPinned);
        if (nextPinned) {
          masteringPlayer.style.setProperty('--mastering-sticky-active-offset', '0px');
          masteringPlayer.style.setProperty('--mastering-player-inline-offset', '0px');
          playMasteringPlayerPinAnimation();
        } else {
          masteringPlayer.style.setProperty('--mastering-sticky-active-offset', `${masteringStickyOffset}px`);
          masteringPlayer.classList.remove(MASTERING_PLAYER_PIN_ANIMATION_CLASS);
        }
        if (masteringPreview) {
          masteringPreview.classList.toggle('has-pinned-player', nextPinned);
        }
      }

      function updateMasteringPlayerOffset() {
        if (!masteringModalContent || !masteringPlayer) {
          return 0;
        }
        let offset = 0;
        const modalStyles = window.getComputedStyle(masteringModalContent);
        const paddingTop = parseFloat(modalStyles.paddingTop || '0');
        if (Number.isFinite(paddingTop)) {
          offset = Math.max(offset, paddingTop);
        }

        let startPadding = NaN;
        let endPadding = NaN;
        let inlineOffset = 0;
        let hasInlineOffset = false;
        const containerElement =
          masteringModalInner instanceof HTMLElement ? masteringModalInner : masteringModalContent;
        const containerRect =
          containerElement && typeof containerElement.getBoundingClientRect === 'function'
            ? containerElement.getBoundingClientRect()
            : null;
        const hasPreview =
          masteringPreview &&
          typeof masteringPreview.getBoundingClientRect === 'function' &&
          !masteringPreview.hasAttribute('hidden');
        if (hasPreview && containerRect) {
          const previewRect = masteringPreview.getBoundingClientRect();
          if (previewRect && previewRect.width > 0) {
            startPadding = Math.max(0, previewRect.left - containerRect.left);
            endPadding = Math.max(0, containerRect.right - previewRect.right);
            if (Number.isFinite(containerRect.width) && containerRect.width > 0) {
              const containerCenter = containerRect.left + containerRect.width / 2;
              const previewCenter = previewRect.left + previewRect.width / 2;
              if (Number.isFinite(containerCenter) && Number.isFinite(previewCenter)) {
                inlineOffset = containerCenter - previewCenter;
                hasInlineOffset = true;
              }
            }
          }
        }

        if (!Number.isFinite(startPadding) || !Number.isFinite(endPadding)) {
          const paddingInlineStart = parseFloat(
            modalStyles.paddingInlineStart || modalStyles.paddingLeft || '0'
          );
          const paddingInlineEnd = parseFloat(
            modalStyles.paddingInlineEnd || modalStyles.paddingRight || '0'
          );
          const hasStartPadding = Number.isFinite(paddingInlineStart);
          const hasEndPadding = Number.isFinite(paddingInlineEnd);
          startPadding = Math.max(0, hasStartPadding ? paddingInlineStart : paddingInlineEnd || 0);
          endPadding = Math.max(0, hasEndPadding ? paddingInlineEnd : paddingInlineStart || 0);
        }

        if (Number.isFinite(startPadding) && Number.isFinite(endPadding)) {
          const balancedPadding = Math.max(0, (startPadding + endPadding) / 2);
          startPadding = balancedPadding;
          endPadding = balancedPadding;
          const minimumPadding = Math.max(0, MASTERING_PLAYER_MIN_SIDE_PADDING);
          if (minimumPadding > 0) {
            startPadding = Math.max(startPadding, minimumPadding);
            endPadding = Math.max(endPadding, minimumPadding);
          }
        }

        if (!Number.isFinite(startPadding) || !Number.isFinite(endPadding)) {
          masteringPlayer.style.removeProperty('--mastering-player-padding-start');
          masteringPlayer.style.removeProperty('--mastering-player-padding-end');
          masteringPlayer.style.removeProperty('--mastering-player-margin-start');
          masteringPlayer.style.removeProperty('--mastering-player-margin-end');
        } else {
          masteringPlayer.style.setProperty('--mastering-player-padding-start', `${startPadding}px`);
          masteringPlayer.style.setProperty('--mastering-player-padding-end', `${endPadding}px`);
          masteringPlayer.style.setProperty('--mastering-player-margin-start', `${-startPadding}px`);
          masteringPlayer.style.setProperty('--mastering-player-margin-end', `${-endPadding}px`);
        }
        if (hasInlineOffset && !masteringPlayerPinned) {
          const normalizedInlineOffset = Math.abs(inlineOffset) > 0.5 ? inlineOffset : 0;
          masteringPlayer.style.setProperty('--mastering-player-inline-offset', `${normalizedInlineOffset}px`);
        } else {
          masteringPlayer.style.setProperty('--mastering-player-inline-offset', '0px');
        }
        const closeButton = masteringModalContent.querySelector('.modal__close');
        if (closeButton instanceof HTMLElement) {
          const contentRect = masteringModalContent.getBoundingClientRect();
          const buttonRect = closeButton.getBoundingClientRect();
          const buttonOffset = buttonRect.bottom - contentRect.top;
          if (Number.isFinite(buttonOffset)) {
            offset = Math.max(offset, buttonOffset + 12);
          }
        }
        const resolvedOffset = Math.max(0, offset);
        masteringStickyOffset = resolvedOffset;
        masteringPlayer.style.setProperty('--mastering-sticky-offset', `${resolvedOffset}px`);
        if (!masteringPlayerPinned) {
          masteringPlayer.style.setProperty('--mastering-sticky-active-offset', `${resolvedOffset}px`);
        }
        return resolvedOffset;
      }

      function resolveMasteringPlayerThreshold() {
        if (!masteringPlayer) {
          return 0;
        }
        const inlineValue = parseFloat(masteringPlayer.style.getPropertyValue('--mastering-sticky-offset') || '');
        if (Number.isFinite(inlineValue) && inlineValue > 0) {
          return inlineValue;
        }
        if (Number.isFinite(masteringStickyOffset) && masteringStickyOffset > 0) {
          return masteringStickyOffset;
        }
        if (!masteringPlayerPinned) {
          const computedTop = parseFloat(window.getComputedStyle(masteringPlayer).top || '');
          if (Number.isFinite(computedTop) && computedTop > 0) {
            masteringStickyOffset = computedTop;
            masteringPlayer.style.setProperty('--mastering-sticky-offset', `${computedTop}px`);
            masteringPlayer.style.setProperty('--mastering-sticky-active-offset', `${computedTop}px`);
            return computedTop;
          }
        }
        return 0;
      }

      function getRelativeOffsetTop(element, ancestor) {
        if (!(element instanceof HTMLElement) || !(ancestor instanceof HTMLElement)) {
          return 0;
        }
        let offset = 0;
        let current = element;
        while (current && current instanceof HTMLElement && current !== ancestor) {
          offset += current.offsetTop;
          current = current.offsetParent;
        }
        if (current === ancestor) {
          return offset;
        }
        const elementRect = element.getBoundingClientRect();
        const ancestorRect = ancestor.getBoundingClientRect();
        return elementRect.top - ancestorRect.top + ancestor.scrollTop;
      }

      function evaluateMasteringPlayerSticky() {
        if (!masteringModalContent || !masteringPlayer) {
          return;
        }
        if (masteringPreview && (masteringPreview.hidden || masteringPreview.getAttribute('aria-hidden') === 'true')) {
          setMasteringPlayerPinned(false);
          return;
        }
        const playerRect = masteringPlayer.getBoundingClientRect();
        if (playerRect.height <= 0 || playerRect.width <= 0) {
          setMasteringPlayerPinned(false);
          return;
        }
        const threshold = resolveMasteringPlayerThreshold();
        const effectiveThreshold = Number.isFinite(threshold) ? Math.max(0, threshold) : 0;
        const extraThreshold = (() => {
          const baseHeight = Number.isFinite(playerRect.height) ? playerRect.height * 0.6 : 0;
          const clampedHeight = Math.min(
            Math.max(baseHeight, MASTERING_PLAYER_EARLY_THRESHOLD_MIN),
            MASTERING_PLAYER_EARLY_THRESHOLD_MAX
          );
          return clampedHeight;
        })();
        const activationThreshold = effectiveThreshold + extraThreshold;
        let shouldPin = false;
        let measuredViaRects = false;
        if (typeof masteringModalContent.getBoundingClientRect === 'function') {
          const contentRect = masteringModalContent.getBoundingClientRect();
          const contentTop = contentRect.top;
          const playerTop = playerRect.top;
          if (Number.isFinite(contentTop) && Number.isFinite(playerTop)) {
            measuredViaRects = true;
            const distanceToTop = playerTop - contentTop;
            shouldPin = distanceToTop <= activationThreshold + 1;
          }
        }
        if (!measuredViaRects) {
          const scrollTop = masteringModalContent.scrollTop || 0;
          const playerOffsetTop = getRelativeOffsetTop(masteringPlayer, masteringModalContent);
          if (Number.isFinite(playerOffsetTop)) {
            shouldPin = scrollTop + activationThreshold + 1 >= playerOffsetTop;
          }
        }
        setMasteringPlayerPinned(shouldPin);
      }

      function initializeMasteringPlayerSticky() {
        if (!masteringModalContent || !masteringPlayer) {
          return;
        }
        if (!masteringPlayerScrollHandler) {
          masteringPlayerScrollHandler = () => {
            evaluateMasteringPlayerSticky();
          };
          masteringModalContent.addEventListener('scroll', masteringPlayerScrollHandler, { passive: true });
        }
        if (!masteringPlayerResizeHandler) {
          masteringPlayerResizeHandler = () => {
            updateMasteringPlayerOffset();
            evaluateMasteringPlayerSticky();
          };
          window.addEventListener('resize', masteringPlayerResizeHandler);
        }
        updateMasteringPlayerOffset();
        evaluateMasteringPlayerSticky();
      }

      function setMasteringCheckoutAvailability(enabled) {
        masteringCheckoutButtons.forEach((button) => {
          button.disabled = !enabled;
        });
        if (!masteringPaymentsEnabled) {
          setMasteringDownloadAvailability(enabled && masteringState === 'ready');
        }
      }

      function setMasteringCheckoutFeedback(message = '', status = '') {
        if (!masteringCheckoutFeedback) {
          return;
        }
        masteringCheckoutFeedback.textContent = message || '';
        masteringCheckoutFeedback.classList.remove('error', 'success');
        if (status) {
          masteringCheckoutFeedback.classList.add(status);
        }
      }

      function setMasteringCheckoutLoading(button, isLoading) {
        if (!button) {
          return;
        }
        const defaultLabel = button.dataset.defaultLabel || button.textContent || '';
        if (!button.dataset.defaultLabel && defaultLabel) {
          button.dataset.defaultLabel = defaultLabel;
        }
        if (isLoading) {
          button.classList.add('is-loading');
          button.disabled = true;
          const processing = tm('checkout.processing_label') || defaultLabel;
          if (processing) {
            button.textContent = processing;
          }
        } else {
          button.classList.remove('is-loading');
          const label = button.dataset.defaultLabel || defaultLabel;
          if (label) {
            button.textContent = label;
          }
          button.disabled = masteringState !== 'ready';
        }
      }

      function setMasteringDownloadAvailability(enabled) {
        if (!masteringDownloadButton) {
          return;
        }
        masteringDownloadButton.disabled = !enabled;
      }

      function setMasteringDownloadLoading(isLoading) {
        if (!masteringDownloadButton) {
          return;
        }
        const defaultLabel = masteringDownloadButton.dataset.defaultLabel || masteringDownloadButton.textContent || '';
        if (!masteringDownloadButton.dataset.defaultLabel && defaultLabel) {
          masteringDownloadButton.dataset.defaultLabel = defaultLabel;
        }
        if (isLoading) {
          masteringDownloadButton.classList.add('is-loading');
          masteringDownloadButton.disabled = true;
          const processing = tm('download.processing') || tm('checkout.processing_label') || defaultLabel;
          if (processing) {
            masteringDownloadButton.textContent = processing;
          }
        } else {
          masteringDownloadButton.classList.remove('is-loading');
          const label = masteringDownloadButton.dataset.defaultLabel || defaultLabel;
          if (label) {
            masteringDownloadButton.textContent = label;
          }
          masteringDownloadButton.disabled = masteringState !== 'ready';
        }
      }

      function createMasteringDownloadName(originalName) {
        const raw = typeof originalName === 'string' ? originalName : '';
        const dotIndex = raw.lastIndexOf('.');
        const base = dotIndex > 0 ? raw.slice(0, dotIndex) : raw;
        const sanitized = base
          .trim()
          .replace(/[\s]+/g, '-')
          .replace(/[^a-zA-Z0-9-_]+/g, '') || 'master';
        return `${sanitized}-mastered.wav`;
      }

      function audioBufferToWav(buffer) {
        if (!buffer) {
          return null;
        }
        const numChannels = buffer.numberOfChannels;
        const sampleRate = buffer.sampleRate;
        const samples = buffer.length;
        const bytesPerSample = 2;
        const blockAlign = numChannels * bytesPerSample;
        const dataSize = samples * blockAlign;
        const arrayBuffer = new ArrayBuffer(44 + dataSize);
        const view = new DataView(arrayBuffer);
        let offset = 0;

        const writeString = (value) => {
          for (let index = 0; index < value.length; index += 1) {
            view.setUint8(offset + index, value.charCodeAt(index));
          }
          offset += value.length;
        };

        writeString('RIFF');
        view.setUint32(offset, 36 + dataSize, true);
        offset += 4;
        writeString('WAVE');
        writeString('fmt ');
        view.setUint32(offset, 16, true);
        offset += 4;
        view.setUint16(offset, 1, true);
        offset += 2;
        view.setUint16(offset, numChannels, true);
        offset += 2;
        view.setUint32(offset, sampleRate, true);
        offset += 4;
        view.setUint32(offset, sampleRate * blockAlign, true);
        offset += 4;
        view.setUint16(offset, blockAlign, true);
        offset += 2;
        view.setUint16(offset, bytesPerSample * 8, true);
        offset += 2;
        writeString('data');
        view.setUint32(offset, dataSize, true);
        offset += 4;

        const channelData = [];
        for (let channel = 0; channel < numChannels; channel += 1) {
          channelData.push(buffer.getChannelData(channel));
        }

        for (let sampleIndex = 0; sampleIndex < samples; sampleIndex += 1) {
          for (let channel = 0; channel < numChannels; channel += 1) {
            const sample = Math.max(-1, Math.min(1, channelData[channel][sampleIndex] || 0));
            view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7fff, true);
            offset += 2;
          }
        }

        return new Blob([arrayBuffer], { type: 'audio/wav' });
      }

      async function exportMasteringDownload() {
        if (!masteringDownloadButton || masteringDownloadInProgress) {
          return;
        }
        if (!masteringCurrentFile) {
          const unavailable = tm('download.unavailable') || tm('download.error') || 'Master not ready yet.';
          setMasteringCheckoutFeedback(unavailable, 'error');
          return;
        }
        if (!OfflineAudioContextClass) {
          const unsupported = tm('download.unsupported') || tm('download.error') || 'Unable to export master in this browser.';
          setMasteringCheckoutFeedback(unsupported, 'error');
          return;
        }
        masteringDownloadInProgress = true;
        setMasteringCheckoutFeedback('');
        setMasteringDownloadLoading(true);
        let createdContext = null;
        try {
          let decodeContext = ensureMasteringAudioContext();
          if (!decodeContext && AudioContextClass) {
            try {
              createdContext = new AudioContextClass();
              decodeContext = createdContext;
            } catch (error) {
              console.error('Unable to create temporary audio context', error);
            }
          }

          if (!decodeContext) {
            throw new Error('audio-context');
          }

          const arrayBuffer = await masteringCurrentFile.arrayBuffer();
          const audioBuffer = await decodeContext.decodeAudioData(arrayBuffer.slice(0));

          if (createdContext && typeof createdContext.close === 'function') {
            try {
              await createdContext.close();
            } catch (error) {
              console.warn('Unable to close temporary audio context', error);
            }
          }

          const channelCount = Math.max(1, audioBuffer.numberOfChannels || 2);
          const offlineContext = new OfflineAudioContextClass(channelCount, audioBuffer.length, audioBuffer.sampleRate);
          const source = offlineContext.createBufferSource();
          source.buffer = audioBuffer;
          const snapshot = getMasteringControlSnapshot();

          const preGain = offlineContext.createGain();
          preGain.gain.value = snapshot.preGain || 1;

          const compressor = offlineContext.createDynamicsCompressor();
          compressor.threshold.value = snapshot.threshold || -20;
          compressor.knee.value = snapshot.knee || 20;
          compressor.ratio.value = snapshot.ratio || 3;
          compressor.attack.value = snapshot.attack || 0.003;
          compressor.release.value = snapshot.release || 0.3;

          const lowShelf = offlineContext.createBiquadFilter();
          lowShelf.type = 'lowshelf';
          lowShelf.frequency.value = 90;
          lowShelf.gain.value = snapshot.low || 0;

          const midPeaking = offlineContext.createBiquadFilter();
          midPeaking.type = 'peaking';
          midPeaking.frequency.value = 1600;
          midPeaking.Q.value = snapshot.q || 1;
          midPeaking.gain.value = snapshot.mid || 0;

          const highShelf = offlineContext.createBiquadFilter();
          highShelf.type = 'highshelf';
          highShelf.frequency.value = 8500;
          highShelf.gain.value = snapshot.high || 0;

          const splitter = offlineContext.createChannelSplitter(2);
          const midSum = offlineContext.createGain();
          midSum.gain.value = 0.5;
          const midGain = offlineContext.createGain();
          midGain.gain.value = 1;
          const sideLeft = offlineContext.createGain();
          sideLeft.gain.value = 0.5;
          const sideRight = offlineContext.createGain();
          sideRight.gain.value = -0.5;
          const sideSum = offlineContext.createGain();
          const widthGain = offlineContext.createGain();
          const widthRatio = Math.max(0, Math.min(200, snapshot.width || 100)) / 100;
          widthGain.gain.value = widthRatio;
          const widthInvert = offlineContext.createGain();
          widthInvert.gain.value = -widthRatio;
          const leftOutput = offlineContext.createGain();
          const rightOutput = offlineContext.createGain();
          const merger = offlineContext.createChannelMerger(2);
          const outputGain = offlineContext.createGain();
          outputGain.gain.value = snapshot.output || 1;

          source.connect(preGain);
          preGain.connect(compressor);
          compressor.connect(lowShelf);
          lowShelf.connect(midPeaking);
          midPeaking.connect(highShelf);
          highShelf.connect(splitter);

          splitter.connect(midSum, 0);
          splitter.connect(midSum, 1);
          midSum.connect(midGain);
          midGain.connect(leftOutput);
          midGain.connect(rightOutput);

          splitter.connect(sideLeft, 0);
          splitter.connect(sideRight, 1);
          sideLeft.connect(sideSum);
          sideRight.connect(sideSum);
          sideSum.connect(widthGain);
          widthGain.connect(leftOutput);
          widthGain.connect(widthInvert);
          widthInvert.connect(rightOutput);

          leftOutput.connect(merger, 0, 0);
          rightOutput.connect(merger, 0, 1);
          merger.connect(outputGain);
          outputGain.connect(offlineContext.destination);

          source.start(0);

          const renderedBuffer = await offlineContext.startRendering();
          const wavBlob = audioBufferToWav(renderedBuffer);
          if (!wavBlob) {
            throw new Error('render');
          }

          const downloadUrl = URL.createObjectURL(wavBlob);
          const link = document.createElement('a');
          link.href = downloadUrl;
          link.download = createMasteringDownloadName(masteringCurrentFile.name || 'master');
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          window.setTimeout(() => {
            URL.revokeObjectURL(downloadUrl);
          }, 4000);

          const successMessage = tm('download.success') || '';
          if (successMessage) {
            setMasteringCheckoutFeedback(successMessage, 'success');
          }
        } catch (error) {
          console.error('Unable to export mastered audio', error);
          const code = error instanceof Error ? error.message : '';
          let message = '';
          if (code === 'audio-context') {
            message = tm('download.unsupported') || tm('download.error');
          } else {
            message = tm('download.error');
          }
          setMasteringCheckoutFeedback(message || 'Unable to export master.', 'error');
        } finally {
          masteringDownloadInProgress = false;
          setMasteringDownloadLoading(false);
        }
      }

      function ensureMasteringAudioContext() {
        if (!AudioContextClass || !masteringAudio) {
          return null;
        }
        if (!masteringAudioContext) {
          try {
            masteringAudioContext = new AudioContextClass();
          } catch (error) {
            console.error('Unable to create audio context', error);
            masteringAudioContext = null;
            return null;
          }
        }
        return masteringAudioContext;
      }

      function setupMasteringAudioGraph() {
        if (!masteringAudio || !AudioContextClass) {
          return false;
        }
        const context = ensureMasteringAudioContext();
        if (!context) {
          return false;
        }
        if (masteringNodes && masteringSourceNode) {
          return true;
        }
        try {
          masteringSourceNode = context.createMediaElementSource(masteringAudio);
        } catch (error) {
          if (!masteringNodes) {
            console.warn('Mastering audio graph already initialised', error);
          }
          return Boolean(masteringNodes);
        }
        const preGain = context.createGain();
        const compressor = context.createDynamicsCompressor();
        const lowShelf = context.createBiquadFilter();
        lowShelf.type = 'lowshelf';
        lowShelf.frequency.value = 90;
        const midPeaking = context.createBiquadFilter();
        midPeaking.type = 'peaking';
        midPeaking.frequency.value = 1600;
        midPeaking.Q.value = 0.9;
        const highShelf = context.createBiquadFilter();
        highShelf.type = 'highshelf';
        highShelf.frequency.value = 8500;
        const splitter = context.createChannelSplitter(2);
        const midSum = context.createGain();
        midSum.gain.value = 0.5;
        const midGain = context.createGain();
        const sideLeft = context.createGain();
        sideLeft.gain.value = 0.5;
        const sideRight = context.createGain();
        sideRight.gain.value = -0.5;
        const sideSum = context.createGain();
        const widthGain = context.createGain();
        widthGain.gain.value = (MASTERING_PRESETS[masteringCurrentPreset]?.width || 100) / 100;
        const widthInvert = context.createGain();
        widthInvert.gain.value = -widthGain.gain.value;
        const leftOutput = context.createGain();
        const rightOutput = context.createGain();
        const merger = context.createChannelMerger(2);
        const outputGain = context.createGain();
        const processedGain = context.createGain();
        processedGain.gain.value = masteringBypass ? 0 : 1;
        const bypassGain = context.createGain();
        bypassGain.gain.value = masteringBypass ? 1 : 0;
        const oscilloscopeAnalyser = context.createAnalyser();
        oscilloscopeAnalyser.fftSize = 2048;
        oscilloscopeAnalyser.smoothingTimeConstant = 0.65;
        const spectrumAnalyser = context.createAnalyser();
        spectrumAnalyser.fftSize = 1024;
        spectrumAnalyser.minDecibels = -90;
        spectrumAnalyser.maxDecibels = -10;
        spectrumAnalyser.smoothingTimeConstant = 0.82;
        const stereoLeftAnalyser = context.createAnalyser();
        stereoLeftAnalyser.fftSize = 512;
        stereoLeftAnalyser.smoothingTimeConstant = 0.75;
        const stereoRightAnalyser = context.createAnalyser();
        stereoRightAnalyser.fftSize = 512;
        stereoRightAnalyser.smoothingTimeConstant = 0.75;

        masteringSourceNode.connect(preGain);
        preGain.connect(compressor);
        compressor.connect(lowShelf);
        lowShelf.connect(midPeaking);
        midPeaking.connect(highShelf);
        highShelf.connect(splitter);

        splitter.connect(midSum, 0);
        splitter.connect(midSum, 1);
        midSum.connect(midGain);
        midGain.connect(leftOutput);
        midGain.connect(rightOutput);

        splitter.connect(sideLeft, 0);
        splitter.connect(sideRight, 1);
        sideLeft.connect(sideSum);
        sideRight.connect(sideSum);
        sideSum.connect(widthGain);
        widthGain.connect(leftOutput);
        widthGain.connect(widthInvert);
        widthInvert.connect(rightOutput);

        leftOutput.connect(merger, 0, 0);
        rightOutput.connect(merger, 0, 1);
        leftOutput.connect(stereoLeftAnalyser);
        rightOutput.connect(stereoRightAnalyser);
        merger.connect(outputGain);
        outputGain.connect(oscilloscopeAnalyser);
        oscilloscopeAnalyser.connect(spectrumAnalyser);
        spectrumAnalyser.connect(processedGain);
        processedGain.connect(context.destination);

        masteringSourceNode.connect(bypassGain);
        bypassGain.connect(context.destination);

        masteringNodes = {
          preGain,
          compressor,
          lowShelf,
          midPeaking,
          highShelf,
          splitter,
          midSum,
          midGain,
          sideSum,
          widthGain,
          widthInvert,
          leftOutput,
          rightOutput,
          merger,
          outputGain,
          processedGain,
          bypassGain,
          oscilloscopeAnalyser,
          spectrumAnalyser,
          stereoLeftAnalyser,
          stereoRightAnalyser,
        };
        return true;
      }

      function applyMasteringPreset(presetKey) {
        masteringCurrentPreset = MASTERING_PRESETS[presetKey] ? presetKey : MASTERING_DEFAULT_PRESET;
        updateMasteringPresetButtons(masteringCurrentPreset);
        if (!setupMasteringAudioGraph() || !masteringNodes) {
          return;
        }
        const settings = MASTERING_PRESETS[masteringCurrentPreset] || MASTERING_PRESETS[MASTERING_DEFAULT_PRESET];
        try {
          masteringNodes.preGain.gain.value = settings.preGain;
          masteringNodes.compressor.threshold.value = settings.threshold;
          masteringNodes.compressor.knee.value = settings.knee;
          masteringNodes.compressor.ratio.value = settings.ratio;
          masteringNodes.compressor.attack.value = settings.attack;
          masteringNodes.compressor.release.value = settings.release;
          masteringNodes.lowShelf.gain.value = settings.low;
          masteringNodes.midPeaking.gain.value = settings.mid;
          masteringNodes.midPeaking.Q.value = settings.q;
          masteringNodes.highShelf.gain.value = settings.high;
          masteringNodes.outputGain.gain.value = settings.output;
          setMasteringStereoWidth(settings.width);
          masteringLastWidth = settings.width;
          masteringMonoActive = settings.width <= 0;
          if (masteringMonoToggle) {
            masteringMonoToggle.setAttribute('aria-pressed', masteringMonoActive ? 'true' : 'false');
          }
          syncMasteringControls(settings);
        } catch (error) {
          console.error('Unable to apply mastering preset', error);
        }
      }

      function setMasteringStereoWidth(widthPercent) {
        if (!masteringNodes || !masteringNodes.widthGain || !masteringNodes.widthInvert) {
          return;
        }
        const clamped = Math.max(0, Math.min(200, Number(widthPercent)));
        const ratio = clamped / 100;
        masteringNodes.widthGain.gain.value = ratio;
        masteringNodes.widthInvert.gain.value = -ratio;
      }

      function setMasteringBypass(enabled) {
        if (!masteringNodes || !masteringNodes.processedGain || !masteringNodes.bypassGain) {
          return;
        }
        masteringBypass = Boolean(enabled);
        masteringNodes.processedGain.gain.value = masteringBypass ? 0 : 1;
        masteringNodes.bypassGain.gain.value = masteringBypass ? 1 : 0;
      }

      function syncMasteringControls(settings) {
        if (!settings) {
          return;
        }
        const preGain = Number(settings.preGain);
        if (masteringControlMap.preGain) {
          masteringControlMap.preGain.value = preGain.toFixed(2);
          updateMasteringControlValue('preGain', preGain);
        }
        if (masteringControlMap.threshold) {
          masteringControlMap.threshold.value = Number(settings.threshold).toString();
          updateMasteringControlValue('threshold', Number(settings.threshold));
        }
        if (masteringControlMap.ratio) {
          masteringControlMap.ratio.value = Number(settings.ratio).toFixed(1);
          updateMasteringControlValue('ratio', Number(settings.ratio));
        }
        if (masteringControlMap.attack) {
          const attackMs = Math.round(Number(settings.attack) * 1000);
          masteringControlMap.attack.value = attackMs.toString();
          updateMasteringControlValue('attack', attackMs);
        }
        if (masteringControlMap.release) {
          const releaseMs = Math.round(Number(settings.release) * 1000);
          masteringControlMap.release.value = releaseMs.toString();
          updateMasteringControlValue('release', releaseMs);
        }
        if (masteringControlMap.low) {
          masteringControlMap.low.value = Number(settings.low).toFixed(1);
          updateMasteringControlValue('low', Number(settings.low));
        }
        if (masteringControlMap.mid) {
          masteringControlMap.mid.value = Number(settings.mid).toFixed(1);
          updateMasteringControlValue('mid', Number(settings.mid));
        }
        if (masteringControlMap.high) {
          masteringControlMap.high.value = Number(settings.high).toFixed(1);
          updateMasteringControlValue('high', Number(settings.high));
        }
        const width = Number(settings.width);
        if (masteringControlMap.width) {
          masteringControlMap.width.value = width.toString();
          updateMasteringControlValue('width', width);
        }
        const output = Number(settings.output);
        if (masteringControlMap.output) {
          masteringControlMap.output.value = output.toFixed(2);
          updateMasteringControlValue('output', output);
        }
        if (masteringTotalTime && Number.isFinite(masteringAudio?.duration)) {
          masteringTotalTime.textContent = formatDuration(masteringAudio.duration);
        }
      }

      function updateMasteringControlValue(control, value) {
        const target = masteringControlValueMap[control];
        if (!target) {
          return;
        }
        let formatted = '';
        switch (control) {
          case 'preGain':
          case 'output': {
            const db = 20 * Math.log10(Math.max(0.001, Number(value)));
            formatted = `${db >= 0 ? '+' : ''}${db.toFixed(1)} dB`;
            break;
          }
          case 'threshold':
            formatted = `${Math.round(Number(value))} dB`;
            break;
          case 'ratio': {
            const ratio = Number(value);
            formatted = `${ratio.toFixed(1).replace(/\.0$/, '')}:1`;
            break;
          }
          case 'attack':
          case 'release':
            formatted = `${Math.round(Number(value))} ms`;
            break;
          case 'low':
          case 'mid':
          case 'high': {
            const db = Number(value);
            formatted = `${db >= 0 ? '+' : ''}${db.toFixed(1)} dB`;
            break;
          }
          case 'width':
            formatted = `${Math.round(Number(value))}%`;
            break;
          default:
            formatted = String(value);
        }
        target.textContent = formatted;
      }

      function updateMasteringPresetButtons(activePreset) {
        masteringPresetButtons.forEach((button) => {
          const preset = button.dataset.masteringPreset || '';
          const isActive = preset === activePreset;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        });
      }

      function updateMasteringVisualizerLayout() {
        if (!masteringVisualizerGrid) {
          return;
        }
        const activeCards = masteringVisualizerCards.filter((card) => card.dataset.visualizerActive !== 'false');
        const activeCount = activeCards.length;
        masteringVisualizerGrid.dataset.visualizerActiveCount = String(activeCount);
        masteringVisualizerCards.forEach((card) => {
          const isActive = card.dataset.visualizerActive !== 'false';
          card.setAttribute('data-visualizer-active', isActive ? 'true' : 'false');
          if (isActive) {
            card.removeAttribute('hidden');
          } else {
            card.setAttribute('hidden', '');
          }
        });
        masteringVisualizerToggles.forEach((toggle) => {
          const target = toggle.dataset.masteringVisualizerToggle || '';
          const card = masteringVisualizerCards.find((element) => element.dataset.masteringVisualizerCard === target);
          const isActive = card ? card.dataset.visualizerActive !== 'false' : false;
          toggle.classList.toggle('is-active', isActive);
          toggle.setAttribute('aria-pressed', isActive ? 'true' : 'false');
          if (isActive && activeCount <= 1) {
            toggle.setAttribute('disabled', 'disabled');
          } else {
            toggle.removeAttribute('disabled');
          }
        });
      }

      function getMasteringControlSnapshot() {
        return {
          preGain: masteringControlMap.preGain ? Number(masteringControlMap.preGain.value) : MASTERING_PRESETS[masteringCurrentPreset]?.preGain || 1,
          threshold: masteringControlMap.threshold ? Number(masteringControlMap.threshold.value) : MASTERING_PRESETS[masteringCurrentPreset]?.threshold || -20,
          knee: MASTERING_PRESETS[masteringCurrentPreset]?.knee || 20,
          ratio: masteringControlMap.ratio ? Number(masteringControlMap.ratio.value) : MASTERING_PRESETS[masteringCurrentPreset]?.ratio || 3,
          attack: masteringControlMap.attack ? Number(masteringControlMap.attack.value) / 1000 : MASTERING_PRESETS[masteringCurrentPreset]?.attack || 0.004,
          release: masteringControlMap.release ? Number(masteringControlMap.release.value) / 1000 : MASTERING_PRESETS[masteringCurrentPreset]?.release || 0.3,
          low: masteringControlMap.low ? Number(masteringControlMap.low.value) : MASTERING_PRESETS[masteringCurrentPreset]?.low || 0,
          mid: masteringControlMap.mid ? Number(masteringControlMap.mid.value) : MASTERING_PRESETS[masteringCurrentPreset]?.mid || 0,
          q: MASTERING_PRESETS[masteringCurrentPreset]?.q || 1,
          high: masteringControlMap.high ? Number(masteringControlMap.high.value) : MASTERING_PRESETS[masteringCurrentPreset]?.high || 0,
          width: masteringControlMap.width ? Number(masteringControlMap.width.value) : MASTERING_PRESETS[masteringCurrentPreset]?.width || 100,
          output: masteringControlMap.output ? Number(masteringControlMap.output.value) : MASTERING_PRESETS[masteringCurrentPreset]?.output || 1,
        };
      }

      function clearMasteringVisualizer() {
        if (masteringOscilloscopeCanvas) {
          const context = masteringOscilloscopeCanvas.getContext('2d');
          if (context) {
            const dpr = window.devicePixelRatio || 1;
            const parent = masteringOscilloscopeCanvas.parentElement;
            const cssWidth = masteringOscilloscopeCanvas.clientWidth || (parent ? parent.clientWidth : 0) || 320;
            const cssHeight = masteringOscilloscopeCanvas.clientHeight || (parent ? parent.clientHeight : 0) || 180;
            const width = Math.max(1, Math.floor(cssWidth * dpr));
            const height = Math.max(1, Math.floor(cssHeight * dpr));
            if (masteringOscilloscopeCanvas.width !== width || masteringOscilloscopeCanvas.height !== height) {
              masteringOscilloscopeCanvas.width = width;
              masteringOscilloscopeCanvas.height = height;
            }
            const background = context.createLinearGradient(0, 0, width, height);
            background.addColorStop(0, 'rgba(15, 23, 42, 0.86)');
            background.addColorStop(1, 'rgba(15, 23, 42, 0.5)');
            context.fillStyle = background;
            context.fillRect(0, 0, width, height);
            const mid = height / 2;
            const baselineGradient = context.createLinearGradient(0, 0, width, 0);
            baselineGradient.addColorStop(0, 'rgba(56, 189, 248, 0.25)');
            baselineGradient.addColorStop(1, 'rgba(244, 114, 182, 0.25)');
            context.fillStyle = baselineGradient;
            context.fillRect(0, mid - Math.max(1, dpr), width, Math.max(2, 2 * dpr));
          }
        }
        masteringSpectrumBars.forEach((bar) => {
          bar.style.setProperty('--bar-scale', '0.2');
          bar.style.setProperty('--bar-opacity', '0.35');
        });
        if (masteringStereoCanvas) {
          const context = masteringStereoCanvas.getContext('2d');
          if (context) {
            const dpr = window.devicePixelRatio || 1;
            const parent = masteringStereoCanvas.parentElement;
            const cssWidth = masteringStereoCanvas.clientWidth || (parent ? parent.clientWidth : 0) || 200;
            const cssHeight = masteringStereoCanvas.clientHeight || (parent ? parent.clientHeight : 0) || 200;
            const width = Math.max(1, Math.floor(cssWidth * dpr));
            const height = Math.max(1, Math.floor(cssHeight * dpr));
            if (masteringStereoCanvas.width !== width || masteringStereoCanvas.height !== height) {
              masteringStereoCanvas.width = width;
              masteringStereoCanvas.height = height;
            }
            context.clearRect(0, 0, width, height);
            const radial = context.createRadialGradient(
              width / 2,
              height / 2,
              Math.max(6 * dpr, 0),
              width / 2,
              height / 2,
              Math.max(width, height) / 2
            );
            radial.addColorStop(0, 'rgba(15, 23, 42, 0.9)');
            radial.addColorStop(1, 'rgba(15, 23, 42, 0.6)');
            context.fillStyle = radial;
            context.fillRect(0, 0, width, height);
            context.save();
            context.translate(width / 2, height / 2);
            const radius = Math.min(width, height) / 2 - 8 * dpr;
            context.strokeStyle = 'rgba(148, 163, 184, 0.22)';
            context.lineWidth = Math.max(1, 1.1 * dpr);
            context.beginPath();
            context.arc(0, 0, radius, 0, Math.PI * 2);
            context.stroke();
            context.setLineDash([6 * dpr, 6 * dpr]);
            context.beginPath();
            context.moveTo(-radius, 0);
            context.lineTo(radius, 0);
            context.moveTo(0, -radius);
            context.lineTo(0, radius);
            context.stroke();
            context.setLineDash([]);
            context.restore();
          }
        }
        masteringStereoLeftData = null;
        masteringStereoRightData = null;
      }

      function drawMasteringOscilloscope() {
        if (!masteringOscilloscopeCanvas || !masteringNodes || !masteringNodes.oscilloscopeAnalyser) {
          return;
        }
        const analyser = masteringNodes.oscilloscopeAnalyser;
        if (!analyser) {
          return;
        }
        if (!masteringOscilloscopeData || masteringOscilloscopeData.length !== analyser.fftSize) {
          masteringOscilloscopeData = new Uint8Array(analyser.fftSize);
        }
        const context = masteringOscilloscopeCanvas.getContext('2d');
        if (!context) {
          return;
        }
        const dpr = window.devicePixelRatio || 1;
        const parent = masteringOscilloscopeCanvas.parentElement;
        const cssWidth = masteringOscilloscopeCanvas.clientWidth || (parent ? parent.clientWidth : 0);
        const cssHeight = masteringOscilloscopeCanvas.clientHeight || (parent ? parent.clientHeight : 0);
        if (!cssWidth || !cssHeight) {
          return;
        }
        const width = Math.max(1, Math.floor(cssWidth * dpr));
        const height = Math.max(1, Math.floor(cssHeight * dpr));
        if (masteringOscilloscopeCanvas.width !== width || masteringOscilloscopeCanvas.height !== height) {
          masteringOscilloscopeCanvas.width = width;
          masteringOscilloscopeCanvas.height = height;
        }
        analyser.getByteTimeDomainData(masteringOscilloscopeData);
        context.clearRect(0, 0, width, height);
        const background = context.createLinearGradient(0, 0, width, height);
        background.addColorStop(0, 'rgba(15, 23, 42, 0.85)');
        background.addColorStop(1, 'rgba(15, 23, 42, 0.45)');
        context.fillStyle = background;
        context.fillRect(0, 0, width, height);
        const mid = height / 2;
        const range = height * 0.4;
        const strokeGradient = context.createLinearGradient(0, 0, width, 0);
        strokeGradient.addColorStop(0, 'rgba(56, 189, 248, 0.85)');
        strokeGradient.addColorStop(0.5, 'rgba(129, 140, 248, 0.9)');
        strokeGradient.addColorStop(1, 'rgba(244, 114, 182, 0.85)');
        context.lineWidth = Math.max(1.6 * dpr, 1.2);
        context.strokeStyle = strokeGradient;
        context.shadowColor = 'rgba(56, 189, 248, 0.35)';
        context.shadowBlur = 24 * dpr;
        context.beginPath();
        const total = masteringOscilloscopeData.length;
        let sum = 0;
        for (let i = 0; i < total; i += 1) {
          sum += masteringOscilloscopeData[i];
        }
        const average = total > 0 ? sum / total : 128;
        for (let i = 0; i < total; i += 1) {
          const value = masteringOscilloscopeData[i];
          const normalized = (value - average) / 128;
          const eased = Math.sign(normalized) * Math.pow(Math.abs(normalized), 0.9);
          const x = (i / (total - 1)) * width;
          const y = mid + eased * range;
          if (i === 0) {
            context.moveTo(x, y);
          } else {
            context.lineTo(x, y);
          }
        }
        context.stroke();
        context.shadowBlur = 0;
        context.globalCompositeOperation = 'lighter';
        const glow = context.createLinearGradient(0, 0, width, height);
        glow.addColorStop(0, 'rgba(56, 189, 248, 0.08)');
        glow.addColorStop(1, 'rgba(236, 72, 153, 0.08)');
        context.fillStyle = glow;
        context.fillRect(0, 0, width, height);
        context.globalCompositeOperation = 'source-over';
      }

      function drawMasteringSpectrum() {
        if (!masteringSpectrumBars.length || !masteringNodes || !masteringNodes.spectrumAnalyser) {
          return;
        }
        const analyser = masteringNodes.spectrumAnalyser;
        if (!analyser) {
          return;
        }
        if (!masteringSpectrumData || masteringSpectrumData.length !== analyser.frequencyBinCount) {
          masteringSpectrumData = new Uint8Array(analyser.frequencyBinCount);
        }
        analyser.getByteFrequencyData(masteringSpectrumData);
        const barCount = masteringSpectrumBars.length;
        const binSize = Math.max(1, Math.floor(masteringSpectrumData.length / barCount));
        for (let index = 0; index < barCount; index += 1) {
          const start = index * binSize;
          const end = Math.min(start + binSize, masteringSpectrumData.length);
          let sum = 0;
          for (let i = start; i < end; i += 1) {
            sum += masteringSpectrumData[i] || 0;
          }
          const average = sum / Math.max(1, end - start);
          const normalized = Math.pow(Math.max(0, Math.min(1, average / 255)), 0.78);
          const scale = 0.18 + normalized * 0.82;
          const opacity = 0.32 + normalized * 0.68;
          const bar = masteringSpectrumBars[index];
          bar.style.setProperty('--bar-scale', scale.toFixed(3));
          bar.style.setProperty('--bar-opacity', opacity.toFixed(3));
        }
      }

      function drawMasteringStereoField() {
        if (
          !masteringStereoCanvas ||
          !masteringNodes ||
          !masteringNodes.stereoLeftAnalyser ||
          !masteringNodes.stereoRightAnalyser
        ) {
          return;
        }
        const leftAnalyser = masteringNodes.stereoLeftAnalyser;
        const rightAnalyser = masteringNodes.stereoRightAnalyser;
        const sampleCount = Math.min(leftAnalyser.fftSize, rightAnalyser.fftSize);
        if (!sampleCount) {
          return;
        }
        if (!masteringStereoLeftData || masteringStereoLeftData.length !== sampleCount) {
          masteringStereoLeftData = new Float32Array(sampleCount);
        }
        if (!masteringStereoRightData || masteringStereoRightData.length !== sampleCount) {
          masteringStereoRightData = new Float32Array(sampleCount);
        }
        leftAnalyser.getFloatTimeDomainData(masteringStereoLeftData);
        rightAnalyser.getFloatTimeDomainData(masteringStereoRightData);
        const context = masteringStereoCanvas.getContext('2d');
        if (!context) {
          return;
        }
        const dpr = window.devicePixelRatio || 1;
        const parent = masteringStereoCanvas.parentElement;
        const cssWidth = masteringStereoCanvas.clientWidth || (parent ? parent.clientWidth : 0);
        const cssHeight = masteringStereoCanvas.clientHeight || (parent ? parent.clientHeight : 0);
        if (!cssWidth || !cssHeight) {
          return;
        }
        const width = Math.max(1, Math.floor(cssWidth * dpr));
        const height = Math.max(1, Math.floor(cssHeight * dpr));
        if (masteringStereoCanvas.width !== width || masteringStereoCanvas.height !== height) {
          masteringStereoCanvas.width = width;
          masteringStereoCanvas.height = height;
        }
        context.clearRect(0, 0, width, height);
        const background = context.createRadialGradient(
          width / 2,
          height / 2,
          Math.max(4 * dpr, 10 * dpr),
          width / 2,
          height / 2,
          Math.max(width, height) / 2
        );
        background.addColorStop(0, 'rgba(15, 23, 42, 0.9)');
        background.addColorStop(1, 'rgba(15, 23, 42, 0.65)');
        context.fillStyle = background;
        context.fillRect(0, 0, width, height);

        context.save();
        context.translate(width / 2, height / 2);
        const radius = Math.min(width, height) / 2 - 8 * dpr;
        context.strokeStyle = 'rgba(148, 163, 184, 0.18)';
        context.lineWidth = Math.max(1, 1.1 * dpr);
        context.beginPath();
        context.arc(0, 0, radius, 0, Math.PI * 2);
        context.stroke();
        context.setLineDash([6 * dpr, 6 * dpr]);
        context.beginPath();
        context.moveTo(-radius, 0);
        context.lineTo(radius, 0);
        context.moveTo(0, -radius);
        context.lineTo(0, radius);
        context.stroke();
        context.setLineDash([]);

        const step = Math.max(1, Math.floor(sampleCount / 360));
        let correlation = 0;
        let pointCount = 0;
        context.beginPath();
        for (let index = 0; index < sampleCount; index += step) {
          const left = masteringStereoLeftData[index];
          const right = masteringStereoRightData[index];
          correlation += left * right;
          pointCount += 1;
          const clampedX = Math.max(-1, Math.min(1, left));
          const clampedY = Math.max(-1, Math.min(1, right));
          const x = clampedX * radius;
          const y = clampedY * radius;
          if (pointCount === 1) {
            context.moveTo(x, y);
          } else {
            context.lineTo(x, y);
          }
        }

        let stereoWidth = 0;
        if (pointCount > 0) {
          const normalizedCorrelation = Math.max(-1, Math.min(1, correlation / pointCount));
          stereoWidth = Math.max(0, Math.min(1, 1 - Math.abs(normalizedCorrelation)));
          const strokeGradient = context.createLinearGradient(-radius, -radius, radius, radius);
          strokeGradient.addColorStop(0, `rgba(94, 234, 212, ${0.35 + stereoWidth * 0.4})`);
          strokeGradient.addColorStop(1, `rgba(236, 72, 153, ${0.32 + (1 - stereoWidth) * 0.35})`);
          context.strokeStyle = strokeGradient;
          context.lineWidth = Math.max(1.4, 1.8 * dpr);
          context.shadowColor = `rgba(56, 189, 248, ${0.2 + stereoWidth * 0.45})`;
          context.shadowBlur = 22 * dpr;
          context.globalAlpha = 0.92;
          context.stroke();
          context.globalAlpha = 1;
          context.shadowBlur = 0;
        }
        context.restore();

        if (pointCount > 0 && stereoWidth > 0) {
          const baseRadius = Math.min(width, height) / 2 - 8 * dpr;
          const glowRadius = baseRadius * (0.35 + stereoWidth * 0.45);
          const glowGradient = context.createRadialGradient(
            width / 2,
            height / 2,
            Math.max(4 * dpr, glowRadius * 0.25),
            width / 2,
            height / 2,
            glowRadius
          );
          glowGradient.addColorStop(0, `rgba(94, 234, 212, ${0.12 + stereoWidth * 0.24})`);
          glowGradient.addColorStop(1, 'rgba(94, 234, 212, 0)');
          context.fillStyle = glowGradient;
          context.fillRect(0, 0, width, height);
        }
      }

      function startMasteringVisualizer() {
        if (masteringVisualizerFrame) {
          return;
        }
        const render = () => {
          drawMasteringOscilloscope();
          drawMasteringSpectrum();
          drawMasteringStereoField();
          masteringVisualizerFrame = requestAnimationFrame(render);
        };
        drawMasteringOscilloscope();
        drawMasteringSpectrum();
        drawMasteringStereoField();
        masteringVisualizerFrame = requestAnimationFrame(render);
      }

      function stopMasteringVisualizer(reset = false) {
        if (masteringVisualizerFrame) {
          cancelAnimationFrame(masteringVisualizerFrame);
          masteringVisualizerFrame = null;
        }
        if (reset) {
          clearMasteringVisualizer();
        }
      }

      function clearMasteringWaveform() {
        if (!masteringWaveformCanvas) {
          return;
        }
        if (masteringWaveformRedrawFrame) {
          cancelAnimationFrame(masteringWaveformRedrawFrame);
          masteringWaveformRedrawFrame = null;
        }
        masteringWaveformData = null;
        const context = masteringWaveformCanvas.getContext('2d');
        if (!context) {
          return;
        }
        const dpr = window.devicePixelRatio || 1;
        const parent = masteringWaveformCanvas.parentElement;
        const cssWidth = masteringWaveformCanvas.clientWidth || (parent ? parent.clientWidth : 0) || 320;
        const cssHeight = masteringWaveformCanvas.clientHeight || (parent ? parent.clientHeight : 0) || 160;
        const width = Math.max(1, Math.floor(cssWidth * dpr));
        const height = Math.max(1, Math.floor(cssHeight * dpr));
        masteringWaveformCanvas.width = width;
        masteringWaveformCanvas.height = height;
        context.clearRect(0, 0, width, height);
        const backgroundGradient = context.createLinearGradient(0, 0, width, height);
        backgroundGradient.addColorStop(0, 'rgba(15, 23, 42, 0.8)');
        backgroundGradient.addColorStop(1, 'rgba(15, 23, 42, 0.55)');
        context.fillStyle = backgroundGradient;
        context.fillRect(0, 0, width, height);
        if (masteringPlayhead) {
          masteringPlayhead.style.transform = 'translateX(-1px)';
        }
        updateMasteringTimeline();
      }

      function drawMasteringWaveform(peaks) {
        if (!masteringWaveformCanvas || !peaks || !peaks.length) {
          return false;
        }
        const context = masteringWaveformCanvas.getContext('2d');
        if (!context) {
          return false;
        }
        const dpr = window.devicePixelRatio || 1;
        const parent = masteringWaveformCanvas.parentElement;
        const cssWidth = masteringWaveformCanvas.clientWidth || (parent ? parent.clientWidth : 0);
        const cssHeight = masteringWaveformCanvas.clientHeight || (parent ? parent.clientHeight : 0);
        if (!cssWidth || !cssHeight) {
          return false;
        }
        const width = Math.max(1, Math.floor(cssWidth * dpr));
        const height = Math.max(1, Math.floor(cssHeight * dpr));
        masteringWaveformCanvas.width = width;
        masteringWaveformCanvas.height = height;
        context.clearRect(0, 0, width, height);

        const backgroundGradient = context.createLinearGradient(0, 0, width, height);
        backgroundGradient.addColorStop(0, 'rgba(15, 23, 42, 0.78)');
        backgroundGradient.addColorStop(1, 'rgba(15, 23, 42, 0.42)');
        context.fillStyle = backgroundGradient;
        context.fillRect(0, 0, width, height);

        const baseline = height / 2;
        const amplitudeScale = (height * 0.82) / 2;
        const total = peaks.length;
        const easedPeaks = new Float32Array(total);
        for (let i = 0; i < total; i += 1) {
          const value = Math.max(0, Math.min(1, peaks[i]));
          easedPeaks[i] = Math.pow(value, 0.82);
        }
        const step = width / Math.max(1, total - 1);

        context.save();
        context.strokeStyle = 'rgba(148, 163, 184, 0.16)';
        context.lineWidth = Math.max(1, dpr);
        context.beginPath();
        context.moveTo(0, baseline);
        context.lineTo(width, baseline);
        context.stroke();
        context.restore();

        const fillGradient = context.createLinearGradient(0, 0, width, height);
        fillGradient.addColorStop(0, 'rgba(56, 189, 248, 0.32)');
        fillGradient.addColorStop(0.5, 'rgba(129, 140, 248, 0.5)');
        fillGradient.addColorStop(1, 'rgba(236, 72, 153, 0.38)');

        context.save();
        context.beginPath();
        context.moveTo(0, baseline);
        for (let i = 0; i < total; i += 1) {
          const x = i * step;
          const y = baseline - easedPeaks[i] * amplitudeScale;
          context.lineTo(x, y);
        }
        context.lineTo(width, baseline);
        for (let i = total - 1; i >= 0; i -= 1) {
          const x = i * step;
          const y = baseline + easedPeaks[i] * amplitudeScale;
          context.lineTo(x, y);
        }
        context.closePath();
        context.shadowColor = 'rgba(56, 189, 248, 0.28)';
        context.shadowBlur = 28 * dpr;
        context.fillStyle = fillGradient;
        context.fill();
        context.restore();

        const outlineGradient = context.createLinearGradient(0, 0, width, 0);
        outlineGradient.addColorStop(0, 'rgba(125, 211, 252, 0.8)');
        outlineGradient.addColorStop(0.5, 'rgba(192, 132, 252, 0.85)');
        outlineGradient.addColorStop(1, 'rgba(251, 191, 36, 0.75)');

        context.save();
        context.beginPath();
        for (let i = 0; i < total; i += 1) {
          const x = i * step;
          const y = baseline - easedPeaks[i] * amplitudeScale;
          if (i === 0) {
            context.moveTo(x, y);
          } else {
            context.lineTo(x, y);
          }
        }
        context.lineJoin = 'round';
        context.lineWidth = Math.max(1.5, 2.2 * dpr);
        context.strokeStyle = outlineGradient;
        context.stroke();
        context.restore();

        context.save();
        context.globalCompositeOperation = 'lighter';
        const sheenGradient = context.createLinearGradient(0, 0, width, height);
        sheenGradient.addColorStop(0, 'rgba(244, 114, 182, 0.1)');
        sheenGradient.addColorStop(0.5, 'rgba(59, 130, 246, 0.12)');
        sheenGradient.addColorStop(1, 'rgba(94, 234, 212, 0.1)');
        context.fillStyle = sheenGradient;
        context.fillRect(0, 0, width, height);
        context.restore();

        return true;
      }

      function scheduleMasteringWaveformRedraw() {
        if (!masteringWaveformCanvas || !masteringWaveformData || masteringWaveformData.length === 0) {
          return;
        }
        if (masteringWaveformRedrawFrame) {
          cancelAnimationFrame(masteringWaveformRedrawFrame);
        }
        masteringWaveformRedrawFrame = requestAnimationFrame(() => {
          masteringWaveformRedrawFrame = null;
          const drawn = drawMasteringWaveform(masteringWaveformData);
          if (drawn) {
            updateMasteringTimeline();
          }
        });
      }

      async function renderMasteringWaveform(file, loadId) {
        if (!AudioContextClass || !masteringWaveformCanvas || !file) {
          return;
        }
        try {
          const arrayBuffer = await file.arrayBuffer();
          if (loadId !== masteringLoadId) {
            return;
          }
          const context = ensureMasteringAudioContext();
          if (!context) {
            return;
          }
          const audioBuffer = await context.decodeAudioData(arrayBuffer.slice(0));
          if (loadId !== masteringLoadId) {
            return;
          }
          const channelCount = audioBuffer.numberOfChannels;
          const length = audioBuffer.length;
          const resolution = Math.max(300, Math.floor((masteringWaveformCanvas.clientWidth || 600) * 1.5));
          const samplesPerBucket = Math.max(1, Math.floor(length / resolution));
          const peaks = new Float32Array(resolution);
          for (let bucket = 0; bucket < resolution; bucket += 1) {
            let start = bucket * samplesPerBucket;
            let end = Math.min(start + samplesPerBucket, length);
            let max = 0;
            for (let sample = start; sample < end; sample += 1) {
              let mixed = 0;
              for (let channel = 0; channel < channelCount; channel += 1) {
                const channelData = audioBuffer.getChannelData(channel);
                mixed += channelData[sample] || 0;
              }
              mixed /= channelCount;
              const value = Math.abs(mixed);
              if (value > max) {
                max = value;
              }
            }
            peaks[bucket] = max;
          }
          masteringWaveformData = peaks;
          const drawn = drawMasteringWaveform(peaks);
          if (drawn) {
            updateMasteringTimeline();
          } else {
            scheduleMasteringWaveformRedraw();
          }
        } catch (error) {
          console.error('Unable to render mastering waveform', error);
          clearMasteringWaveform();
        }
      }

      if (masteringWaveformCanvas) {
        if (typeof ResizeObserver !== 'undefined') {
          const waveformResizeTarget = masteringWaveformCanvas.parentElement || masteringWaveformCanvas;
          masteringWaveformResizeObserver = new ResizeObserver((entries) => {
            for (const entry of entries) {
              if (!entry || !entry.contentRect) {
                continue;
              }
              if (entry.contentRect.width > 0 && entry.contentRect.height > 0) {
                scheduleMasteringWaveformRedraw();
              }
            }
          });
          masteringWaveformResizeObserver.observe(waveformResizeTarget);
        } else {
          window.addEventListener('resize', scheduleMasteringWaveformRedraw);
        }
        const waveformInteractionTarget =
          masteringWaveformCanvas.parentElement instanceof HTMLElement
            ? masteringWaveformCanvas.parentElement
            : masteringWaveformCanvas;
        const isPrimaryMasteringPointer = (event) =>
          !event || typeof event.button !== 'number' || event.button === 0;
        if (window.PointerEvent) {
          const handlePointerDown = (event) => {
            if (!isPrimaryMasteringPointer(event)) {
              return;
            }
            masteringWaveformDragActive = true;
            masteringWaveformPointerId = typeof event.pointerId === 'number' ? event.pointerId : null;
            if (typeof waveformInteractionTarget.setPointerCapture === 'function' && typeof event.pointerId === 'number') {
              try {
                waveformInteractionTarget.setPointerCapture(event.pointerId);
              } catch (error) {
                // Ignore pointer capture errors
              }
            }
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
          };
          const handlePointerMove = (event) => {
            if (!masteringWaveformDragActive) {
              return;
            }
            if (
              masteringWaveformPointerId !== null &&
              typeof event.pointerId === 'number' &&
              event.pointerId !== masteringWaveformPointerId
            ) {
              return;
            }
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
          };
          const handlePointerStop = (event) => {
            if (!masteringWaveformDragActive) {
              return;
            }
            if (
              masteringWaveformPointerId !== null &&
              typeof event.pointerId === 'number' &&
              event.pointerId !== masteringWaveformPointerId
            ) {
              return;
            }
            masteringWaveformDragActive = false;
            masteringWaveformPointerId = null;
            if (typeof waveformInteractionTarget.releasePointerCapture === 'function' && typeof event.pointerId === 'number') {
              try {
                waveformInteractionTarget.releasePointerCapture(event.pointerId);
              } catch (error) {
                // Ignore release errors
              }
            }
          };
          waveformInteractionTarget.addEventListener('pointerdown', handlePointerDown);
          waveformInteractionTarget.addEventListener('pointermove', handlePointerMove);
          waveformInteractionTarget.addEventListener('pointerup', handlePointerStop);
          waveformInteractionTarget.addEventListener('pointercancel', handlePointerStop);
          waveformInteractionTarget.addEventListener('pointerleave', handlePointerStop);
        } else {
          const handleMouseMove = (event) => {
            if (!masteringWaveformDragActive) {
              return;
            }
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
          };
          const stopMouseDrag = () => {
            if (!masteringWaveformDragActive) {
              return;
            }
            masteringWaveformDragActive = false;
            masteringWaveformPointerId = null;
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', stopMouseDrag);
          };
          const handleMouseDown = (event) => {
            if (!isPrimaryMasteringPointer(event)) {
              return;
            }
            masteringWaveformDragActive = true;
            masteringWaveformPointerId = null;
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', stopMouseDrag);
          };
          const touchOptions = { passive: false };
          const handleTouchMove = (event) => {
            if (!masteringWaveformDragActive) {
              return;
            }
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
          };
          const stopTouchDrag = () => {
            if (!masteringWaveformDragActive) {
              return;
            }
            masteringWaveformDragActive = false;
            masteringWaveformPointerId = null;
            document.removeEventListener('touchmove', handleTouchMove, touchOptions);
            document.removeEventListener('touchend', stopTouchDrag);
            document.removeEventListener('touchcancel', stopTouchDrag);
          };
          const handleTouchStart = (event) => {
            masteringWaveformDragActive = true;
            masteringWaveformPointerId = null;
            if (typeof event.preventDefault === 'function') {
              event.preventDefault();
            }
            seekMasteringWaveformToEvent(event);
            document.addEventListener('touchmove', handleTouchMove, touchOptions);
            document.addEventListener('touchend', stopTouchDrag);
            document.addEventListener('touchcancel', stopTouchDrag);
          };
          waveformInteractionTarget.addEventListener('mousedown', handleMouseDown);
          waveformInteractionTarget.addEventListener('touchstart', handleTouchStart, touchOptions);
        }
      }

      function updateMasteringPlayButton(isPlaying) {
        if (!masteringPlayButton) {
          return;
        }
        if (isPlaying) {
          masteringPlayButton.innerHTML = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M7 4h4v16H7zm6 0h4v16h-4z" /></svg>';
        } else {
          masteringPlayButton.innerHTML = '<svg width="18" height="18" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><path d="M5 3.5v17l15-8.5-15-8.5Z" /></svg>';
        }
      }

      function updateMasteringTimeline() {
        if (!masteringAudio) {
          return;
        }
        if (masteringCurrentTime) {
          masteringCurrentTime.textContent = formatDuration(masteringAudio.currentTime);
        }
        if (masteringTotalTime && Number.isFinite(masteringAudio.duration)) {
          masteringTotalTime.textContent = formatDuration(masteringAudio.duration);
        }
        if (!masteringWaveformData || !masteringWaveformCanvas || !masteringPlayhead) {
          return;
        }
        const duration = masteringAudio.duration || 0;
        if (!Number.isFinite(duration) || duration <= 0) {
          return;
        }
        const progress = Math.min(1, Math.max(0, masteringAudio.currentTime / duration));
        const width = masteringWaveformCanvas.clientWidth || masteringWaveformCanvas.offsetWidth || 0;
        if (width <= 0) {
          return;
        }
        const offset = width * progress;
        const playheadOffset = offset - 1;
        masteringPlayhead.style.transform = `translateX(${playheadOffset}px)`;
      }

      function getMasteringPointerClientX(event) {
        if (!event) {
          return null;
        }
        if (typeof event.clientX === 'number' && Number.isFinite(event.clientX)) {
          return event.clientX;
        }
        if (event.touches && event.touches.length > 0) {
          const touch = event.touches[0];
          if (touch && Number.isFinite(touch.clientX)) {
            return touch.clientX;
          }
        }
        if (event.changedTouches && event.changedTouches.length > 0) {
          const touch = event.changedTouches[0];
          if (touch && Number.isFinite(touch.clientX)) {
            return touch.clientX;
          }
        }
        return null;
      }

      function seekMasteringWaveformToEvent(event) {
        if (!masteringAudio || !masteringWaveformCanvas) {
          return;
        }
        const duration = masteringAudio.duration;
        if (!Number.isFinite(duration) || duration <= 0) {
          return;
        }
        const rect = masteringWaveformCanvas.getBoundingClientRect();
        if (!rect || !Number.isFinite(rect.width) || rect.width <= 0) {
          return;
        }
        const clientX = getMasteringPointerClientX(event);
        if (typeof clientX !== 'number' || Number.isNaN(clientX)) {
          return;
        }
        const relativeX = Math.min(Math.max(clientX - rect.left, 0), rect.width);
        const progress = rect.width > 0 ? relativeX / rect.width : 0;
        masteringAudio.currentTime = progress * duration;
        updateMasteringTimeline();
      }

      function startMasteringWaveformAnimation() {
        if (!masteringAudio) {
          return;
        }
        if (masteringWaveformFrame) {
          cancelAnimationFrame(masteringWaveformFrame);
        }
        const step = () => {
          updateMasteringTimeline();
          if (!masteringAudio || masteringAudio.paused) {
            masteringWaveformFrame = null;
            return;
          }
          masteringWaveformFrame = requestAnimationFrame(step);
        };
        masteringWaveformFrame = requestAnimationFrame(step);
      }

      function stopMasteringWaveformAnimation() {
        if (masteringWaveformFrame) {
          cancelAnimationFrame(masteringWaveformFrame);
          masteringWaveformFrame = null;
        }
        updateMasteringTimeline();
      }

      function formatDuration(seconds) {
        if (!Number.isFinite(seconds) || seconds <= 0) {
          return tm('player.duration_placeholder');
        }
        const minutes = Math.floor(seconds / 60);
        const secs = Math.round(seconds % 60);
        return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
      }

      function wait(ms) {
        return new Promise((resolve) => {
          setTimeout(resolve, ms);
        });
      }

      function isAllowedMasteringFile(file) {
        if (!file) {
          return false;
        }
        const type = (file.type || '').toLowerCase();
        if (type && MASTERING_ALLOWED_TYPES.includes(type)) {
          return true;
        }
        const name = (file.name || '').toLowerCase();
        return MASTERING_ALLOWED_EXTENSIONS.some((extension) => name.endsWith(extension));
      }

      function resetMasteringModal(resetFeedback) {
        masteringLoadId += 1;
        masteringState = 'idle';
        masteringCurrentPreset = MASTERING_DEFAULT_PRESET;
        masteringCheckoutInProgress = false;
        masteringRedirecting = false;
        masteringBypass = false;
        masteringMonoActive = false;
        masteringCurrentFile = null;
        masteringDownloadInProgress = false;
        setMasteringDownloadLoading(false);
        setMasteringDownloadAvailability(false);
        if (masteringDropzone) {
          masteringDropzone.classList.remove('is-dragging');
        }
        if (masteringAudio) {
          try {
            masteringAudio.pause();
          } catch (error) {
            // Ignore pause errors
          }
          masteringAudio.removeAttribute('src');
          masteringAudio.load();
        }
        if (masteringFileUrl) {
          URL.revokeObjectURL(masteringFileUrl);
          masteringFileUrl = null;
        }
        setMasteringStatusKey('idle');
        setMasteringProcessing(false);
        toggleMasteringPreview(false);
        clearMasteringWaveform();
        stopMasteringWaveformAnimation();
        stopMasteringVisualizer(true);
        updateMasteringPlayButton(false);
        setMasteringBypass(false);
        if (masteringTrackName) {
          masteringTrackName.textContent = tm('dropzone.title');
        }
        if (masteringTrackDuration) {
          masteringTrackDuration.textContent = tm('player.duration_placeholder');
        }
        if (masteringCurrentTime) {
          masteringCurrentTime.textContent = tm('player.duration_placeholder');
        }
        if (masteringTotalTime) {
          masteringTotalTime.textContent = tm('player.duration_placeholder');
        }
        updateMasteringPresetButtons(masteringCurrentPreset);
        const defaultSettings = MASTERING_PRESETS[MASTERING_DEFAULT_PRESET] || MASTERING_PRESETS.radio;
        if (defaultSettings) {
          masteringLastWidth = defaultSettings.width || 100;
          syncMasteringControls(defaultSettings);
          setMasteringStereoWidth(defaultSettings.width || 100);
        }
        if (masteringOriginalToggle) {
          masteringOriginalToggle.setAttribute('aria-pressed', 'false');
        }
        if (masteringMonoToggle) {
          masteringMonoToggle.setAttribute('aria-pressed', 'false');
        }
        setMasteringCheckoutAvailability(false);
        masteringCheckoutButtons.forEach((button) => {
          button.classList.remove('is-loading');
          const label = button.dataset.defaultLabel || button.textContent || '';
          if (label) {
            button.textContent = label;
          }
          button.disabled = true;
        });
        if (resetFeedback) {
          setMasteringCheckoutFeedback('');
        }
      }

      async function handleMasteringFile(file) {
        if (!file || !masteringModal) {
          return;
        }
        setMasteringDownloadLoading(false);
        setMasteringDownloadAvailability(false);
        masteringCurrentFile = null;
        if (!isAllowedMasteringFile(file)) {
          setMasteringStatusMessage(tm('errors.invalid_type'), 'error');
          setMasteringProcessing(false);
          toggleMasteringPreview(false);
          setMasteringCheckoutAvailability(false);
          masteringState = 'error';
          return;
        }
        if (file.size && file.size > MASTERING_MAX_SIZE) {
          setMasteringStatusMessage(tm('errors.too_large'), 'error');
          setMasteringProcessing(false);
          toggleMasteringPreview(false);
          setMasteringCheckoutAvailability(false);
          masteringState = 'error';
          return;
        }
        const loadId = ++masteringLoadId;
        masteringCurrentFile = file;
        masteringState = 'uploading';
        setMasteringStatusKey('uploading');
        setMasteringProcessing(true, 'uploading');
        setMasteringCheckoutFeedback('');
        setMasteringCheckoutAvailability(false);
        masteringCheckoutButtons.forEach((button) => {
          setMasteringCheckoutLoading(button, false);
          button.disabled = true;
        });
        masteringBypass = false;
        masteringMonoActive = false;
        if (masteringOriginalToggle) {
          masteringOriginalToggle.setAttribute('aria-pressed', 'false');
        }
        if (masteringMonoToggle) {
          masteringMonoToggle.setAttribute('aria-pressed', 'false');
        }
        clearMasteringWaveform();
        if (masteringAudio) {
          try {
            masteringAudio.pause();
          } catch (error) {
            // Ignore pause errors
          }
          masteringAudio.currentTime = 0;
          masteringAudio.removeAttribute('src');
        }
        if (masteringFileUrl) {
          URL.revokeObjectURL(masteringFileUrl);
          masteringFileUrl = null;
        }
        masteringCurrentPreset = MASTERING_DEFAULT_PRESET;
        updateMasteringPresetButtons(masteringCurrentPreset);
        const defaultSettings = MASTERING_PRESETS[MASTERING_DEFAULT_PRESET] || MASTERING_PRESETS.radio;
        if (defaultSettings) {
          masteringLastWidth = defaultSettings.width || 100;
          syncMasteringControls(defaultSettings);
        }
        const objectUrl = URL.createObjectURL(file);
        masteringFileUrl = objectUrl;
        if (masteringTrackName) {
          masteringTrackName.textContent = file.name || tm('dropzone.title');
        }
        if (masteringTrackDuration) {
          masteringTrackDuration.textContent = tm('player.duration_placeholder');
        }
        if (masteringAudio) {
          masteringAudio.src = objectUrl;
          masteringAudio.load();
        }
        renderMasteringWaveform(file, loadId);
        try {
          await new Promise((resolve, reject) => {
            if (!masteringAudio) {
              resolve();
              return;
            }
            const cleanup = () => {
              masteringAudio.removeEventListener('loadedmetadata', onLoaded);
              masteringAudio.removeEventListener('error', onError);
            };
            const onLoaded = () => {
              cleanup();
              resolve();
            };
            const onError = () => {
              cleanup();
              reject(new Error('load'));
            };
            if (masteringAudio.readyState >= 1) {
              resolve();
              return;
            }
            masteringAudio.addEventListener('loadedmetadata', onLoaded, { once: true });
            masteringAudio.addEventListener('error', onError, { once: true });
          });
        } catch (error) {
          if (loadId !== masteringLoadId) {
            return;
          }
          console.error('Unable to load audio for mastering', error);
          masteringState = 'error';
          setMasteringStatusMessage(tm('errors.load'), 'error');
          setMasteringProcessing(false);
          toggleMasteringPreview(false);
          return;
        }
        if (loadId !== masteringLoadId) {
          return;
        }
        if (masteringAudio && Number.isFinite(masteringAudio.duration) && masteringTrackDuration) {
          masteringTrackDuration.textContent = formatDuration(masteringAudio.duration);
        }
        await wait(500);
        if (loadId !== masteringLoadId) {
          return;
        }
        masteringState = 'analyzing';
        setMasteringStatusKey('analyzing');
        setMasteringProcessing(true, 'analyzing');
        await wait(900);
        if (loadId !== masteringLoadId) {
          return;
        }
        masteringState = 'rendering';
        setMasteringStatusKey('rendering');
        setMasteringProcessing(true, 'rendering');
        await wait(1100);
        if (loadId !== masteringLoadId) {
          return;
        }
        masteringState = 'ready';
        setMasteringStatusKey('ready', 'success');
        setMasteringProcessing(false);
        toggleMasteringPreview(true);
        setMasteringCheckoutAvailability(true);
        applyMasteringPreset(masteringCurrentPreset);
      }

      async function startMasteringCheckout(plan, button) {
        if (!plan || !button || masteringCheckoutInProgress) {
          return;
        }
        masteringCheckoutInProgress = true;
        masteringRedirecting = false;
        setMasteringCheckoutFeedback('');
        setMasteringCheckoutLoading(button, true);
        try {
          const response = await fetch('/create-checkout-session.php', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ plan })
          });
          const responseText = await response.text();
          let payload = null;
          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid mastering checkout payload', error, responseText);
            }
          }
          if (!response.ok || !payload || payload.status !== 'success' || !payload.url) {
            const message = payload && payload.message
              ? payload.message
              : tm('checkout.generic_error') || t('royalties.checkout.generic_error') || 'Unable to start checkout.';
            setMasteringCheckoutFeedback(message, 'error');
            return;
          }
          masteringRedirecting = true;
          const redirectMessage = tm('checkout.success_redirect') || t('royalties.checkout.success_redirect');
          if (redirectMessage) {
            setMasteringCheckoutFeedback(redirectMessage, 'success');
          }
          window.location.href = payload.url;
        } catch (error) {
          console.error('Mastering checkout error', error);
          setMasteringCheckoutFeedback(tm('checkout.generic_error') || t('royalties.checkout.generic_error') || 'Unable to start checkout.', 'error');
        } finally {
          masteringCheckoutInProgress = false;
          if (!masteringRedirecting) {
            setMasteringCheckoutLoading(button, false);
          }
        }
      }

      function setPublishingCheckoutFeedback(message, status = '') {
        if (!publishingCheckoutFeedback) {
          if (message && status === 'error') {
            console.error('Publishing checkout:', message);
          }
          return;
        }
        publishingCheckoutFeedback.textContent = message || '';
        publishingCheckoutFeedback.classList.remove('error', 'success');
        if (!message) {
          publishingCheckoutFeedback.hidden = true;
          return;
        }
        publishingCheckoutFeedback.hidden = false;
        if (status) {
          publishingCheckoutFeedback.classList.add(status);
        }
      }

      function setPublishingCheckoutLoading(isLoading) {
        if (!publishingCheckoutButton) {
          return;
        }
        const labelElement = publishingCheckoutButton.querySelector('span') || publishingCheckoutButton;
        const defaultLabel = publishingCheckoutButton.dataset.defaultLabel || labelElement.textContent || '';
        if (!publishingCheckoutButton.dataset.defaultLabel && defaultLabel) {
          publishingCheckoutButton.dataset.defaultLabel = defaultLabel;
        }
        if (isLoading) {
          publishingCheckoutButton.classList.add('is-loading');
          publishingCheckoutButton.disabled = true;
          const processingLabel = (publishingI18n.actions && publishingI18n.actions.processing)
            || (DASHBOARD_I18N.royalties && DASHBOARD_I18N.royalties.actions && DASHBOARD_I18N.royalties.actions.processing)
            || 'Processing…';
          if (processingLabel) {
            labelElement.textContent = processingLabel;
          }
        } else {
          publishingCheckoutButton.classList.remove('is-loading');
          publishingCheckoutButton.disabled = false;
          if (publishingCheckoutButton.dataset.defaultLabel) {
            labelElement.textContent = publishingCheckoutButton.dataset.defaultLabel;
          }
        }
      }

      async function startPublishingCheckout(plan) {
        if (!plan || publishingCheckoutInProgress) {
          return;
        }
        publishingCheckoutInProgress = true;
        publishingCheckoutRedirecting = false;
        setPublishingCheckoutFeedback('');
        setPublishingCheckoutLoading(true);
        try {
          const response = await fetch('/create-checkout-session.php', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ plan })
          });
          const responseText = await response.text();
          let payload = null;
          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid publishing checkout payload', error, responseText);
            }
          }
          if (!response.ok || !payload || payload.status !== 'success' || !payload.url) {
            const message = (payload && payload.message)
              || (publishingI18n.checkout && publishingI18n.checkout.generic_error)
              || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.generic_error)
              || (DASHBOARD_I18N.royalties && DASHBOARD_I18N.royalties.checkout && DASHBOARD_I18N.royalties.checkout.generic_error)
              || 'Unable to start checkout.';
            setPublishingCheckoutFeedback(message, 'error');
            return;
          }
          publishingCheckoutRedirecting = true;
          const successMessage = (publishingI18n.checkout && publishingI18n.checkout.success_redirect)
            || (DASHBOARD_I18N.royalties && DASHBOARD_I18N.royalties.checkout && DASHBOARD_I18N.royalties.checkout.success_redirect)
            || '';
          if (successMessage) {
            setPublishingCheckoutFeedback(successMessage, 'success');
          }
          window.location.href = payload.url;
        } catch (error) {
          console.error('Publishing checkout error', error);
          const fallback = (publishingI18n.checkout && publishingI18n.checkout.generic_error)
            || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.generic_error)
            || (DASHBOARD_I18N.royalties && DASHBOARD_I18N.royalties.checkout && DASHBOARD_I18N.royalties.checkout.generic_error)
            || 'Unable to start checkout.';
          setPublishingCheckoutFeedback(fallback, 'error');
        } finally {
          publishingCheckoutInProgress = false;
          if (!publishingCheckoutRedirecting) {
            setPublishingCheckoutLoading(false);
          }
        }
      }

      if (expressFeedback) {
        expressFeedback.hidden = true;
      }

      let expressSelectedOption = '';
      let expressCheckoutInProgress = false;
      let expressCheckoutRedirecting = false;

      function updateExpressOptionContainers() {
        expressOptionContainers.forEach((container) => {
          if (!(container instanceof HTMLElement)) {
            return;
          }
          const optionId = container.dataset.expressOptionId || '';
          container.setAttribute('data-selected', expressSelectedOption === optionId ? 'true' : 'false');
        });
      }

      function updateExpressCheckoutState() {
        const releaseTitle = expressReleaseInput ? expressReleaseInput.value.trim() : '';
        const selectedInput = expressTypeOptions.find((input) => input.checked) || null;
        expressSelectedOption = selectedInput ? selectedInput.value : '';
        updateExpressOptionContainers();
        const plan = selectedInput ? (selectedInput.dataset.plan || '') : '';
        const available = selectedInput ? selectedInput.dataset.available !== '0' : false;
        const priceLabel = selectedInput ? (selectedInput.dataset.price || '') : '';
        const ready = Boolean(releaseTitle && plan && available);
        if (expressCheckoutButton && !expressCheckoutInProgress) {
          if (!expressCheckoutButton.dataset.defaultLabel) {
            expressCheckoutButton.dataset.defaultLabel = expressCheckoutButton.textContent || '';
          }
          let label = expressCheckoutButton.dataset.defaultLabel || '';
          if (selectedInput && priceLabel) {
            if (expressSubmitTemplate) {
              label = expressSubmitTemplate.replace(':price', priceLabel);
            } else {
              label = priceLabel;
            }
          }
          if (!label) {
            label = expressCheckoutButton.dataset.defaultLabel || '';
          }
          if (label) {
            expressCheckoutButton.textContent = label;
          }
          expressCheckoutButton.disabled = !ready;
        } else if (expressCheckoutButton && expressCheckoutInProgress) {
          expressCheckoutButton.disabled = true;
        }
        if (!ready && expressFeedback && !expressCheckoutInProgress) {
          expressFeedback.textContent = '';
          expressFeedback.classList.remove('error', 'success');
          expressFeedback.hidden = true;
        }
        return { plan, releaseTitle, available };
      }

      function setExpressFeedback(message, status = '') {
        if (!expressFeedback) {
          if (message && status === 'error') {
            console.error('Express checkout:', message);
          }
          return;
        }
        expressFeedback.textContent = message || '';
        expressFeedback.classList.remove('error', 'success');
        if (!message) {
          expressFeedback.hidden = true;
          return;
        }
        expressFeedback.hidden = false;
        if (status) {
          expressFeedback.classList.add(status);
        }
      }

      function setExpressCheckoutLoading(isLoading) {
        if (!expressCheckoutButton) {
          return;
        }
        if (isLoading) {
          expressCheckoutButton.disabled = true;
          const processingLabel = expressActionsI18n.processing
            || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.processing)
            || 'Processing…';
          if (processingLabel) {
            expressCheckoutButton.textContent = processingLabel;
          }
        } else {
          updateExpressCheckoutState();
        }
      }

      async function startExpressCheckout() {
        if (expressCheckoutInProgress) {
          return;
        }
        const state = updateExpressCheckoutState();
        const { plan, releaseTitle, available } = state;
        if (!plan || !available) {
          const message = expressFeedbackI18n.missing_format
            || expressFeedbackI18n.missing_fields
            || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.generic_error)
            || 'Unable to start checkout.';
          setExpressFeedback(message, 'error');
          return;
        }
        if (!releaseTitle) {
          const missingTitleMessage = expressFeedbackI18n.missing_fields
            || 'Please enter the release title.';
          setExpressFeedback(missingTitleMessage, 'error');
          return;
        }
        expressCheckoutInProgress = true;
        expressCheckoutRedirecting = false;
        setExpressFeedback('');
        setExpressCheckoutLoading(true);
        const metadata = {};
        if (releaseTitle) {
          metadata.release_title = releaseTitle;
        }
        if (expressSelectedOption) {
          metadata.release_type = expressSelectedOption;
        }
        if (expressFirstNameInput && expressFirstNameInput.value.trim() !== '') {
          metadata.customer_first_name = expressFirstNameInput.value.trim();
        }
        if (expressLastNameInput && expressLastNameInput.value.trim() !== '') {
          metadata.customer_last_name = expressLastNameInput.value.trim();
        }
        if (expressEmailInput && expressEmailInput.value.trim() !== '') {
          metadata.customer_email = expressEmailInput.value.trim();
        }
        try {
          const response = await fetch('/create-checkout-session.php', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ plan, metadata })
          });
          const responseText = await response.text();
          let payload = null;
          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid express checkout payload', error, responseText);
            }
          }
          if (!response.ok || !payload || payload.status !== 'success' || !payload.url) {
            const message = (payload && payload.message)
              || expressFeedbackI18n.error
              || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.generic_error)
              || 'Unable to start checkout.';
            setExpressFeedback(message, 'error');
            return;
          }
          expressCheckoutRedirecting = true;
          const successMessage = expressFeedbackI18n.success
            || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.success_redirect)
            || '';
          if (successMessage) {
            setExpressFeedback(successMessage, 'success');
          }
          window.location.href = payload.url;
        } catch (error) {
          console.error('Express checkout error', error);
          const fallback = expressFeedbackI18n.error
            || (DASHBOARD_I18N.checkout && DASHBOARD_I18N.checkout.generic_error)
            || 'Unable to start checkout.';
          setExpressFeedback(fallback, 'error');
        } finally {
          expressCheckoutInProgress = false;
          if (!expressCheckoutRedirecting) {
            setExpressCheckoutLoading(false);
          }
        }
      }

      function getFocusableElements(container) {
        if (!container) {
          return [];
        }
        return Array.from(container.querySelectorAll(focusableSelector)).filter((element) => {
          if (!(element instanceof HTMLElement)) {
            return false;
          }
          return !element.hasAttribute('disabled') && element.getAttribute('aria-hidden') !== 'true';
        });
      }

      function focusFirstElement(container) {
        const elements = getFocusableElements(container);
        if (elements.length > 0) {
          try {
            elements[0].focus({ preventScroll: true });
          } catch (error) {
            elements[0].focus();
          }
          return;
        }
        if (container instanceof HTMLElement) {
          container.focus();
        }
      }

      function setDashboardPageTriggerActive(pageId, isActive) {
        if (!pageId) {
          return;
        }
        const triggers = dashboardPageTriggerMap.get(pageId);
        if (!triggers) {
          return;
        }
        triggers.forEach((trigger) => {
          if (!(trigger instanceof HTMLElement)) {
            return;
          }
          trigger.classList.toggle('is-active', Boolean(isActive));
          if (isActive) {
            trigger.setAttribute('aria-current', 'page');
          } else {
            trigger.removeAttribute('aria-current');
          }
        });
      }

      function closeDashboardPage() {
        if (!inlineModalsEnabled || !(detailPane instanceof HTMLElement) || !(dashboardContentContainer instanceof HTMLElement)) {
          return;
        }
        if (!activeDashboardPage) {
          return;
        }
        const entry = dashboardPages.get(activeDashboardPage);
        if (entry) {
          const { element, placeholder } = entry;
          if (element instanceof HTMLElement) {
            element.hidden = true;
            element.setAttribute('hidden', 'true');
            if (placeholder && placeholder.parentNode) {
              placeholder.parentNode.insertBefore(element, placeholder);
            }
          }
        }
        while (detailPane.firstChild) {
          detailPane.removeChild(detailPane.firstChild);
        }
        detailPane.hidden = true;
        detailPane.classList.remove('is-active');
        delete detailPane.dataset.activePage;
        if (dashboardContentContainer.classList) {
          dashboardContentContainer.classList.remove('is-inline-open');
        }
        if (overviewPane instanceof HTMLElement) {
          overviewPane.hidden = false;
          overviewPane.classList.add('is-active');
        }
        setDashboardPageTriggerActive(activeDashboardPage, false);
        activeDashboardPage = '';
      }

      function openDashboardPage(pageId) {
        if (!inlineModalsEnabled || !(detailPane instanceof HTMLElement) || !(dashboardContentContainer instanceof HTMLElement)) {
          return;
        }
        if (!pageId) {
          return;
        }
        if (activeDashboardPage === pageId) {
          closeDashboardPage();
          return;
        }
        if (activeModal) {
          closeInlineModal(activeModal);
        }
        closeDashboardPage();
        const entry = dashboardPages.get(pageId);
        if (!entry) {
          return;
        }
        const { element } = entry;
        if (!(element instanceof HTMLElement)) {
          return;
        }
        while (detailPane.firstChild) {
          detailPane.removeChild(detailPane.firstChild);
        }
        detailPane.appendChild(element);
        element.hidden = false;
        element.removeAttribute('hidden');
        detailPane.hidden = false;
        detailPane.classList.add('is-active');
        detailPane.dataset.activePage = pageId;
        delete detailPane.dataset.activeModal;
        if (dashboardContentContainer.classList) {
          dashboardContentContainer.classList.add('is-inline-open');
        }
        if (overviewPane instanceof HTMLElement) {
          overviewPane.hidden = true;
          overviewPane.classList.remove('is-active');
        }
        activeDashboardPage = pageId;
        setDashboardPageTriggerActive(pageId, true);
        resetDashboardScrollPosition();
        if (pageId === 'smartlinks') {
          prepareSmartlinksPage();
        }
        requestAnimationFrame(() => {
          focusFirstElement(element);
        });
      }

      function setModalTriggerActive(modalId, isActive) {
        if (!inlineModalsEnabled || !modalId) {
          return;
        }
        const triggers = modalTriggerMap.get(modalId);
        if (!triggers) {
          return;
        }
        triggers.forEach((trigger) => {
          if (!(trigger instanceof HTMLElement)) {
            return;
          }
          if (trigger.classList.contains('dashboard-sidebar__item')) {
            trigger.classList.toggle('is-active', Boolean(isActive));
            if (isActive) {
              trigger.setAttribute('aria-current', 'page');
            } else {
              trigger.removeAttribute('aria-current');
            }
          }
        });
      }

      function openInlineModal(modal) {
        if (!inlineModalsEnabled || !(modal instanceof HTMLElement)) {
          return;
        }
        closeDashboardPage();
        const content = modal.querySelector('.modal__content');
        if (!(content instanceof HTMLElement)) {
          return;
        }
        if (activeModal && activeModal !== modal) {
          closeInlineModal(activeModal);
        }
        activeModal = modal;
        lastFocusedElement = document.activeElement instanceof HTMLElement ? document.activeElement : null;
        if (!inlineModalPlaceholders.has(content)) {
          const placeholder = document.createComment('modal-inline-placeholder');
          if (content.parentNode) {
            content.parentNode.insertBefore(placeholder, content);
          }
          inlineModalPlaceholders.set(content, placeholder);
        }
        if (detailPane instanceof HTMLElement) {
          while (detailPane.firstChild) {
            detailPane.removeChild(detailPane.firstChild);
          }
          detailPane.appendChild(content);
          detailPane.hidden = false;
          detailPane.classList.add('is-active');
          detailPane.dataset.activeModal = modal.id || '';
        }
        if (overviewPane instanceof HTMLElement) {
          overviewPane.hidden = true;
          overviewPane.classList.remove('is-active');
        }
        if (dashboardContentContainer instanceof HTMLElement) {
          dashboardContentContainer.classList.add('is-inline-open');
        }
        modal.classList.add('is-visible', 'is-open', 'is-inline-open');
        modal.setAttribute('aria-hidden', 'false');
        modal.setAttribute('aria-modal', 'false');
        setModalTriggerActive(modal.id || '', true);
        resetDashboardScrollPosition();
        focusFirstElement(content);
      }

      function closeInlineModal(modal) {
        if (!inlineModalsEnabled || !(modal instanceof HTMLElement)) {
          return;
        }
        const activeId = detailPane instanceof HTMLElement ? detailPane.dataset.activeModal || '' : '';
        const content = detailPane instanceof HTMLElement
          ? detailPane.querySelector('.modal__content')
          : null;
        if (content instanceof HTMLElement) {
          const placeholder = inlineModalPlaceholders.get(content);
          if (placeholder && placeholder.parentNode) {
            placeholder.parentNode.insertBefore(content, placeholder);
          } else {
            modal.appendChild(content);
          }
        }
        if (detailPane instanceof HTMLElement) {
          while (detailPane.firstChild) {
            detailPane.removeChild(detailPane.firstChild);
          }
          detailPane.hidden = true;
          detailPane.classList.remove('is-active');
          delete detailPane.dataset.activeModal;
        }
        if (overviewPane instanceof HTMLElement) {
          overviewPane.hidden = false;
          overviewPane.classList.add('is-active');
        }
        if (dashboardContentContainer instanceof HTMLElement) {
          dashboardContentContainer.classList.remove('is-inline-open');
        }
        setModalTriggerActive(modal.id || activeId, false);
        modal.classList.remove('is-inline-open');
      }

      function updateHeaderOffset() {
        if (!rootElement || !pageHeader) {
          return;
        }
        const offset = pageHeader.offsetHeight || 0;
        rootElement.style.setProperty('--mobile-header-offset', `${offset}px`);
        if (stickyHeaderActive && document.body) {
          document.body.style.setProperty('--page-header-height', `${offset}px`);
        }
      }

      function setStickyHeaderState(isSticky) {
        if (!pageHeader) {
          return;
        }

        const bodyElement = document.body;
        if (!bodyElement) {
          return;
        }

        if (stickyHeaderActive === isSticky) {
          if (isSticky) {
            updateHeaderOffset();
          }
          return;
        }

        stickyHeaderActive = isSticky;

        if (isSticky) {
          pageHeader.classList.add('page-header--sticky');
          bodyElement.classList.add('has-sticky-header');
          bodyElement.style.setProperty('--page-header-height', `${pageHeader.offsetHeight || 0}px`);
        } else {
          pageHeader.classList.remove('page-header--sticky');
          bodyElement.classList.remove('has-sticky-header');
          bodyElement.style.removeProperty('--page-header-height');
        }

        updateHeaderOffset();
      }

      function evaluateStickyHeaderFallback() {
        if (!pageHeader) {
          return;
        }
        const threshold = pageHeaderSentinel ? pageHeaderSentinel.offsetTop : pageHeader.offsetTop;
        const scrollPosition = window.scrollY || window.pageYOffset || 0;
        setStickyHeaderState(scrollPosition > threshold);
      }

      function initializeStickyHeader() {
        if (!pageHeader) {
          return;
        }

        if (dashboardDesign === 'aura') {
          setStickyHeaderState(true);
          return;
        }

        const supportsObserver = typeof IntersectionObserver === 'function' && pageHeaderSentinel instanceof HTMLElement;

        if (supportsObserver) {
          const observer = new IntersectionObserver((entries) => {
            const entry = entries && entries[0];
            if (!entry) {
              return;
            }
            const shouldStick = !entry.isIntersecting && entry.boundingClientRect.top < 0;
            setStickyHeaderState(shouldStick);
          }, { threshold: [0, 1] });
          observer.observe(pageHeaderSentinel);
        } else {
          window.addEventListener('scroll', evaluateStickyHeaderFallback, { passive: true });
          evaluateStickyHeaderFallback();
        }

        if ((window.scrollY || window.pageYOffset || 0) > 0) {
          setStickyHeaderState(true);
        }
      }

      function lockBodyScroll() {
        if (scrollLockCount === 0) {
          scrollLockPosition = window.scrollY || window.pageYOffset || 0;
          const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
          document.body.dataset.scrollLock = String(scrollLockPosition);
          document.body.style.top = `-${scrollLockPosition}px`;
          if (scrollbarWidth > 0) {
            document.body.style.paddingRight = `${scrollbarWidth}px`;
          }
          document.body.classList.add('has-open-modal');
        }
        scrollLockCount += 1;
      }

      function unlockBodyScroll() {
        if (scrollLockCount === 0) {
          return;
        }
        scrollLockCount = Math.max(0, scrollLockCount - 1);
        if (scrollLockCount > 0) {
          return;
        }
        const stored = document.body.dataset.scrollLock;
        document.body.classList.remove('has-open-modal');
        document.body.style.top = '';
        document.body.style.paddingRight = '';
        delete document.body.dataset.scrollLock;
        const fallbackScroll = typeof stored === 'string' && stored !== '' ? Number(stored) : scrollLockPosition;
        if (!Number.isNaN(fallbackScroll)) {
          window.scrollTo(0, fallbackScroll);
        }
        scrollLockPosition = 0;
      }

      function normalizeWheelDelta(event, element) {
        let { deltaY } = event;
        const DOM_DELTA_LINE = 1;
        const DOM_DELTA_PAGE = 2;
        if (event.deltaMode === DOM_DELTA_LINE) {
          const lineHeightValue = getComputedStyle(element).lineHeight;
          const parsedLineHeight = Number.parseFloat(lineHeightValue);
          const fallbackLineHeight = 16;
          const lineHeight = Number.isNaN(parsedLineHeight) ? fallbackLineHeight : parsedLineHeight;
          deltaY *= lineHeight;
        } else if (event.deltaMode === DOM_DELTA_PAGE) {
          deltaY *= element.clientHeight;
        }
        return deltaY;
      }

      function createModalScrollController(modal, content) {
        if (!modal || !content) {
          return;
        }

        let touchStartY = null;

        function getMaxScroll() {
          return content.scrollHeight - content.clientHeight;
        }

        function handleWheel(event) {
          if (!modal.classList.contains('is-open')) {
            return;
          }
          if (!content.contains(event.target)) {
            return;
          }
          const maxScroll = getMaxScroll();
          if (maxScroll <= 0) {
            return;
          }
          const deltaY = normalizeWheelDelta(event, content);
          if (deltaY === 0) {
            return;
          }
          const currentScroll = content.scrollTop;
          const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
          if (nextScroll === currentScroll) {
            return;
          }
          content.scrollTop = nextScroll;
          event.preventDefault();
        }

        function handleTouchStart(event) {
          if (!modal.classList.contains('is-open')) {
            return;
          }
          if (!event.touches || event.touches.length !== 1) {
            return;
          }
          if (!content.contains(event.target)) {
            return;
          }
          touchStartY = event.touches[0].clientY;
        }

        function handleTouchMove(event) {
          if (!modal.classList.contains('is-open')) {
            return;
          }
          if (!event.touches || event.touches.length !== 1) {
            return;
          }
          if (!content.contains(event.target)) {
            return;
          }
          if (touchStartY === null) {
            touchStartY = event.touches[0].clientY;
          }
          const currentY = event.touches[0].clientY;
          const deltaY = touchStartY - currentY;
          if (deltaY === 0) {
            return;
          }
          touchStartY = currentY;
          const maxScroll = getMaxScroll();
          if (maxScroll <= 0) {
            return;
          }
          const currentScroll = content.scrollTop;
          const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
          if (nextScroll === currentScroll) {
            return;
          }
          content.scrollTop = nextScroll;
          event.preventDefault();
        }

        function handleTouchEnd() {
          touchStartY = null;
        }

        content.addEventListener('wheel', handleWheel, { passive: false });
        content.addEventListener('touchstart', handleTouchStart, { passive: true });
        content.addEventListener('touchmove', handleTouchMove, { passive: false });
        content.addEventListener('touchend', handleTouchEnd);
        content.addEventListener('touchcancel', handleTouchEnd);
      }

      function handleProfilePanelWheel(event) {
        if (!panelOpen || !profilePanel) {
          return;
        }
        if (!profilePanel.contains(event.target)) {
          return;
        }

        const activeMenu = event.target.closest('.enhanced-select__menu');
        if (activeMenu && activeMenu.closest('.enhanced-select')?.classList.contains('is-open')) {
          const menuMaxScroll = activeMenu.scrollHeight - activeMenu.clientHeight;
          if (menuMaxScroll > 0) {
            const menuDelta = normalizeWheelDelta(event, activeMenu);
            if ((menuDelta < 0 && activeMenu.scrollTop > 0)
              || (menuDelta > 0 && activeMenu.scrollTop < menuMaxScroll)) {
              return;
            }
          }
        }

        const maxScroll = profilePanel.scrollHeight - profilePanel.clientHeight;
        if (maxScroll <= 0) {
          return;
        }
        const deltaY = normalizeWheelDelta(event, profilePanel);
        if (deltaY === 0) {
          return;
        }
        const currentScroll = profilePanel.scrollTop;
        const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
        if (nextScroll === currentScroll) {
          return;
        }
        profilePanel.scrollTop = nextScroll;
        event.preventDefault();
      }

      function smartlinksModalUsesDynamicLock() {
        return Boolean(smartlinksModal && smartlinksModal.dataset.scrollLock === 'dynamic');
      }

      function setSmartlinksModalScrollLock(shouldLock) {
        if (!smartlinksModalUsesDynamicLock()) {
          return;
        }
        if (shouldLock && !smartlinksModalScrollLockActive) {
          lockBodyScroll();
          smartlinksModalScrollLockActive = true;
        } else if (!shouldLock && smartlinksModalScrollLockActive) {
          smartlinksModalScrollLockActive = false;
          unlockBodyScroll();
        }
      }

      function resetSmartlinksModalScrollState() {
        if (!smartlinksModalUsesDynamicLock()) {
          return;
        }
        smartlinksModalTouchStartY = null;
        if (smartlinksModalScrollLockActive) {
          smartlinksModalScrollLockActive = false;
          unlockBodyScroll();
        }
      }

      function cloudModalUsesDynamicLock() {
        return Boolean(cloudModal && cloudModal.dataset.scrollLock === 'dynamic');
      }

      function setCloudModalScrollLock(shouldLock) {
        if (!cloudModalUsesDynamicLock()) {
          return;
        }
        if (shouldLock && !cloudModalScrollLockActive) {
          lockBodyScroll();
          cloudModalScrollLockActive = true;
        } else if (!shouldLock && cloudModalScrollLockActive) {
          cloudModalScrollLockActive = false;
          unlockBodyScroll();
        }
      }

      function resetCloudModalScrollState() {
        if (!cloudModalUsesDynamicLock()) {
          return;
        }
        cloudModalTouchStartY = null;
        if (cloudModalScrollLockActive) {
          cloudModalScrollLockActive = false;
          unlockBodyScroll();
        }
      }

      function handleCloudModalPointerEnter() {
        if (!cloudModalUsesDynamicLock()) {
          return;
        }
        setCloudModalScrollLock(true);
      }

      function handleCloudModalPointerLeave(event) {
        if (!cloudModalUsesDynamicLock() || !cloudModalContent) {
          return;
        }
        const relatedTarget = event && 'relatedTarget' in event ? event.relatedTarget : null;
        if (relatedTarget && cloudModalContent.contains(relatedTarget)) {
          return;
        }
        setCloudModalScrollLock(false);
      }

      function handleCloudModalWheel(event) {
        if (!cloudModalUsesDynamicLock() || !cloudModal || !cloudModalContent) {
          return;
        }
        if (!cloudModal.classList.contains('is-open')) {
          return;
        }
        if (!cloudModalContent.contains(event.target)) {
          return;
        }
        const maxScroll = cloudModalContent.scrollHeight - cloudModalContent.clientHeight;
        if (maxScroll <= 0) {
          return;
        }
        const deltaY = normalizeWheelDelta(event, cloudModalContent);
        if (deltaY === 0) {
          return;
        }
        const currentScroll = cloudModalContent.scrollTop;
        const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
        if (nextScroll === currentScroll) {
          return;
        }
        cloudModalContent.scrollTop = nextScroll;
        event.preventDefault();
      }

      function handleCloudModalTouchStart(event) {
        if (!cloudModalUsesDynamicLock() || !cloudModal || !cloudModalContent) {
          return;
        }
        if (!cloudModal.classList.contains('is-open')) {
          return;
        }
        if (!event.touches || event.touches.length !== 1) {
          return;
        }
        if (!cloudModalContent.contains(event.target)) {
          return;
        }
        cloudModalTouchStartY = event.touches[0].clientY;
        setCloudModalScrollLock(true);
      }

      function handleCloudModalTouchMove(event) {
        if (!cloudModalUsesDynamicLock() || !cloudModal || !cloudModalContent) {
          return;
        }
        if (!cloudModal.classList.contains('is-open')) {
          return;
        }
        if (!event.touches || event.touches.length !== 1) {
          return;
        }
        if (!cloudModalContent.contains(event.target)) {
          return;
        }
        if (cloudModalTouchStartY === null) {
          cloudModalTouchStartY = event.touches[0].clientY;
        }
        const currentY = event.touches[0].clientY;
        const deltaY = cloudModalTouchStartY - currentY;
        if (deltaY === 0) {
          return;
        }
        cloudModalTouchStartY = currentY;
        const maxScroll = cloudModalContent.scrollHeight - cloudModalContent.clientHeight;
        if (maxScroll <= 0) {
          return;
        }
        const currentScroll = cloudModalContent.scrollTop;
        const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
        if (nextScroll === currentScroll) {
          return;
        }
        cloudModalContent.scrollTop = nextScroll;
        event.preventDefault();
      }

      function handleCloudModalTouchEnd() {
        if (!cloudModalUsesDynamicLock()) {
          return;
        }
        cloudModalTouchStartY = null;
        setCloudModalScrollLock(false);
      }

      function handleSmartlinksModalPointerEnter() {
        setSmartlinksModalScrollLock(true);
      }

      function handleSmartlinksModalPointerLeave(event) {
        if (!smartlinksModalContent) {
          return;
        }
        const relatedTarget = event && 'relatedTarget' in event ? event.relatedTarget : null;
        if (relatedTarget && smartlinksModalContent.contains(relatedTarget)) {
          return;
        }
        setSmartlinksModalScrollLock(false);
      }

      function handleSmartlinksModalWheel(event) {
        if (!smartlinksModal || !smartlinksModalContent) {
          return;
        }
        if (!smartlinksModal.classList.contains('is-open')) {
          return;
        }
        if (!smartlinksModalContent.contains(event.target)) {
          return;
        }
        const maxScroll = smartlinksModalContent.scrollHeight - smartlinksModalContent.clientHeight;
        if (maxScroll <= 0) {
          return;
        }
        const deltaY = normalizeWheelDelta(event, smartlinksModalContent);
        if (deltaY === 0) {
          return;
        }
        const currentScroll = smartlinksModalContent.scrollTop;
        const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
        if (nextScroll === currentScroll) {
          return;
        }
        smartlinksModalContent.scrollTop = nextScroll;
        event.preventDefault();
      }

      function handleSmartlinksModalTouchStart(event) {
        if (!smartlinksModal || !smartlinksModalContent) {
          return;
        }
        if (!smartlinksModal.classList.contains('is-open')) {
          return;
        }
        if (!event.touches || event.touches.length !== 1) {
          return;
        }
        if (!smartlinksModalContent.contains(event.target)) {
          return;
        }
        smartlinksModalTouchStartY = event.touches[0].clientY;
        setSmartlinksModalScrollLock(true);
      }

      function handleSmartlinksModalTouchMove(event) {
        if (!smartlinksModal || !smartlinksModalContent) {
          return;
        }
        if (!smartlinksModal.classList.contains('is-open')) {
          return;
        }
        if (!event.touches || event.touches.length !== 1) {
          return;
        }
        if (!smartlinksModalContent.contains(event.target)) {
          return;
        }
        if (smartlinksModalTouchStartY === null) {
          smartlinksModalTouchStartY = event.touches[0].clientY;
        }
        const currentY = event.touches[0].clientY;
        const deltaY = smartlinksModalTouchStartY - currentY;
        if (deltaY === 0) {
          return;
        }
        smartlinksModalTouchStartY = currentY;
        const maxScroll = smartlinksModalContent.scrollHeight - smartlinksModalContent.clientHeight;
        if (maxScroll <= 0) {
          return;
        }
        const currentScroll = smartlinksModalContent.scrollTop;
        const nextScroll = Math.max(0, Math.min(currentScroll + deltaY, maxScroll));
        if (nextScroll === currentScroll) {
          return;
        }
        smartlinksModalContent.scrollTop = nextScroll;
        event.preventDefault();
      }

      function handleSmartlinksModalTouchEnd() {
        smartlinksModalTouchStartY = null;
        setSmartlinksModalScrollLock(false);
      }

      function updateProfilePanelBodyState() {
        document.body.classList.toggle('profile-panel-open', panelOpen);
      }

      function updateCompanyFieldsVisibility() {
        if (!businessTypeSelect) {
          return;
        }
        const isCompany = businessTypeSelect.value === 'company';
        if (companyFieldsWrapper) {
          if (isCompany) {
            companyFieldsWrapper.removeAttribute('hidden');
            companyFieldsWrapper.setAttribute('aria-hidden', 'false');
          } else {
            companyFieldsWrapper.setAttribute('hidden', 'hidden');
            companyFieldsWrapper.setAttribute('aria-hidden', 'true');
          }
        }
        if (companyFieldsHelper) {
          if (isCompany) {
            companyFieldsHelper.removeAttribute('hidden');
            companyFieldsHelper.setAttribute('aria-hidden', 'false');
          } else {
            companyFieldsHelper.setAttribute('hidden', 'hidden');
            companyFieldsHelper.setAttribute('aria-hidden', 'true');
          }
        }
      }

      function getElementCenter(element) {
        if (!(element instanceof Element)) {
          return null;
        }
        const rect = element.getBoundingClientRect();
        return {
          x: rect.left + rect.width / 2,
          y: rect.top + rect.height / 2,
        };
      }

      function resolveModalOrigin(source) {
        if (!source) {
          return null;
        }
        if (typeof source.x === 'number' && typeof source.y === 'number') {
          return { x: source.x, y: source.y };
        }
        if ('touches' in source && source.touches && source.touches[0]) {
          const touch = source.touches[0];
          return { x: touch.clientX, y: touch.clientY };
        }
        if (typeof source.type === 'string' && source.type.startsWith('key')) {
          // Fall through to element-based origin for keyboard events.
        } else if (typeof source.clientX === 'number' && typeof source.clientY === 'number') {
          const isKeyboardClick = typeof source.detail === 'number' && source.detail === 0;
          if (!isKeyboardClick || source.clientX !== 0 || source.clientY !== 0) {
            return { x: source.clientX, y: source.clientY };
          }
        }
        const possibleElement = source.currentTarget || source.target || source;
        if (possibleElement instanceof Element) {
          return getElementCenter(possibleElement);
        }
        return null;
      }

      function applyModalOrigin(modal, origin) {
        if (!modal) {
          return;
        }
        const viewportWidth = Math.max(window.innerWidth || 0, 1);
        const viewportHeight = Math.max(window.innerHeight || 0, 1);
        if (!origin) {
          modal.style.setProperty('--modal-origin-x', '50%');
          modal.style.setProperty('--modal-origin-y', '50%');
          modal.style.setProperty('--modal-translate-x', '0px');
          modal.style.setProperty('--modal-translate-y', '0px');
          modal.style.setProperty('--modal-scale-start', '0.65');
          return;
        }
        const xPercent = Math.min(100, Math.max(0, (origin.x / viewportWidth) * 100));
        const yPercent = Math.min(100, Math.max(0, (origin.y / viewportHeight) * 100));
        modal.style.setProperty('--modal-origin-x', `${xPercent}%`);
        modal.style.setProperty('--modal-origin-y', `${yPercent}%`);
        const viewportCenterX = viewportWidth / 2;
        const viewportCenterY = viewportHeight / 2;
        const deltaX = origin.x - viewportCenterX;
        const deltaY = origin.y - viewportCenterY;
        const translationIntensity = 0.55;
        const maxTranslation = Math.min(viewportWidth, viewportHeight) * 0.4;
        const translateX = Math.max(-maxTranslation, Math.min(maxTranslation, deltaX * translationIntensity));
        const translateY = Math.max(-maxTranslation, Math.min(maxTranslation, deltaY * translationIntensity));
        modal.style.setProperty('--modal-translate-x', `${translateX}px`);
        modal.style.setProperty('--modal-translate-y', `${translateY}px`);
        const maxDistance = Math.hypot(viewportCenterX, viewportCenterY);
        const distance = Math.min(maxDistance, Math.hypot(deltaX, deltaY));
        const distanceRatio = maxDistance > 0 ? distance / maxDistance : 0;
        const minScale = 0.55;
        const maxScale = 0.72;
        const easedRatio = Math.min(1, Math.max(0, distanceRatio));
        const baseIntensity = 0.85;
        const scaleStart = Math.max(
          minScale,
          maxScale - (maxScale - minScale) * (baseIntensity + (1 - baseIntensity) * easedRatio)
        );
        modal.style.setProperty('--modal-scale-start', scaleStart.toFixed(3));
      }

      function parseAnimationDuration(value) {
        if (!value) {
          return 0;
        }
        const trimmed = String(value).trim();
        if (!trimmed) {
          return 0;
        }
        const [first] = trimmed.split(',');
        const candidate = first ? first.trim() : trimmed;
        if (!candidate) {
          return 0;
        }
        if (candidate.endsWith('ms')) {
          const amount = Number.parseFloat(candidate.slice(0, -2));
          return Number.isFinite(amount) ? amount : 0;
        }
        if (candidate.endsWith('s')) {
          const amount = Number.parseFloat(candidate.slice(0, -1));
          return Number.isFinite(amount) ? amount * 1000 : 0;
        }
        const numeric = Number.parseFloat(candidate);
        return Number.isFinite(numeric) ? numeric : 0;
      }

      function updateAiComposerTempoLabel(value) {
        if (!aiComposerTempoValue) {
          return;
        }
        const template = aiComposerT('tempo.helper_template', ':value BPM target');
        aiComposerTempoValue.textContent = template.replace(':value', String(value));
      }

      function setAiComposerStatus(message = '') {
        if (!aiComposerStatus) {
          return;
        }
        aiComposerStatus.textContent = message || '';
      }

      function setAiComposerError(message = '') {
        if (!aiComposerError) {
          return;
        }
        aiComposerError.textContent = message || '';
      }

      function setAiComposerResultLyrics(text = '') {
        if (!aiComposerResultLyricsContainer || !aiComposerResultLyrics) {
          return;
        }
        if (text && text.trim() !== '') {
          aiComposerResultLyrics.textContent = text;
          aiComposerResultLyricsContainer.hidden = false;
        } else {
          aiComposerResultLyrics.textContent = '';
          aiComposerResultLyricsContainer.hidden = true;
        }
      }

      function setAiComposerPreview(previewUrl = '', jobId = '') {
        if (!aiComposerPreviewSection || !aiComposerAudio) {
          return;
        }
        if (previewUrl) {
          aiComposerPreviewSection.hidden = false;
          if (aiComposerAudio.src !== previewUrl) {
            aiComposerAudio.src = previewUrl;
          }
          if (aiComposerJobLabel) {
            const template = aiComposerT('result.job_label', 'Job #:id');
            aiComposerJobLabel.textContent = jobId ? template.replace(':id', jobId) : '';
          }
        } else {
          try {
            aiComposerAudio.pause();
          } catch (error) {
            // ignore pause errors
          }
          aiComposerAudio.removeAttribute('src');
          aiComposerAudio.load();
          aiComposerPreviewSection.hidden = true;
          if (aiComposerJobLabel) {
            aiComposerJobLabel.textContent = '';
          }
        }
      }

      function refreshAiComposerButtons() {
        if (aiComposerGenerateButton) {
          const defaultLabel = aiComposerGenerateButton.dataset.defaultLabel
            || aiComposerT('lyrics.generate_button', 'Generate lyrics');
          if (!aiComposerGenerateButton.dataset.defaultLabel) {
            aiComposerGenerateButton.dataset.defaultLabel = defaultLabel;
          }
          if (aiComposerState.mode === 'generate') {
            aiComposerGenerateButton.hidden = false;
            aiComposerGenerateButton.disabled = aiComposerIsRequestingLyrics || aiComposerIsSubmitting;
            aiComposerGenerateButton.textContent = aiComposerIsRequestingLyrics
              ? aiComposerT('lyrics.generate_working', 'Working…')
              : aiComposerGenerateButton.dataset.defaultLabel || defaultLabel;
          } else {
            aiComposerGenerateButton.hidden = true;
            aiComposerGenerateButton.disabled = true;
            aiComposerGenerateButton.textContent = aiComposerGenerateButton.dataset.defaultLabel || defaultLabel;
          }
        }

        if (aiComposerSubmitButton) {
          const defaultLabel = aiComposerSubmitButton.dataset.defaultLabel
            || aiComposerT('actions.submit', 'Render with Suno');
          if (!aiComposerSubmitButton.dataset.defaultLabel) {
            aiComposerSubmitButton.dataset.defaultLabel = defaultLabel;
          }
          const requiresLyrics = aiComposerState.mode === 'write';
          const hasLyrics = (aiComposerState.lyrics || '').trim().length > 0;
          aiComposerSubmitButton.disabled = aiComposerIsSubmitting
            || aiComposerIsRequestingLyrics
            || (requiresLyrics && !hasLyrics);
          if (!aiComposerIsSubmitting) {
            aiComposerSubmitButton.textContent = aiComposerSubmitButton.dataset.defaultLabel || defaultLabel;
          }
        }
      }

      function setAiComposerMode(mode) {
        const nextMode = mode === 'write' ? 'write' : 'generate';
        aiComposerState.mode = nextMode;
        aiComposerModeButtons.forEach((button) => {
          const buttonMode = button.dataset.aiMode === 'write' ? 'write' : 'generate';
          const isActive = buttonMode === nextMode;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        });
        if (aiComposerModeToggle) {
          aiComposerModeToggle.dataset.aiActiveMode = nextMode;
        }
        if (aiComposerGenerateButton) {
          aiComposerGenerateButton.hidden = nextMode !== 'generate';
        }
        if (aiComposerLyricsLabelGenerate) {
          aiComposerLyricsLabelGenerate.hidden = nextMode !== 'generate';
        }
        if (aiComposerLyricsLabelWrite) {
          aiComposerLyricsLabelWrite.hidden = nextMode === 'generate';
        }
        if (aiComposerLyricsHelperGenerate) {
          aiComposerLyricsHelperGenerate.hidden = nextMode !== 'generate';
        }
        if (aiComposerLyricsHelperWrite) {
          aiComposerLyricsHelperWrite.hidden = nextMode === 'generate';
        }
        if (aiComposerLyricsInput) {
          const placeholder = nextMode === 'generate'
            ? aiComposerLyricsInput.dataset.aiLyricsPlaceholderGenerate || ''
            : aiComposerLyricsInput.dataset.aiLyricsPlaceholderWrite || '';
          aiComposerLyricsInput.placeholder = placeholder;
        }
        refreshAiComposerButtons();
      }

      function resetAiComposerModal(forceReset = false) {
        if (!aiComposerContainer) {
          return;
        }
        const defaultMode = aiComposerContainer.dataset.aiDefaultMode === 'write' ? 'write' : 'generate';
        const defaultStyle = aiComposerContainer.dataset.aiDefaultStyle || 'hyperpop-euphoria';
        const defaultStylePrompt = aiComposerContainer.dataset.aiDefaultStylePrompt || '';
        const defaultVoice = aiComposerContainer.dataset.aiDefaultVoice || 'lumen-femme';
        const defaultInstrumental = aiComposerContainer.dataset.aiDefaultInstrumental || '';
        const defaultBrief = aiComposerContainer.dataset.aiDefaultBrief || '';
        const defaultDurationValue = Number.parseInt(aiComposerContainer.dataset.aiDefaultDuration || '60', 10);
        const defaultTempoValue = Number.parseInt(aiComposerContainer.dataset.aiDefaultTempo || '115', 10);

        aiComposerState.mode = defaultMode;
        aiComposerState.styleId = defaultStyle;
        aiComposerState.stylePrompt = defaultStylePrompt;
        aiComposerState.voiceId = defaultVoice;
        aiComposerState.instrumental = defaultInstrumental;
        aiComposerState.brief = defaultBrief;
        aiComposerState.duration = Number.isFinite(defaultDurationValue) ? defaultDurationValue : 60;
        aiComposerState.tempo = Number.isFinite(defaultTempoValue) ? defaultTempoValue : 115;
        aiComposerState.lyrics = '';
        aiComposerState.previewUrl = '';
        aiComposerState.jobId = '';

        if (aiComposerBriefInput) {
          aiComposerBriefInput.value = defaultBrief;
        }
        if (aiComposerLyricsInput) {
          aiComposerLyricsInput.value = '';
          const placeholder = defaultMode === 'generate'
            ? aiComposerLyricsInput.dataset.aiLyricsPlaceholderGenerate || ''
            : aiComposerLyricsInput.dataset.aiLyricsPlaceholderWrite || '';
          aiComposerLyricsInput.placeholder = placeholder;
        }
        if (aiComposerInstrumentalInput) {
          aiComposerInstrumentalInput.value = defaultInstrumental;
        }

        aiComposerInstrumentButtons.forEach((button) => {
          const value = button.dataset.aiInstrumentChip || '';
          button.classList.toggle('is-active', value === defaultInstrumental);
        });

        aiComposerStyleButtons.forEach((button) => {
          const value = button.dataset.aiStyle || '';
          const isActive = value === defaultStyle;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        });
        if (aiComposerStyleHelper) {
          aiComposerStyleHelper.textContent = defaultStylePrompt;
        }

        aiComposerVoiceButtons.forEach((button) => {
          const value = button.dataset.aiVoice || '';
          const isActive = value === defaultVoice;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        });

        aiComposerDurationButtons.forEach((button) => {
          const value = Number.parseInt(button.dataset.aiDuration || '0', 10);
          const isActive = Number.isFinite(value) && value === aiComposerState.duration;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-pressed', isActive ? 'true' : 'false');
        });

        if (aiComposerTempoSlider) {
          aiComposerTempoSlider.value = String(aiComposerState.tempo);
        }
        updateAiComposerTempoLabel(aiComposerState.tempo);

        setAiComposerResultLyrics('');
        setAiComposerPreview('', '');
        setAiComposerStatus(
          aiComposerT(
            'status.default',
            'Generation uses your Suno credits. Jobs appear in the Studio timeline automatically once ready.'
          )
        );
        setAiComposerError('');

        aiComposerIsRequestingLyrics = false;
        aiComposerIsSubmitting = false;

        if (aiComposerGenerateButton) {
          const defaultLabel = aiComposerT('lyrics.generate_button', 'Generate lyrics');
          aiComposerGenerateButton.dataset.defaultLabel = defaultLabel;
          aiComposerGenerateButton.textContent = defaultLabel;
        }
        if (aiComposerSubmitButton) {
          const defaultLabel = aiComposerT('actions.submit', 'Render with Suno');
          aiComposerSubmitButton.dataset.defaultLabel = defaultLabel;
          aiComposerSubmitButton.textContent = defaultLabel;
        }

        setAiComposerMode(defaultMode);

        if (aiComposerModalContent && forceReset) {
          aiComposerModalContent.scrollTop = 0;
        }
        refreshAiComposerButtons();
      }

      async function aiComposerRequest(body) {
        const endpoint = aiComposerContainer ? aiComposerContainer.dataset.aiEndpoint || '/ai-composer.php' : '/ai-composer.php';
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'same-origin',
          body: JSON.stringify(body),
        });
        const text = await response.text();
        let payload = {};
        if (text) {
          try {
            payload = JSON.parse(text);
          } catch (error) {
            payload = {};
          }
        }
        if (!response.ok) {
          const fallback = body && body.action === 'lyrics'
            ? aiComposerT('errors.lyrics', 'Unable to reach lyric service.')
            : aiComposerT('errors.generic', 'Unable to reach Suno.');
          const message = typeof payload.message === 'string' && payload.message ? payload.message : fallback;
          throw new Error(message);
        }
        return payload;
      }

      async function handleAiComposerLyrics() {
        if (!aiComposerContainer || aiComposerIsRequestingLyrics || aiComposerIsSubmitting) {
          return;
        }
        if (aiComposerBriefInput) {
          aiComposerState.brief = aiComposerBriefInput.value;
        }
        aiComposerIsRequestingLyrics = true;
        setAiComposerError('');
        setAiComposerStatus(aiComposerT('status.lyrics_processing', 'Calling Suno lyricist…'));
        refreshAiComposerButtons();

        try {
          const payload = {
            action: 'lyrics',
            brief: aiComposerState.brief,
            stylePrompt: aiComposerState.stylePrompt,
            voice: aiComposerState.voiceId,
          };
          const data = await aiComposerRequest(payload);
          const lyrics = typeof data.lyrics === 'string' ? data.lyrics : '';
          if (lyrics) {
            aiComposerState.lyrics = lyrics;
            if (aiComposerLyricsInput) {
              aiComposerLyricsInput.value = lyrics;
            }
            setAiComposerResultLyrics(lyrics);
            setAiComposerStatus(aiComposerT('status.lyrics_ready', 'Lyric draft ready — feel free to tweak before rendering.'));
          } else {
            setAiComposerStatus(aiComposerT('status.lyrics_complete', 'Lyric request completed — check fields for AI suggestions.'));
          }
        } catch (error) {
          const message = error instanceof Error
            ? error.message
            : aiComposerT('errors.lyrics', 'Unable to reach lyric service.');
          setAiComposerError(message);
          setAiComposerStatus('');
        } finally {
          aiComposerIsRequestingLyrics = false;
          refreshAiComposerButtons();
        }
      }

      async function handleAiComposerSubmit() {
        if (!aiComposerContainer || aiComposerIsSubmitting) {
          return;
        }
        if (aiComposerState.mode === 'write' && (!aiComposerState.lyrics || aiComposerState.lyrics.trim() === '')) {
          return;
        }
        if (aiComposerBriefInput) {
          aiComposerState.brief = aiComposerBriefInput.value;
        }
        if (aiComposerLyricsInput) {
          aiComposerState.lyrics = aiComposerLyricsInput.value;
        }
        aiComposerIsSubmitting = true;
        setAiComposerError('');
        setAiComposerStatus(aiComposerT('status.processing', 'Orchestrating your track with Suno…'));
        if (aiComposerSubmitButton) {
          const processingLabel = aiComposerT('actions.submitting', 'Generating…');
          aiComposerSubmitButton.textContent = processingLabel;
        }
        refreshAiComposerButtons();

        try {
          const payload = {
            action: 'generate',
            mode: aiComposerState.mode,
            lyrics: aiComposerState.lyrics,
            brief: aiComposerState.brief,
            styleId: aiComposerState.styleId,
            stylePrompt: aiComposerState.stylePrompt,
            instrumental: aiComposerState.instrumental,
            voice: aiComposerState.voiceId,
            duration: aiComposerState.duration,
            tempo: aiComposerState.tempo,
          };
          const data = await aiComposerRequest(payload);
          const previewUrl = typeof data.previewUrl === 'string' ? data.previewUrl : '';
          const lyrics = typeof data.lyrics === 'string' ? data.lyrics : '';
          const jobId = typeof data.jobId === 'string' ? data.jobId : '';
          if (lyrics) {
            aiComposerState.lyrics = lyrics;
            if (aiComposerLyricsInput) {
              aiComposerLyricsInput.value = lyrics;
            }
            setAiComposerResultLyrics(lyrics);
          }
          aiComposerState.previewUrl = previewUrl;
          aiComposerState.jobId = jobId;
          setAiComposerPreview(previewUrl, jobId);
          setAiComposerStatus(aiComposerT('status.queued', 'Track request queued — we will stream the preview once ready.'));
        } catch (error) {
          const message = error instanceof Error
            ? error.message
            : aiComposerT('errors.generic', 'Unable to reach Suno.');
          setAiComposerError(message);
          setAiComposerStatus('');
        } finally {
          aiComposerIsSubmitting = false;
          refreshAiComposerButtons();
        }
      }

      const DEFAULT_MODAL_ANIMATION_DURATION = 320;

      function getModalAnimationDuration(modal) {
        if (!modal || typeof window === 'undefined' || typeof window.getComputedStyle !== 'function') {
          return DEFAULT_MODAL_ANIMATION_DURATION;
        }
        const computedStyle = window.getComputedStyle(modal);
        if (!computedStyle) {
          return DEFAULT_MODAL_ANIMATION_DURATION;
        }
        const variableDuration = parseAnimationDuration(computedStyle.getPropertyValue('--modal-animation-duration'));
        if (variableDuration > 0) {
          return variableDuration;
        }
        const transitionDuration = parseAnimationDuration(computedStyle.transitionDuration || '');
        if (transitionDuration > 0) {
          return transitionDuration;
        }
        return DEFAULT_MODAL_ANIMATION_DURATION;
      }

      function openModal(modal, originSource = null) {
        if (!modal) {
          return;
        }
        const forceOverlay = modal instanceof HTMLElement && modal.dataset.modalInline === 'overlay';
        if (inlineModalsEnabled && modal instanceof HTMLElement && !forceOverlay) {
          openInlineModal(modal);
          return;
        }
        applyModalOrigin(modal, resolveModalOrigin(originSource));
        activeModal = modal;
        lastFocusedElement = document.activeElement instanceof HTMLElement ? document.activeElement : null;
        if (!modal.classList.contains('is-visible')) {
          modal.classList.add('is-visible');
        }
        if (!modal.classList.contains('is-open')) {
          if (typeof window !== 'undefined' && typeof window.requestAnimationFrame === 'function') {
            const frameId = window.requestAnimationFrame(() => {
              modal.classList.add('is-open');
              if (modal.dataset) {
                delete modal.dataset.modalOpeningFrameId;
              }
            });
            if (modal.dataset) {
              modal.dataset.modalOpeningFrameId = String(frameId);
            }
          } else {
            modal.classList.add('is-open');
            if (modal.dataset) {
              delete modal.dataset.modalOpeningFrameId;
            }
          }
        }
        modal.setAttribute('aria-hidden', 'false');
        modal.setAttribute('aria-modal', 'true');
        if (modal === masteringModal && masteringModalContent && masteringPlayer) {
          requestAnimationFrame(() => {
            updateMasteringPlayerOffset();
            evaluateMasteringPlayerSticky();
          });
        }
        const scrollLockBehavior = modal.dataset.scrollLock || 'always';
        if (scrollLockBehavior === 'dynamic') {
          if (modal === smartlinksModal) {
            resetSmartlinksModalScrollState();
          } else if (modal === cloudModal) {
            resetCloudModalScrollState();
          }
        } else {
          lockBodyScroll();
        }
        focusFirstElement(modal);
      }

      function closeModal() {
        if (!activeModal) {
          return;
        }
        const modalToClose = activeModal;
        if (modalToClose.dataset && modalToClose.dataset.modalOpeningFrameId) {
          const frameId = Number.parseInt(modalToClose.dataset.modalOpeningFrameId, 10);
          if (!Number.isNaN(frameId) && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {
            window.cancelAnimationFrame(frameId);
          }
          delete modalToClose.dataset.modalOpeningFrameId;
        }
        const returnFocus = lastFocusedElement;
        modalToClose.classList.remove('is-open');
        modalToClose.setAttribute('aria-hidden', 'true');
        modalToClose.setAttribute('aria-modal', 'false');

        const finalizeClose = () => {
          if (modalToClose === smartlinksModal) {
            resetSmartlinksModalScrollState();
          } else if (modalToClose === cloudModal) {
            resetCloudModalScrollState();
          }
          modalToClose.classList.remove('is-visible');
          checkoutInProgress = false;
          redirectingToCheckout = false;
          setCheckoutLoading(false);
          setCheckoutFeedback('');
          if (modalToClose === masteringModal) {
            masteringCheckoutInProgress = false;
            masteringRedirecting = false;
            resetMasteringModal(true);
          } else if (modalToClose === aiComposerModal) {
            resetAiComposerModal(true);
          } else if (modalToClose === smartlinksModal) {
            resetSmartlinkFormState();
          } else if (modalToClose === userDetailModal) {
            resetUserDetailModal();
          } else if (modalToClose === musicDistributionModal) {
            setMusicDistributionFeedback('');
            setMusicDistributionButtonState('default');
          }
          unlockBodyScroll();
          activeModal = null;
          if (returnFocus && typeof returnFocus.focus === 'function') {
            try {
              returnFocus.focus({ preventScroll: true });
            } catch (error) {
              returnFocus.focus();
            }
          }
        };

        const shouldCloseInline = inlineModalsEnabled
          && modalToClose instanceof HTMLElement
          && modalToClose.classList.contains('is-inline-open');
        if (shouldCloseInline) {
          closeInlineModal(modalToClose);
          finalizeClose();
          return;
        }

        const animationDuration = getModalAnimationDuration(modalToClose);
        const prefersReducedMotion = typeof window !== 'undefined'
          && typeof window.matchMedia === 'function'
          && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
        const shouldWaitForAnimation = modalToClose.classList.contains('is-visible')
          && animationDuration > 0
          && !prefersReducedMotion;

        if (!shouldWaitForAnimation) {
          finalizeClose();
          return;
        }

        let finished = false;
        let fallbackTimer = 0;

        function completeClose() {
          if (finished) {
            return;
          }
          finished = true;
          if (fallbackTimer) {
            window.clearTimeout(fallbackTimer);
          }
          modalToClose.removeEventListener('transitionend', handleTransitionEnd);
          modalToClose.removeEventListener('transitioncancel', handleTransitionEnd);
          finalizeClose();
        }

        function handleTransitionEnd(event) {
          if (event.target !== modalToClose) {
            return;
          }
          completeClose();
        }

        modalToClose.addEventListener('transitionend', handleTransitionEnd);
        modalToClose.addEventListener('transitioncancel', handleTransitionEnd);
        fallbackTimer = window.setTimeout(completeClose, animationDuration + 50);
      }

      function setCheckoutFeedback(message = '', status = '') {
        if (!planFeedback) {
          return;
        }
        planFeedback.textContent = message || '';
        planFeedback.classList.remove('error', 'success');
        if (status) {
          planFeedback.classList.add(status);
        }
      }

      function setCheckoutLoading(isLoading) {
        if (!planButton) {
          return;
        }
        planButton.classList.toggle('is-loading', Boolean(isLoading));
        planButton.disabled = Boolean(isLoading);
        const defaultLabel = planButton.dataset.defaultLabel || planButton.textContent || '';
        if (!planButton.dataset.defaultLabel) {
          planButton.dataset.defaultLabel = defaultLabel;
        }
        if (isLoading) {
          const processing = t('royalties.actions.processing') || t('admin.feedback.processing') || 'Processing…';
          if (processing) {
            planButton.textContent = processing;
          }
        } else if (defaultLabel) {
          planButton.textContent = defaultLabel;
        }
      }

      function updatePlan(plan) {
        const data = getPlanData(plan);
        if (!data) {
          return;
        }
        currentPlan = plan;
        planSwitchButtons.forEach((button) => {
          const buttonPlan = button.dataset.planOption;
          const isActive = buttonPlan === plan;
          button.classList.toggle('is-active', isActive);
          button.setAttribute('aria-selected', isActive ? 'true' : 'false');
        });
        if (planAmountMain) {
          planAmountMain.textContent = data.price_main || '';
        }
        if (planAmountDecimal) {
          planAmountDecimal.textContent = data.price_decimal || '';
        }
        if (planCurrency) {
          planCurrency.textContent = data.currency || '';
        }
        if (planFrequency) {
          planFrequency.textContent = data.frequency || '';
        }
        if (planNote) {
          planNote.textContent = data.note || '';
        }
        if (planLabel) {
          planLabel.textContent = data.label || '';
        }
        if (planTagline) {
          planTagline.textContent = data.tagline || '';
        }
        if (planButton) {
          const label = data.cta || planButton.dataset.defaultLabel || planButton.textContent || '';
          planButton.textContent = label;
          planButton.dataset.defaultLabel = label;
          planButton.dataset.plan = plan;
        }
      }

      async function startCheckout(plan) {
        if (!plan || checkoutInProgress) {
          return;
        }
        checkoutInProgress = true;
        redirectingToCheckout = false;
        setCheckoutFeedback('');
        setCheckoutLoading(true);
        try {
          const response = await fetch('/create-checkout-session.php', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ plan })
          });

          const responseText = await response.text();
          let payload = null;

          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (error) {
              console.error('Invalid checkout payload', error, responseText);
            }
          }

          if (!response.ok || !payload || payload.status !== 'success' || !payload.url) {
            const message = payload && payload.message
              ? payload.message
              : (t('royalties.checkout.generic_error') || 'Unable to start checkout.');
            setCheckoutFeedback(message, 'error');
            return;
          }

          redirectingToCheckout = true;
          const successMessage = t('royalties.checkout.success_redirect');
          if (successMessage) {
            setCheckoutFeedback(successMessage, 'success');
          }
          window.location.href = payload.url;
        } catch (error) {
          console.error('Stripe checkout error', error);
          setCheckoutFeedback(t('royalties.checkout.generic_error') || 'Unable to start checkout.', 'error');
        } finally {
          checkoutInProgress = false;
          if (!redirectingToCheckout) {
            setCheckoutLoading(false);
          }
        }
      }

      function updateNotificationsView() {
        if (!notificationsPanel) {
          return;
        }
        const items = Array.isArray(notificationsConfig.items) ? notificationsConfig.items : [];
        if (notificationsList) {
          notificationsList.hidden = items.length === 0;
        }
        if (notificationsEmpty) {
          notificationsEmpty.hidden = items.length !== 0;
        }
        if (notificationsBadge) {
          if (items.length === 0) {
            notificationsBadge.hidden = true;
            notificationsBadge.textContent = '';
          } else {
            notificationsBadge.hidden = false;
            notificationsBadge.textContent = String(items.length);
          }
        }
      }

      function updateNotificationAutomationsState() {
        const enabled = notificationsEnabledInput ? notificationsEnabledInput.checked : true;
        if (notificationAutomationsGroup) {
          notificationAutomationsGroup.dataset.notificationsEnabled = enabled ? '1' : '0';
        }
        if (notificationsProfileReminderInput) {
          notificationsProfileReminderInput.disabled = !enabled;
          if (!enabled) {
            notificationsProfileReminderInput.checked = false;
          }
        }
        if (notificationsArea) {
          notificationsArea.style.display = enabled ? '' : 'none';
        }
        if (!enabled) {
          closeNotificationsPanel();
        }
        notificationsConfig.enabled = enabled;
      }

      function setNotificationsPanel(open) {
        if (!notificationsPanel || !notificationsToggleButton) {
          return;
        }
        notificationsOpen = open;
        notificationsPanel.classList.toggle('open', open);
        notificationsPanel.setAttribute('aria-hidden', open ? 'false' : 'true');
        notificationsPanel.setAttribute('aria-modal', open ? 'true' : 'false');
        notificationsToggleButton.setAttribute('aria-expanded', open ? 'true' : 'false');

        if (open) {
          notificationsLastTrigger = document.activeElement instanceof HTMLElement
            ? document.activeElement
            : notificationsToggleButton;
          requestAnimationFrame(() => {
            const focusTarget = notificationsPanel.querySelector('[data-notifications-initial-focus]') || notificationsPanel;
            if (focusTarget && typeof focusTarget.focus === 'function') {
              try {
                focusTarget.focus({ preventScroll: true });
              } catch (error) {
                focusTarget.focus();
              }
            }
          });
        } else if (notificationsLastTrigger && typeof notificationsLastTrigger.focus === 'function') {
          try {
            notificationsLastTrigger.focus({ preventScroll: true });
          } catch (error) {
            notificationsLastTrigger.focus();
          }
        }
      }

      function toggleNotificationsPanel() {
        setNotificationsPanel(!notificationsOpen);
      }

      function closeNotificationsPanel() {
        if (notificationsOpen) {
          setNotificationsPanel(false);
        }
      }

      function setPanel(open) {
        if (!profilePanel || !profileToggle) {
          return;
        }
        panelOpen = open;
        updateProfilePanelBodyState();
        profilePanel.setAttribute('aria-modal', open ? 'true' : 'false');
        profilePanel.classList.toggle('open', open);
        profileToggle.setAttribute('aria-expanded', open ? 'true' : 'false');

        if (open) {
          if (notificationsOpen) {
            closeNotificationsPanel();
          }
          updateHeaderOffset();
          const focusTarget = profilePanel.querySelector('[data-initial-focus]') || profilePanelTitle;
          if (focusTarget && typeof focusTarget.focus === 'function') {
            requestAnimationFrame(() => {
              try {
                focusTarget.focus({ preventScroll: true });
              } catch (error) {
                focusTarget.focus();
              }
              if (focusTarget instanceof HTMLInputElement || focusTarget instanceof HTMLTextAreaElement) {
                try {
                  const length = focusTarget.value.length;
                  focusTarget.setSelectionRange(length, length);
                } catch (error) {
                  // Ignore selection range errors.
                }
              }
            });
          }
        }
      }

      function handleViewportChange() {
        updateHeaderOffset();
        if (!profilePanel || !profileToggle) {
          return;
        }
        updateProfilePanelBodyState();
        if (!smallScreenQuery.matches) {
          return;
        }
        if (panelOpen) {
          return;
        }
        profilePanel.classList.remove('open');
        profilePanel.setAttribute('aria-modal', 'false');
        profileToggle.setAttribute('aria-expanded', 'false');
      }

      function revokePreviewUrl() {
        if (previewObjectUrl) {
          URL.revokeObjectURL(previewObjectUrl);
          previewObjectUrl = null;
        }
      }

      function showFeedback(message, isError = false) {
        if (!profileFeedback) {
          return;
        }
        profileFeedback.textContent = message;
        profileFeedback.classList.toggle('error', Boolean(isError));
      }

      function showAdminFeedback(message, isError = false) {
        if (!adminFeedback) {
          return;
        }
        adminFeedback.textContent = message || '';
        adminFeedback.classList.toggle('error', Boolean(isError));
      }

      function ensurePreviewImageElement() {
        if (!avatarPreviewContent) {
          return null;
        }
        let img = avatarPreviewContent.querySelector('#avatarPreviewImage');
        if (!img) {
          img = document.createElement('img');
          img.id = 'avatarPreviewImage';
          avatarPreviewContent.innerHTML = '';
          avatarPreviewContent.appendChild(img);
        }
        const altText = t('profile.preview_alt') || 'Profile photo preview';
        if (img.alt !== altText) {
          img.alt = altText;
        }
        return img;
      }

      function ensurePreviewInitialElement(initial) {
        if (!avatarPreviewContent) {
          return null;
        }
        let span = avatarPreviewContent.querySelector('#avatarPreviewInitial');
        if (!span) {
          span = document.createElement('span');
          span.id = 'avatarPreviewInitial';
          avatarPreviewContent.innerHTML = '';
          avatarPreviewContent.appendChild(span);
        }
        span.textContent = initial;
        return span;
      }

      function applyAvatarInitial(initial, color) {
        if (!profileAvatar) {
          return;
        }
        profileAvatar.style.setProperty('--avatar-color', color);
        profileAvatar.textContent = initial;
      }

      function applyAvatarImage(url, color) {
        if (!profileAvatar) {
          return;
        }
        profileAvatar.style.setProperty('--avatar-color', color);
        let img = profileAvatar.querySelector('img');
        if (!img) {
          profileAvatar.innerHTML = '';
          img = document.createElement('img');
          profileAvatar.appendChild(img);
        }
        const altText = t('profile.photo_alt') || 'Profile photo';
        if (img.alt !== altText) {
          img.alt = altText;
        }
        img.src = url;
      }

      function updatePreviewWithImage(url, color) {
        if (!avatarPreview) {
          return;
        }
        avatarPreview.dataset.hasImage = 'true';
        avatarPreview.style.setProperty('--avatar-color', color);
        const img = ensurePreviewImageElement();
        if (img) {
          img.src = url;
        }
        if (avatarRemoveButton) {
          avatarRemoveButton.classList.remove('hidden');
        }
      }

      function updatePreviewWithInitial(initial, color) {
        if (!avatarPreview) {
          return;
        }
        avatarPreview.dataset.hasImage = 'false';
        avatarPreview.dataset.initial = initial;
        avatarPreview.style.setProperty('--avatar-color', color);
        ensurePreviewInitialElement(initial);
        if (avatarRemoveButton) {
          avatarRemoveButton.classList.add('hidden');
        }
      }

      function resetAvatarInput() {
        pendingAvatarFile = null;
        if (avatarInput) {
          avatarInput.value = '';
        }
      }

      async function handleAdminAction(container, actionButton) {
        const userId = Number(container.dataset.userId || '0');
        const action = actionButton.dataset.action;

        if (!userId || !action) {
          return;
        }

        const buttons = Array.from(container.querySelectorAll('button'));
        const initialLabels = new Map();
        buttons.forEach((button) => {
          initialLabels.set(button, button.textContent || '');
          button.disabled = true;
        });

          showAdminFeedback(t('admin.feedback.processing'));

        let labelUpdated = false;

        try {
          const response = await fetch('/admin-user-action.php', {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              action,
              user_id: userId
            })
          });

          const responseText = await response.text();
          let payload = null;

          if (responseText) {
            try {
              payload = JSON.parse(responseText);
            } catch (parseError) {
              console.error(t('js.unexpected_admin') || 'Unexpected response from the admin endpoint.', parseError, responseText);
            }
          }

          if (payload && payload.reason === 'blocked') {
            window.location.href = '/blocked.php';
            return;
          }

          if (!response.ok || !payload || payload.status !== 'success') {
            const messages = [];
            if (payload && payload.errors) {
              Object.values(payload.errors).forEach((value) => {
                messages.push(String(value));
              });
            }
            const fallback = payload && payload.message ? String(payload.message) : '';
            showAdminFeedback(messages.join(' ') || fallback || t('admin.feedback.error'), true);
            return;
          }

          if (action === 'impersonate') {
            const redirectUrl = payload && typeof payload.redirect === 'string' && payload.redirect !== ''
              ? payload.redirect
              : '/dashboard.php';
            window.location.href = redirectUrl || '/dashboard.php';
            return;
          }

          if (action === 'delete') {
            const row = container.closest('tr');
            if (row) {
              row.remove();
            }
            if (adminTableBody && adminTableBody.querySelectorAll('tr').length === 0) {
              const emptyRow = document.createElement('tr');
              const emptyCell = document.createElement('td');
              const headerCount = (adminTableBody.closest('table')?.querySelectorAll('thead th').length) || 1;
              emptyCell.colSpan = headerCount;
              emptyCell.textContent = t('admin.empty');
              emptyRow.appendChild(emptyCell);
              adminTableBody.appendChild(emptyRow);
            }
            labelUpdated = true;
          } else if (payload.user) {
            const isBlocked = Boolean(payload.user.is_blocked);
            container.dataset.isBlocked = isBlocked ? '1' : '0';
            const toggleButton = container.querySelector('.admin-action--toggle');
            if (toggleButton) {
              toggleButton.dataset.action = isBlocked ? 'unblock' : 'block';
              toggleButton.textContent = isBlocked ? t('admin.actions.unblock') : t('admin.actions.block');
              labelUpdated = true;
            }

            const row = container.closest('tr');
            if (row) {
              const statusStack = row.querySelector('.status-stack');
              if (statusStack) {
                let blockedPill = statusStack.querySelector('.status-pill--danger');
                if (isBlocked) {
                  if (!blockedPill) {
                    blockedPill = document.createElement('span');
                    blockedPill.className = 'status-pill status-pill--danger';
                    blockedPill.textContent = t('admin.status.blocked');
                    statusStack.appendChild(blockedPill);
                  }
                } else if (blockedPill) {
                  blockedPill.remove();
                }
              }
              const detailTrigger = row.querySelector('[data-user-detail-trigger]');
              if (detailTrigger) {
                const statusParts = [];
                const verifiedLabel = payload.user.is_verified ? t('admin.status.verified') : t('admin.status.pending');
                if (verifiedLabel) {
                  statusParts.push(verifiedLabel);
                }
                if (payload.user.is_blocked) {
                  const blockedLabel = t('admin.status.blocked');
                  if (blockedLabel) {
                    statusParts.push(blockedLabel);
                  }
                }
                if (payload.user.is_super_admin) {
                  const superLabel = t('admin.status.super_admin');
                  if (superLabel) {
                    statusParts.push(superLabel);
                  }
                }
                detailTrigger.setAttribute('data-user-status-label', statusParts.filter(Boolean).join(' • '));
              }
            }
          }

          showAdminFeedback(payload.message || t('admin.feedback.success'));
        } catch (error) {
          console.error(error);
          showAdminFeedback(t('admin.feedback.error'), true);
        } finally {
          buttons.forEach((button) => {
            if (!document.body.contains(button)) {
              return;
            }
            if (!labelUpdated && initialLabels.has(button)) {
              button.textContent = initialLabels.get(button) || '';
            }
            button.disabled = false;
          });
        }
      }

      async function compressImage(file) {
        const maxSize = 512;
        const imageDataUrl = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = () => reject(new Error(t('js.read_file_error')));
          reader.readAsDataURL(file);
        });

        const imageElement = await new Promise((resolve, reject) => {
          const img = new Image();
          img.onload = () => resolve(img);
          img.onerror = () => reject(new Error(t('js.load_image_error')));
          img.src = imageDataUrl;
        });

        const { naturalWidth: width, naturalHeight: height } = imageElement;
        const scale = Math.min(maxSize / width, maxSize / height, 1);
        const canvas = document.createElement('canvas');
        canvas.width = Math.max(1, Math.round(width * scale));
        canvas.height = Math.max(1, Math.round(height * scale));
        const context = canvas.getContext('2d');

        if (!context) {
          throw new Error(t('js.process_image_error'));
        }

        context.drawImage(imageElement, 0, 0, canvas.width, canvas.height);

        const blob = await new Promise((resolve, reject) => {
          canvas.toBlob((result) => {
            if (result) {
              resolve(result);
            } else {
              reject(new Error(t('js.compress_image_error')));
            }
          }, 'image/jpeg', 0.85);
        });

        return new File([blob], 'avatar.jpg', { type: 'image/jpeg', lastModified: Date.now() });
      }

      if (expressForm) {
        expressForm.addEventListener('submit', (event) => {
          event.preventDefault();
        });
      }

      if (expressReleaseInput) {
        expressReleaseInput.addEventListener('input', () => {
          if (!expressCheckoutInProgress) {
            updateExpressCheckoutState();
          }
        });
      }

      expressTypeOptions.forEach((input) => {
        input.addEventListener('change', () => {
          if (!expressCheckoutInProgress) {
            updateExpressCheckoutState();
          }
        });
      });

      if (expressCheckoutButton) {
        expressCheckoutButton.addEventListener('click', () => {
          startExpressCheckout();
        });
      }

      updateExpressCheckoutState();

      if (smartlinkForm) {
        smartlinkForm.addEventListener('submit', handleSmartlinkSubmit);
      }

      if (smartlinkCopyButton) {
        smartlinkCopyButton.addEventListener('click', handleSmartlinkCopy);
      }

      if (smartlinkSlugInput) {
        smartlinkSlugInput.addEventListener('blur', () => {
          smartlinkSlugInput.value = slugify(smartlinkSlugInput.value);
        });
      }

      smartlinksTabs.forEach((tab) => {
        tab.addEventListener('click', () => {
          const view = tab.dataset.smartlinksTab || 'create';
          setSmartlinksView(view);
          if (view === 'analytics') {
            ensureActiveSmartlink();
            setActiveSmartlink(activeSmartlinkId);
          }
        });
      });

      if (smartlinkHistoryList) {
        smartlinkHistoryList.addEventListener('click', (event) => {
          const deleteButton = event.target.closest('[data-smartlink-history-delete]');
          if (deleteButton) {
            const id = deleteButton.dataset.smartlinkId || '';
            const link = smartlinks.find((item) => item.id === id) || null;
            if (!id || !link) {
              return;
            }
            const template = smartlinkTranslate('history.confirm_delete', 'Delete the smartlink ":name"?');
            const message = template.replace(':name', link.displayName || link.slug);
            if (window.confirm(message)) {
              const removed = deleteSmartlink(id);
              if (removed) {
                const success = smartlinkTranslate('history.deleted', 'Smartlink deleted.');
                setSmartlinkFeedback(success, 'success');
              }
            }
            return;
          }
          const analyticsButton = event.target.closest('[data-smartlink-history-analytics]');
          if (!analyticsButton) {
            return;
          }
          const id = analyticsButton.dataset.smartlinkId;
          if (!id) {
            return;
          }
          setSmartlinksView('analytics');
          setActiveSmartlink(id);
        });
      }

      if (smartlinkAnalyticsList) {
        smartlinkAnalyticsList.addEventListener('click', (event) => {
          const item = event.target.closest('[data-smartlink-analytics-item]');
          if (!item) {
            return;
          }
          const id = item.dataset.smartlinkId;
          if (!id) {
            return;
          }
          setSmartlinksView('analytics');
          setActiveSmartlink(id);
        });
      }

      if (expressModal && expressModalContent) {
        createModalScrollController(expressModal, expressModalContent);
      }

      if (expressModal) {
        const expressDismissButtons = expressModal.querySelectorAll('[data-modal-dismiss]');
        expressDismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        expressModal.addEventListener('click', (event) => {
          if (event.target === expressModal) {
            closeModal();
          }
        });
      }

      if (expressTriggers.length > 0) {
        expressTriggers.forEach((trigger) => {
          trigger.addEventListener('click', (event) => {
            event.preventDefault();
            updateExpressCheckoutState();
            openModal(expressModal, event);
            if (expressReleaseInput) {
              setTimeout(() => {
                try {
                  expressReleaseInput.focus({ preventScroll: true });
                } catch (error) {
                  expressReleaseInput.focus();
                }
              }, 120);
            }
          });
        });
      }

      smartlinkTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          setSmartlinksView('create');
          resetSmartlinkFormState();
          if (smartlinksModal) {
            openModal(smartlinksModal, event);
          }
        });
      });

      smartlinkPageTriggers.forEach((trigger) => {
        trigger.addEventListener('click', () => {
          setSmartlinksView('create');
          resetSmartlinkFormState();
        });
      });

      if (smartlinksModal) {
        const dismissButtons = smartlinksModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        smartlinksModal.addEventListener('click', (event) => {
          if (event.target === smartlinksModal) {
            closeModal();
          }
        });
      }

      if (smartlinksModal && smartlinksModalContent) {
        smartlinksModalContent.addEventListener('pointerenter', handleSmartlinksModalPointerEnter);
        smartlinksModalContent.addEventListener('pointerleave', handleSmartlinksModalPointerLeave);
        smartlinksModalContent.addEventListener('wheel', handleSmartlinksModalWheel, { passive: false });
        smartlinksModalContent.addEventListener('touchstart', handleSmartlinksModalTouchStart, { passive: true });
        smartlinksModalContent.addEventListener('touchmove', handleSmartlinksModalTouchMove, { passive: false });
        smartlinksModalContent.addEventListener('touchend', handleSmartlinksModalTouchEnd);
        smartlinksModalContent.addEventListener('touchcancel', handleSmartlinksModalTouchEnd);
      }

      if (cloudModal && cloudModalContent) {
        cloudModalContent.addEventListener('pointerenter', handleCloudModalPointerEnter);
        cloudModalContent.addEventListener('pointerleave', handleCloudModalPointerLeave);
        cloudModalContent.addEventListener('wheel', handleCloudModalWheel, { passive: false });
        cloudModalContent.addEventListener('touchstart', handleCloudModalTouchStart, { passive: true });
        cloudModalContent.addEventListener('touchmove', handleCloudModalTouchMove, { passive: false });
        cloudModalContent.addEventListener('touchend', handleCloudModalTouchEnd);
        cloudModalContent.addEventListener('touchcancel', handleCloudModalTouchEnd);
      }

      updateNotificationAutomationsState();

      if (notificationsPanel) {
        updateNotificationsView();
      }

      if (notificationsToggleButton && notificationsPanel) {
        notificationsToggleButton.addEventListener('click', () => {
          toggleNotificationsPanel();
        });
      }

      if (notificationsPanelClose) {
        notificationsPanelClose.addEventListener('click', () => {
          closeNotificationsPanel();
        });
      }

      if (notificationActionButtons.length > 0) {
        notificationActionButtons.forEach((button) => {
          button.addEventListener('click', () => {
            const action = button.dataset.notificationAction;
            closeNotificationsPanel();
            if (!action) {
              return;
            }
            if (action === 'open-profile') {
              setPanel(true);
            } else if (action === 'open-link') {
              const targetUrl = button.dataset.notificationUrl || '';
              if (targetUrl) {
                window.open(targetUrl, '_blank', 'noopener');
              }
            }
          });
        });
      }

      if (notificationsEnabledInput) {
        notificationsEnabledInput.addEventListener('change', () => {
          updateNotificationAutomationsState();
        });
      }

      if (profileToggle) {
        profileToggle.addEventListener('click', () => {
          if (notificationsOpen) {
            closeNotificationsPanel();
          }
          setPanel(!panelOpen);
        });
      }

      if (profilePanel) {
        profilePanel.addEventListener('wheel', handleProfilePanelWheel, { passive: false });
      }

      const profileSidebarButtons = document.querySelectorAll('[data-open-profile]');
      if (profileSidebarButtons.length > 0) {
        profileSidebarButtons.forEach((button) => {
          button.addEventListener('click', () => {
            if (notificationsOpen) {
              closeNotificationsPanel();
            }
            closeDashboardPage();
            setPanel(true);
          });
        });
      }

      if (profilePanelClose) {
        profilePanelClose.addEventListener('click', () => {
          setPanel(false);
        });
      }

      document.addEventListener('click', (event) => {
        const target = event.target;
        if (panelOpen && profilePanel && profileToggle) {
          if (!profilePanel.contains(target) && !profileToggle.contains(target)) {
            setPanel(false);
          }
        }
        if (notificationsOpen && notificationsPanel && notificationsToggleButton) {
          if (!notificationsPanel.contains(target) && !notificationsToggleButton.contains(target)) {
            closeNotificationsPanel();
          }
        }
      });

      window.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          if (notificationsOpen) {
            closeNotificationsPanel();
          }
          if (panelOpen) {
            setPanel(false);
          }
          if (inlineModalsEnabled && activeDashboardPage) {
            closeDashboardPage();
          }
          if (activeModal) {
            event.preventDefault();
            closeModal();
          }
        }

        if (event.key === 'Tab' && activeModal) {
          if (inlineModalsEnabled && activeModal.classList && activeModal.classList.contains('is-inline-open')) {
            return;
          }
          const focusable = getFocusableElements(activeModal);
          if (focusable.length === 0) {
            event.preventDefault();
            return;
          }

          const firstElement = focusable[0];
          const lastElement = focusable[focusable.length - 1];
          const activeElement = document.activeElement;

          if (event.shiftKey) {
            if (activeElement === firstElement || !activeModal.contains(activeElement)) {
              event.preventDefault();
              lastElement.focus();
            }
          } else if (activeElement === lastElement || !activeModal.contains(activeElement)) {
            event.preventDefault();
            firstElement.focus();
          }
        }
      });

      window.addEventListener('resize', updateHeaderOffset);

      smallScreenQuery.addEventListener('change', (event) => {
        if (event.matches) {
          setPanel(false);
        }
        handleViewportChange();
      });
      initializeStickyHeader();
      handleViewportChange();

      if (avatarUploadButton && avatarInput) {
        avatarUploadButton.addEventListener('click', () => {
          avatarInput.click();
        });
      }

      if (avatarInput) {
        avatarInput.addEventListener('change', async (event) => {
          const file = event.target.files && event.target.files[0];
          if (!file) {
            return;
          }

          try {
            showFeedback(t('profile.feedback.image_optimizing'));
            const compressed = await compressImage(file);
            pendingAvatarFile = compressed;
            if (avatarInput) {
              avatarInput.value = '';
            }
            removeAvatarInput.value = '0';
            revokePreviewUrl();
            previewObjectUrl = URL.createObjectURL(compressed);
            updatePreviewWithImage(previewObjectUrl, getComputedStyle(profileAvatar).getPropertyValue('--avatar-color'));
            showFeedback(t('profile.feedback.image_ready'));
          } catch (error) {
            console.error(error);
            showFeedback(error.message || t('profile.feedback.image_error'), true);
            resetAvatarInput();
          }
        });
      }

      if (avatarRemoveButton) {
        avatarRemoveButton.addEventListener('click', () => {
          revokePreviewUrl();
          resetAvatarInput();
          removeAvatarInput.value = '1';
          const initial = avatarPreview ? (avatarPreview.dataset.initial || '') : '';
          const color = getComputedStyle(profileAvatar).getPropertyValue('--avatar-color') || '#6366f1';
          updatePreviewWithInitial(initial, color);
          applyAvatarInitial(initial, color);
          showFeedback(t('profile.feedback.photo_removed'));
        });
      }

      updateCompanyFieldsVisibility();

      if (businessTypeSelect) {
        businessTypeSelect.addEventListener('change', () => {
          updateCompanyFieldsVisibility();
        });
      }

      if (userDetailModal) {
        resetUserDetailModal();
        const dismissButtons = userDetailModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        userDetailModal.addEventListener('click', (event) => {
          if (event.target === userDetailModal) {
            closeModal();
          }
        });
      }

      if (aiComposerModal) {
        if (aiComposerModalContent) {
          createModalScrollController(aiComposerModal, aiComposerModalContent);
        }
        const dismissButtons = aiComposerModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        aiComposerModal.addEventListener('click', (event) => {
          if (event.target === aiComposerModal) {
            closeModal();
          }
        });
        resetAiComposerModal(true);
      }

      aiComposerTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (!aiComposerModal) {
            return;
          }
          resetAiComposerModal(true);
          openModal(aiComposerModal, event);
        });
      });

      aiComposerModeButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const targetMode = button.dataset.aiMode === 'write' ? 'write' : 'generate';
          setAiComposerMode(targetMode);
        });
      });

      if (aiComposerBriefInput) {
        aiComposerBriefInput.addEventListener('input', () => {
          aiComposerState.brief = aiComposerBriefInput.value;
        });
      }

      if (aiComposerLyricsInput) {
        aiComposerLyricsInput.addEventListener('input', () => {
          aiComposerState.lyrics = aiComposerLyricsInput.value;
          if (aiComposerState.mode === 'write') {
            setAiComposerResultLyrics('');
          } else {
            setAiComposerResultLyrics(aiComposerState.lyrics);
          }
          refreshAiComposerButtons();
        });
      }

      if (aiComposerGenerateButton) {
        aiComposerGenerateButton.addEventListener('click', (event) => {
          event.preventDefault();
          if (aiComposerBriefInput) {
            aiComposerState.brief = aiComposerBriefInput.value;
          }
          handleAiComposerLyrics();
        });
      }

      if (aiComposerInstrumentalInput) {
        aiComposerInstrumentalInput.addEventListener('input', () => {
          aiComposerState.instrumental = aiComposerInstrumentalInput.value;
          aiComposerInstrumentButtons.forEach((button) => {
            const value = button.dataset.aiInstrumentChip || '';
            button.classList.toggle('is-active', value === aiComposerState.instrumental);
          });
        });
      }

      aiComposerInstrumentButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const value = button.dataset.aiInstrumentChip || '';
          aiComposerState.instrumental = value;
          if (aiComposerInstrumentalInput) {
            aiComposerInstrumentalInput.value = value;
          }
          aiComposerInstrumentButtons.forEach((btn) => {
            btn.classList.toggle('is-active', btn === button);
          });
        });
      });

      aiComposerStyleButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const styleId = button.dataset.aiStyle || '';
          const stylePrompt = button.dataset.aiStylePrompt || '';
          aiComposerState.styleId = styleId;
          aiComposerState.stylePrompt = stylePrompt;
          aiComposerStyleButtons.forEach((btn) => {
            const isActive = btn === button;
            btn.classList.toggle('is-active', isActive);
            btn.setAttribute('aria-pressed', isActive ? 'true' : 'false');
          });
          if (aiComposerStyleHelper) {
            aiComposerStyleHelper.textContent = stylePrompt;
          }
        });
      });

      aiComposerVoiceButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const voiceId = button.dataset.aiVoice || '';
          aiComposerState.voiceId = voiceId;
          aiComposerVoiceButtons.forEach((btn) => {
            const isActive = btn === button;
            btn.classList.toggle('is-active', isActive);
            btn.setAttribute('aria-pressed', isActive ? 'true' : 'false');
          });
        });
      });

      aiComposerDurationButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const value = Number.parseInt(button.dataset.aiDuration || '0', 10);
          if (!Number.isFinite(value)) {
            return;
          }
          aiComposerState.duration = value;
          aiComposerDurationButtons.forEach((btn) => {
            const btnValue = Number.parseInt(btn.dataset.aiDuration || '0', 10);
            const isActive = Number.isFinite(btnValue) && btnValue === value;
            btn.classList.toggle('is-active', isActive);
            btn.setAttribute('aria-pressed', isActive ? 'true' : 'false');
          });
        });
      });

      if (aiComposerTempoSlider) {
        aiComposerTempoSlider.addEventListener('input', (event) => {
          const value = Number.parseInt(event.target.value, 10);
          if (!Number.isFinite(value)) {
            return;
          }
          aiComposerState.tempo = value;
          updateAiComposerTempoLabel(value);
        });
      }

      if (aiComposerResetButton) {
        aiComposerResetButton.addEventListener('click', (event) => {
          event.preventDefault();
          resetAiComposerModal(true);
        });
      }

      if (aiComposerSubmitButton) {
        aiComposerSubmitButton.addEventListener('click', (event) => {
          event.preventDefault();
          if (aiComposerBriefInput) {
            aiComposerState.brief = aiComposerBriefInput.value;
          }
          if (aiComposerLyricsInput) {
            aiComposerState.lyrics = aiComposerLyricsInput.value;
          }
          handleAiComposerSubmit();
        });
      }

      if (masteringModal) {
        if (masteringModalContent) {
          createModalScrollController(masteringModal, masteringModalContent);
        }
        initializeMasteringPlayerSticky();
        resetMasteringModal(true);
        const dismissButtons = masteringModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        masteringModal.addEventListener('click', (event) => {
          if (event.target === masteringModal) {
            closeModal();
          }
        });
      }

      masteringTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (!masteringModal) {
            return;
          }
          resetMasteringModal(true);
          openModal(masteringModal, event);
        });
      });

      if (masteringDropzone) {
        let dragDepth = 0;
        masteringDropzone.addEventListener('click', () => {
          if (masteringFileInput) {
            masteringFileInput.click();
          }
        });
        masteringDropzone.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            if (masteringFileInput) {
              masteringFileInput.click();
            }
          }
        });
        masteringDropzone.addEventListener('dragenter', (event) => {
          event.preventDefault();
          dragDepth += 1;
          masteringDropzone.classList.add('is-dragging');
        });
        masteringDropzone.addEventListener('dragover', (event) => {
          event.preventDefault();
          if (event.dataTransfer) {
            event.dataTransfer.dropEffect = 'copy';
          }
        });
        masteringDropzone.addEventListener('dragleave', (event) => {
          event.preventDefault();
          dragDepth = Math.max(0, dragDepth - 1);
          if (dragDepth === 0) {
            masteringDropzone.classList.remove('is-dragging');
          }
        });
        masteringDropzone.addEventListener('drop', (event) => {
          event.preventDefault();
          dragDepth = 0;
          masteringDropzone.classList.remove('is-dragging');
          const files = event.dataTransfer && event.dataTransfer.files ? event.dataTransfer.files : null;
          if (files && files[0]) {
            handleMasteringFile(files[0]);
          }
        });
      }

      if (masteringFileInput) {
        masteringFileInput.addEventListener('change', (event) => {
          const file = event.target.files && event.target.files[0];
          if (file) {
            handleMasteringFile(file);
          }
          event.target.value = '';
        });
      }

      masteringPresetButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const preset = button.dataset.masteringPreset;
          if (!preset || preset === masteringCurrentPreset) {
            return;
          }
          applyMasteringPreset(preset);
        });
      });

      masteringControlInputs.forEach((input) => {
        input.addEventListener('input', () => {
          const control = input.dataset.masteringControl;
          if (!control) {
            return;
          }
          const numericValue = Number(input.value);
          updateMasteringControlValue(control, numericValue);
          if (!setupMasteringAudioGraph() || !masteringNodes) {
            return;
          }
          switch (control) {
            case 'preGain':
              masteringNodes.preGain.gain.value = numericValue;
              break;
            case 'threshold':
              masteringNodes.compressor.threshold.value = numericValue;
              break;
            case 'ratio':
              masteringNodes.compressor.ratio.value = numericValue;
              break;
            case 'attack':
              masteringNodes.compressor.attack.value = numericValue / 1000;
              break;
            case 'release':
              masteringNodes.compressor.release.value = numericValue / 1000;
              break;
            case 'low':
              masteringNodes.lowShelf.gain.value = numericValue;
              break;
            case 'mid':
              masteringNodes.midPeaking.gain.value = numericValue;
              break;
            case 'high':
              masteringNodes.highShelf.gain.value = numericValue;
              break;
            case 'width':
              setMasteringStereoWidth(numericValue);
              masteringLastWidth = numericValue;
              if (numericValue > 0 && masteringMonoActive) {
                masteringMonoActive = false;
                if (masteringMonoToggle) {
                  masteringMonoToggle.setAttribute('aria-pressed', 'false');
                }
              } else if (numericValue <= 0) {
                masteringMonoActive = true;
                if (masteringMonoToggle) {
                  masteringMonoToggle.setAttribute('aria-pressed', 'true');
                }
              }
              break;
            case 'output':
              masteringNodes.outputGain.gain.value = numericValue;
              break;
            default:
              break;
          }
          const snapshot = getMasteringControlSnapshot();
          MASTERING_PRESETS[MASTERING_CUSTOM_PRESET] = snapshot;
          masteringCurrentPreset = MASTERING_CUSTOM_PRESET;
          updateMasteringPresetButtons(masteringCurrentPreset);
        });
      });

      if (masteringNewFileButton) {
        masteringNewFileButton.addEventListener('click', () => {
          resetMasteringModal(false);
          if (masteringFileInput) {
            masteringFileInput.value = '';
          }
        });
      }

      if (masteringPlayButton && masteringAudio) {
        masteringPlayButton.addEventListener('click', () => {
          if (masteringAudio.paused) {
            const context = ensureMasteringAudioContext();
            if (context && typeof context.resume === 'function' && context.state === 'suspended') {
              context.resume().catch(() => {
                // Ignore resume errors
              });
            }
            masteringAudio.play().catch(() => {
              updateMasteringPlayButton(false);
            });
          } else {
            masteringAudio.pause();
          }
        });
      }

      if (masteringOriginalToggle) {
        masteringOriginalToggle.addEventListener('click', () => {
          const nextState = masteringOriginalToggle.getAttribute('aria-pressed') !== 'true';
          masteringOriginalToggle.setAttribute('aria-pressed', nextState ? 'true' : 'false');
          if (!setupMasteringAudioGraph()) {
            return;
          }
          setMasteringBypass(nextState);
        });
      }

      if (masteringMonoToggle) {
        masteringMonoToggle.addEventListener('click', () => {
          if (!setupMasteringAudioGraph()) {
            return;
          }
          const enableMono = masteringMonoToggle.getAttribute('aria-pressed') !== 'true';
          masteringMonoToggle.setAttribute('aria-pressed', enableMono ? 'true' : 'false');
          masteringMonoActive = enableMono;
          if (enableMono) {
            masteringLastWidth = masteringControlMap.width ? Number(masteringControlMap.width.value) : masteringLastWidth;
            if (masteringControlMap.width) {
              masteringControlMap.width.value = '0';
            }
            updateMasteringControlValue('width', 0);
            setMasteringStereoWidth(0);
          } else {
            const restoredWidth = masteringLastWidth || 100;
            if (masteringControlMap.width) {
              masteringControlMap.width.value = restoredWidth.toString();
            }
            updateMasteringControlValue('width', restoredWidth);
            setMasteringStereoWidth(restoredWidth);
          }
          const snapshot = getMasteringControlSnapshot();
          MASTERING_PRESETS[MASTERING_CUSTOM_PRESET] = snapshot;
          masteringCurrentPreset = MASTERING_CUSTOM_PRESET;
          updateMasteringPresetButtons(masteringCurrentPreset);
        });
      }

      masteringCheckoutButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const plan = button.dataset.masteringCheckout;
          if (!plan || masteringState !== 'ready') {
            return;
          }
          startMasteringCheckout(plan, button);
        });
      });

      if (masteringDownloadButton) {
        masteringDownloadButton.addEventListener('click', () => {
          if (masteringState !== 'ready' || masteringDownloadInProgress) {
            return;
          }
          exportMasteringDownload();
        });
      }

      if (masteringAudio) {
        masteringAudio.addEventListener('loadedmetadata', () => {
          if (masteringTrackDuration && Number.isFinite(masteringAudio.duration)) {
            masteringTrackDuration.textContent = formatDuration(masteringAudio.duration);
          }
          updateMasteringTimeline();
        });
        masteringAudio.addEventListener('play', () => {
          const context = ensureMasteringAudioContext();
          if (context && typeof context.resume === 'function' && context.state === 'suspended') {
            context.resume().catch(() => {
              // Ignore resume errors
            });
          }
          updateMasteringPlayButton(true);
          startMasteringWaveformAnimation();
        });
        masteringAudio.addEventListener('pause', () => {
          updateMasteringPlayButton(false);
          stopMasteringWaveformAnimation();
        });
        masteringAudio.addEventListener('ended', () => {
          updateMasteringPlayButton(false);
          stopMasteringWaveformAnimation();
          masteringAudio.currentTime = 0;
          updateMasteringTimeline();
        });
        masteringAudio.addEventListener('timeupdate', () => {
          updateMasteringTimeline();
        });
      }

      if (paymentsModal) {
        const dismissButtons = paymentsModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        paymentsModal.addEventListener('click', (event) => {
          if (event.target === paymentsModal) {
            closeModal();
          }
        });
      }

      paymentsTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (!paymentsModal) {
            return;
          }
          openModal(paymentsModal, event);
          if (paymentsLoaded && paymentsDataCache) {
            renderPayments(paymentsDataCache);
          }
          loadPayments();
        });
      });

      if (paymentsRefreshButton) {
        paymentsRefreshButton.addEventListener('click', () => {
          loadPayments(true);
        });
      }

      if (paymentsRetryButton) {
        paymentsRetryButton.addEventListener('click', () => {
          loadPayments(true);
        });
      }

      if (publishingModal && publishingModalContent) {
        createModalScrollController(publishingModal, publishingModalContent);
      }

      if (publishingModal) {
        const dismissButtons = publishingModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        publishingModal.addEventListener('click', (event) => {
          if (event.target === publishingModal) {
            closeModal();
          }
        });
      }

      if (publishingCheckoutButton) {
        publishingCheckoutButton.addEventListener('click', () => {
          const plan = publishingCheckoutButton.dataset.plan || 'publishing_administration';
          startPublishingCheckout(plan);
        });
      }

      publishingTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (!publishingModal) {
            return;
          }
          openModal(publishingModal, event);
        });
      });

      if (musicDistributionLaunchButton && !musicDistributionLaunchButton.dataset.serviceUrl) {
        musicDistributionLaunchButton.dataset.serviceUrl = getMusicDistributionDefaultUrl();
      }

      if (musicDistributionLaunchButton) {
        setMusicDistributionButtonState('default');
      }

      if (musicDistributionModal) {
        const dismissButtons = musicDistributionModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        musicDistributionModal.addEventListener('click', (event) => {
          if (event.target === musicDistributionModal) {
            closeModal();
          }
        });
      }

      if (musicDistributionOptOut) {
        musicDistributionOptOut.addEventListener('change', () => {
          setMusicDistributionPreference(musicDistributionOptOut.checked);
        });
      }

      syncMusicDistributionCheckbox();

      musicDistributionTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          const serviceUrl = trigger.dataset.serviceUrl || getMusicDistributionDefaultUrl();
          if (getMusicDistributionPreference() && serviceUrl) {
            const newTab = window.open(serviceUrl, '_blank', 'noopener');
            if (!newTab) {
              window.location.href = serviceUrl;
            }
            return;
          }
          if (!musicDistributionModal) {
            return;
          }
          if (musicDistributionLaunchButton) {
            musicDistributionLaunchButton.dataset.serviceUrl = serviceUrl || '';
          }
          setMusicDistributionFeedback('');
          setMusicDistributionButtonState('default');
          syncMusicDistributionCheckbox();
          openModal(musicDistributionModal, event);
        });
      });

      if (musicDistributionLaunchButton) {
        musicDistributionLaunchButton.addEventListener('click', () => {
          const targetUrl = musicDistributionLaunchButton.dataset.serviceUrl || getMusicDistributionDefaultUrl();
          if (!targetUrl) {
            return;
          }
          if (musicDistributionOptOut && musicDistributionOptOut.checked) {
            setMusicDistributionPreference(true);
          }
          setMusicDistributionFeedback('');
          setMusicDistributionButtonState('processing');
          const newTab = window.open(targetUrl, '_blank', 'noopener');
          if (!newTab) {
            const errorLabel = musicDistributionLaunchButton.dataset.errorLabel || '';
            if (errorLabel) {
              setMusicDistributionFeedback(errorLabel);
            }
            setMusicDistributionButtonState('default');
            return;
          }
          try {
            if (typeof newTab.focus === 'function') {
              newTab.focus();
            }
          } catch (error) {
            // Ignore focus errors
          }
          setTimeout(() => {
            closeModal();
            setMusicDistributionButtonState('default');
          }, 150);
        });
      }

      if (cloudModal) {
        const dismissButtons = cloudModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        cloudModal.addEventListener('click', (event) => {
          if (event.target === cloudModal) {
            closeModal();
          }
        });
      }

      cloudTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (getCloudModalPreference()) {
            const targetUrl = getCloudServiceUrl(trigger);
            if (targetUrl) {
              window.location.href = targetUrl;
            }
            return;
          }
          if (!cloudModal) {
            return;
          }
          syncCloudModalCheckbox();
          openModal(cloudModal, event);
        });
      });

      if (cloudModalOptOut) {
        cloudModalOptOut.addEventListener('change', () => {
          setCloudModalPreference(cloudModalOptOut.checked);
        });
      }

      if (cloudModalCta) {
        cloudModalCta.addEventListener('click', () => {
          if (cloudModalOptOut && cloudModalOptOut.checked) {
            setCloudModalPreference(true);
          }
        });
      }

      syncCloudModalCheckbox();

      if (royaltiesModal) {
        if (royaltiesModalContent) {
          createModalScrollController(royaltiesModal, royaltiesModalContent);
        }
        updatePlan(currentPlan);
        const dismissButtons = royaltiesModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        royaltiesModal.addEventListener('click', (event) => {
          if (event.target === royaltiesModal) {
            closeModal();
          }
        });
      }

      royaltiesTriggers.forEach((trigger) => {
        trigger.addEventListener('click', (event) => {
          event.preventDefault();
          if (!royaltiesModal) {
            return;
          }
          updatePlan(currentPlan);
          setCheckoutLoading(false);
          setCheckoutFeedback('');
          openModal(royaltiesModal, event);
        });
      });

      if (planButton) {
        planButton.addEventListener('click', () => {
          const plan = planButton.dataset.plan || currentPlan;
          if (!plan) {
            return;
          }
          startCheckout(plan);
        });
      }

      planSwitchButtons.forEach((button) => {
        button.addEventListener('click', () => {
          const plan = button.dataset.planOption;
          if (!plan || plan === currentPlan) {
            return;
          }
          updatePlan(plan);
          setCheckoutLoading(false);
          setCheckoutFeedback('');
        });
      });

      updateLanguageOptionsState();

      if (configurationDefaultLanguageSelect) {
        configurationDefaultLanguageSelect.addEventListener('change', () => {
          if (!(configurationDefaultLanguageSelect instanceof HTMLSelectElement)) {
            return;
          }
          const selected = normalizeLanguageCode(configurationDefaultLanguageSelect.value);
          if (!selected) {
            return;
          }
          defaultLanguageCode = selected;
          if (configurationLanguagesContainer) {
            configurationLanguagesContainer.dataset.defaultLanguage = defaultLanguageCode;
          }
          updateLanguageOptionsState();
        });
      }

      if (configurationMultilingualToggle) {
        configurationMultilingualToggle.addEventListener('change', () => {
          updateLanguageOptionsState();
        });
      }

      configurationLanguageInputs.forEach((input) => {
        if (!(input instanceof HTMLInputElement)) {
          return;
        }
        input.addEventListener('change', () => {
          enforceLanguageSelection(input);
        });
      });

      if (translationsModal && translationsModalContent) {
        createModalScrollController(translationsModal, translationsModalContent);
      }

      if (translationsModal) {
        const dismissButtons = translationsModal.querySelectorAll('[data-modal-dismiss]');
        dismissButtons.forEach((button) => {
          button.addEventListener('click', () => {
            closeModal();
          });
        });
        translationsModal.addEventListener('click', (event) => {
          if (event.target === translationsModal) {
            closeModal();
          }
        });
      }

      if (manageTranslationsButton) {
        manageTranslationsButton.addEventListener('click', (event) => {
          event.preventDefault();
          if (!translationsModal) {
            return;
          }
          clearTranslationsFeedback();
          translationsChangedKeys.clear();
          if (translationsSearchInput) {
            translationsSearchInput.value = '';
            filterTranslationsList('');
          }
          updateTranslationsSaveState();
          openModal(translationsModal, event);
          loadTranslations(false);
        });
      }

      if (translationsRetryButton) {
        translationsRetryButton.addEventListener('click', () => {
          loadTranslations(true);
        });
      }

      if (translationsSaveButton) {
        translationsSaveButton.addEventListener('click', () => {
          saveTranslations();
        });
      }

      if (translationsSearchInput) {
        translationsSearchInput.addEventListener('input', () => {
          filterTranslationsList(translationsSearchInput.value || '');
        });
      }

      if (translationsPaginationPrev) {
        translationsPaginationPrev.addEventListener('click', () => {
          if (translationsPage > 1) {
            translationsPage -= 1;
            updateTranslationsPagination();
          }
        });
      }

      if (translationsPaginationNext) {
        translationsPaginationNext.addEventListener('click', () => {
          const totalPages = translationsFilteredKeys.length > 0
            ? Math.max(1, Math.ceil(translationsFilteredKeys.length / TRANSLATIONS_PAGE_SIZE))
            : 1;
          if (translationsPage < totalPages) {
            translationsPage += 1;
            updateTranslationsPagination();
          }
        });
      }

      updateDistributionFields();
      updateMonetizationInputsState();
      updateCloudUsageState();
      updateCloudSubscriptionState();

      if (monetizationPaymentsToggle) {
        monetizationPaymentsToggle.addEventListener('change', updateMonetizationInputsState);
      }

      if (cloudUsageToggle) {
        cloudUsageToggle.addEventListener('change', updateCloudUsageState);
      }

      if (cloudSubscriptionToggle) {
        cloudSubscriptionToggle.addEventListener('change', updateCloudSubscriptionState);
      }

      const getSelectedDefaultCurrency = () => {
        if (defaultCurrencySelect instanceof HTMLSelectElement) {
          return defaultCurrencySelect.value || '';
        }
        return '';
      };

      const updateCurrencySymbolPreview = () => {
        const selectedCurrency = getSelectedDefaultCurrency();
        let symbol = currencySymbolFallback;
        if (defaultCurrencySelect instanceof HTMLSelectElement) {
          const selectedOption = defaultCurrencySelect.selectedOptions.length > 0
            ? defaultCurrencySelect.selectedOptions[0]
            : null;
          if (selectedOption) {
            const optionSymbol = selectedOption.getAttribute('data-symbol');
            if (typeof optionSymbol === 'string' && optionSymbol.trim() !== '') {
              symbol = optionSymbol.trim();
            }
          }
        }
        if (!symbol && selectedCurrency) {
          symbol = selectedCurrency.toUpperCase();
        }
        currencySymbolTargets.forEach((target) => {
          target.textContent = symbol;
        });
      };

      const updateCurrencyOptionsState = () => {
        const allowChoice = currencyAllowChoiceToggle ? currencyAllowChoiceToggle.checked : false;
        const selectedCurrency = getSelectedDefaultCurrency();
        currencyToggleInputs.forEach((input) => {
          const isDefault = selectedCurrency !== '' && input.value === selectedCurrency;
          if (isDefault) {
            input.checked = true;
          }
          input.disabled = !allowChoice || isDefault;
          const toggleLabel = input.closest('.admin-toggle');
          if (toggleLabel) {
            toggleLabel.classList.toggle('is-disabled', input.disabled);
          }
        });
        if (currencyOptionsContainer) {
          currencyOptionsContainer.dataset.currencyEnabled = allowChoice ? '1' : '0';
        }
      };

      if (defaultCurrencySelect) {
        defaultCurrencySelect.addEventListener('change', () => {
          updateCurrencySymbolPreview();
          updateCurrencyOptionsState();
        });
      }

      if (currencyAllowChoiceToggle) {
        currencyAllowChoiceToggle.addEventListener('change', () => {
          updateCurrencyOptionsState();
          updateCurrencySymbolPreview();
        });
      }

      updateCurrencySymbolPreview();
      updateCurrencyOptionsState();

      if (distributionProviderSelect) {
        distributionProviderSelect.addEventListener('change', updateDistributionFields);
      }

      if (stripeSettingsForm && stripeSettingsSubmit && stripeSettingsFeedback) {
        stripeSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          const formData = new FormData(stripeSettingsForm);
          const secretValue = formData.get('stripe_secret_key');
          const publishableValue = formData.get('stripe_publishable_key');
          const paymentsEnabled = monetizationPaymentsToggle ? monetizationPaymentsToggle.checked : true;
          const selectedDefaultCurrency = defaultCurrencySelect instanceof HTMLSelectElement
            ? defaultCurrencySelect.value
            : '';
          const allowCurrencyChoice = currencyAllowChoiceToggle ? currencyAllowChoiceToggle.checked : false;
          let enabledCurrencies = [];
          if (currencyToggleInputs.length > 0) {
            enabledCurrencies = currencyToggleInputs
              .filter((input) => input.checked)
              .map((input) => (typeof input.value === 'string' ? input.value.trim() : ''))
              .filter((value) => value !== '');
          }
          if (selectedDefaultCurrency) {
            enabledCurrencies.unshift(selectedDefaultCurrency);
          }
          const uniqueEnabledCurrencies = Array.from(new Set(enabledCurrencies));
          const payload = {
            stripe_secret_key: typeof secretValue === 'string' ? secretValue.trim() : '',
            stripe_publishable_key: typeof publishableValue === 'string' ? publishableValue.trim() : '',
            mastering_payments_enabled: paymentsEnabled ? '1' : '0',
            mastering_price_single: monetizationSingleInput ? monetizationSingleInput.value.trim() : '',
            mastering_price_yearly: monetizationYearlyInput ? monetizationYearlyInput.value.trim() : '',
            publishing_setup_price: publishingSetupPriceInput ? publishingSetupPriceInput.value.trim() : '',
            cloud_storage_usage_enabled: cloudUsageToggle && cloudUsageToggle.checked ? '1' : '0',
            cloud_storage_price_per_mb: cloudPricePerMbInput ? cloudPricePerMbInput.value.trim() : '',
            cloud_storage_price_per_file: cloudPricePerFileInput ? cloudPricePerFileInput.value.trim() : '',
            cloud_storage_subscription_enabled: cloudSubscriptionToggle && cloudSubscriptionToggle.checked ? '1' : '0',
            cloud_storage_subscription_price: cloudSubscriptionPriceInput ? cloudSubscriptionPriceInput.value.trim() : '',
            cloud_storage_subscription_storage_mb: cloudSubscriptionStorageInput ? cloudSubscriptionStorageInput.value.trim() : '',
            currency_default: selectedDefaultCurrency,
            currency_allow_user_choice: allowCurrencyChoice ? '1' : '0',
            currency_enabled: uniqueEnabledCurrencies,
          };
          stripeSettingsFeedback.textContent = '';
          stripeSettingsFeedback.classList.remove('error', 'success');
          const originalLabel = stripeSettingsSubmit.textContent || '';
          if (!stripeSettingsSubmit.dataset.originalLabel) {
            stripeSettingsSubmit.dataset.originalLabel = originalLabel;
          }
          stripeSettingsSubmit.classList.add('is-loading');
          stripeSettingsSubmit.disabled = true;
          const processingLabel = (DASHBOARD_I18N.stripe && DASHBOARD_I18N.stripe.feedback && DASHBOARD_I18N.stripe.feedback.processing)
            || t('admin.feedback.processing')
            || originalLabel;
          if (processingLabel) {
            stripeSettingsSubmit.textContent = processingLabel;
          }

          try {
            const response = await fetch('/admin-stripe-settings.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid Stripe settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (DASHBOARD_I18N.stripe && DASHBOARD_I18N.stripe.feedback && DASHBOARD_I18N.stripe.feedback.saved)
                || '';
              stripeSettingsFeedback.textContent = successMessage;
              stripeSettingsFeedback.classList.add('success');
            } else {
              const errorMessage = data && data.message
                ? data.message
                : (DASHBOARD_I18N.stripe && DASHBOARD_I18N.stripe.feedback && DASHBOARD_I18N.stripe.feedback.error)
                  || (t('royalties.checkout.generic_error') || 'Unable to save settings.');
              stripeSettingsFeedback.textContent = errorMessage;
              stripeSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save Stripe settings', error);
            const fallback = (DASHBOARD_I18N.stripe && DASHBOARD_I18N.stripe.feedback && DASHBOARD_I18N.stripe.feedback.error)
              || 'Unable to save settings.';
            stripeSettingsFeedback.textContent = fallback;
            stripeSettingsFeedback.classList.add('error');
          } finally {
            const label = stripeSettingsSubmit.dataset.originalLabel || originalLabel;
            stripeSettingsSubmit.textContent = label;
            stripeSettingsSubmit.classList.remove('is-loading');
            stripeSettingsSubmit.disabled = false;
          }
        });
      }

      if (aiSettingsForm && aiSettingsSubmit && aiSettingsFeedback) {
        aiSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          aiSettingsFeedback.textContent = '';
          aiSettingsFeedback.classList.remove('error', 'success');

          const originalLabel = aiSettingsSubmit.textContent || '';
          if (!aiSettingsSubmit.dataset.originalLabel) {
            aiSettingsSubmit.dataset.originalLabel = originalLabel;
          }

          aiSettingsSubmit.classList.add('is-loading');
          aiSettingsSubmit.disabled = true;

          const processingLabel = (adminAiI18n.feedback && adminAiI18n.feedback.processing)
            || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.processing)
            || originalLabel;

          if (processingLabel) {
            aiSettingsSubmit.textContent = processingLabel;
          }

          const apiKeyValue = aiKeyInput instanceof HTMLInputElement ? aiKeyInput.value.trim() : '';

          try {
            const response = await fetch('/admin-ai-settings.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({ suno_api_key: apiKeyValue })
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid AI settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (adminAiI18n.feedback && adminAiI18n.feedback.saved)
                || '';
              if (successMessage) {
                aiSettingsFeedback.textContent = successMessage;
                aiSettingsFeedback.classList.add('success');
              }

              const configured = typeof data.configured === 'boolean'
                ? data.configured
                : apiKeyValue !== '';
              updateAiStatus(configured);
            } else {
              const errorMessage = (data && data.message)
                || (adminAiI18n.feedback && adminAiI18n.feedback.error)
                || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
                || 'Unable to save AI settings.';
              aiSettingsFeedback.textContent = errorMessage;
              aiSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save AI settings', error);
            const fallback = (adminAiI18n.feedback && adminAiI18n.feedback.error)
              || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
              || 'Unable to save AI settings.';
            aiSettingsFeedback.textContent = fallback;
            aiSettingsFeedback.classList.add('error');
          } finally {
            const label = aiSettingsSubmit.dataset.originalLabel || originalLabel;
            aiSettingsSubmit.textContent = label;
            aiSettingsSubmit.classList.remove('is-loading');
            aiSettingsSubmit.disabled = false;
          }
        });
      }

      if (brandingSettingsForm && brandingSubmit && brandingFeedback && brandingSiteNameInput) {
        brandingSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          const siteNameValue = brandingSiteNameInput.value ? brandingSiteNameInput.value.trim() : '';
          const footerValue = brandingFooterInput && typeof brandingFooterInput.value === 'string'
            ? brandingFooterInput.value.trim()
            : '';

          clearBrandingErrors();

          brandingFeedback.textContent = '';
          brandingFeedback.classList.remove('success', 'error');

          if (!siteNameValue) {
            const message = (brandingStrings.validation && brandingStrings.validation.site_name)
              || '';
            if (message && brandingSiteNameError) {
              brandingSiteNameError.textContent = message;
            }
            return;
          }

          const formData = new FormData(brandingSettingsForm);
          formData.set('site_name', siteNameValue);
          formData.set('footer_copyright', footerValue);

          const originalLabel = brandingSubmit.textContent || '';
          if (!brandingSubmit.dataset.originalLabel) {
            brandingSubmit.dataset.originalLabel = originalLabel;
          }

          const processingLabel = brandingActionsI18n.processing || originalLabel;
          if (processingLabel) {
            brandingSubmit.textContent = processingLabel;
          }

          brandingSubmit.disabled = true;
          brandingSubmit.classList.add('is-loading');

          try {
            const response = await fetch(BRANDING_SETTINGS_ENDPOINT, {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'X-Requested-With': 'XMLHttpRequest',
              },
              body: formData,
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid branding settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              applyBrandingPayload(data);
              brandingConfig.site_name = brandingCurrentSiteName;
              brandingConfig.logo = brandingCurrentLogo;
              brandingConfig.favicon = brandingCurrentFavicon;
              brandingConfig.footer_copyright = brandingCurrentFooterTemplate;
              const successMessage = data.message
                || (brandingFeedbackI18n && brandingFeedbackI18n.saved)
                || '';
              if (successMessage) {
                brandingFeedback.textContent = successMessage;
                brandingFeedback.classList.add('success');
              }
              if (brandingLogoInput) {
                brandingLogoInput.value = '';
              }
              if (brandingFaviconInput) {
                brandingFaviconInput.value = '';
              }
              persistAdminActiveTab('design');
            } else {
              const errors = data && data.errors && typeof data.errors === 'object'
                ? data.errors
                : {};
              if (errors.site_name && brandingSiteNameError) {
                brandingSiteNameError.textContent = errors.site_name;
              }
              if (errors.dashboard_logo && brandingLogoError) {
                brandingLogoError.textContent = errors.dashboard_logo;
              }
              if (errors.favicon && brandingFaviconError) {
                brandingFaviconError.textContent = errors.favicon;
              }
              if (errors.footer_copyright && brandingFooterError) {
                brandingFooterError.textContent = errors.footer_copyright;
              }
              const errorMessage = (data && data.message)
                || (brandingFeedbackI18n && brandingFeedbackI18n.error)
                || (adminDesignI18n.feedback && adminDesignI18n.feedback.error)
                || 'Unable to save branding settings.';
              brandingFeedback.textContent = errorMessage;
              brandingFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save branding settings', error);
            const fallback = (brandingFeedbackI18n && brandingFeedbackI18n.error)
              || (adminDesignI18n.feedback && adminDesignI18n.feedback.error)
              || 'Unable to save branding settings.';
            brandingFeedback.textContent = fallback;
            brandingFeedback.classList.add('error');
          } finally {
            const label = brandingSubmit.dataset.originalLabel || originalLabel;
            brandingSubmit.textContent = label;
            brandingSubmit.classList.remove('is-loading');
            brandingSubmit.disabled = false;
          }
        });
      }

      if (designSettingsForm && designSettingsSubmit && designSettingsFeedback) {
        designSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          const selectedInput = designVariantInputs
            .find((input) => input instanceof HTMLInputElement && input.checked);
          const nextVariant = selectedInput && typeof selectedInput.value === 'string'
            ? selectedInput.value.trim()
            : '';

          if (!nextVariant) {
            designSettingsSaving = false;
            return;
          }

          if (nextVariant === savedDesignVariant) {
            designSettingsSaving = false;
            hideDesignChangeNotice();
            return;
          }

          designSettingsFeedback.textContent = '';
          designSettingsFeedback.classList.remove('error', 'success');

          const originalLabel = designSettingsSubmit.textContent || '';
          if (!designSettingsSubmit.dataset.originalLabel) {
            designSettingsSubmit.dataset.originalLabel = originalLabel;
          }

          designSettingsSubmit.classList.add('is-loading');
          designSettingsSubmit.disabled = true;
          designSettingsSaving = true;
          pendingDesignVariant = nextVariant;
          setDesignNoticeLoading(true);

          const processingLabel = (adminDesignI18n.actions && adminDesignI18n.actions.processing)
            || originalLabel;
          if (processingLabel) {
            designSettingsSubmit.textContent = processingLabel;
          }

          try {
            const response = await fetch(DESIGN_SETTINGS_ENDPOINT, {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({ variant: nextVariant })
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid design settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (adminDesignI18n.feedback && adminDesignI18n.feedback.saved)
                || '';
              const feedbackStored = successMessage
                ? storeDesignChangeFeedback(successMessage)
                : false;
              if (successMessage && !feedbackStored) {
                designSettingsFeedback.textContent = successMessage;
                designSettingsFeedback.classList.add('success');
              }
              const previousVariant = savedDesignVariant;
              savedDesignVariant = nextVariant;
              previewDesignVariant = nextVariant;
              pendingDesignVariant = null;
              storeDesignChangeNotice(nextVariant, previousVariant);
              applyDashboardDesignVariant(nextVariant);
              persistAdminActiveTab('design');
              hideDesignChangeNotice();
              const variantLabel = getDesignVariantLabel(nextVariant);
              if (designLoadingOverlay) {
                if (designLoadingHeadline) {
                  const overlayHeading = (adminDesignI18n.actions && adminDesignI18n.actions.processing)
                    || processingLabel
                    || (designLoadingHeadline.textContent || '');
                  designLoadingHeadline.textContent = overlayHeading;
                }
                if (designLoadingVariantLabel) {
                  if (variantLabel) {
                    designLoadingVariantLabel.textContent = variantLabel;
                    designLoadingVariantLabel.hidden = false;
                  } else {
                    designLoadingVariantLabel.textContent = '';
                    designLoadingVariantLabel.hidden = true;
                  }
                }
                designLoadingOverlay.classList.add('is-active');
                designLoadingOverlay.setAttribute('aria-hidden', 'false');
                window.setTimeout(() => {
                  window.location.reload();
                }, 650);
                return;
              }
              window.location.reload();
              return;
            } else {
              const errorMessage = (data && data.message)
                || (adminDesignI18n.feedback && adminDesignI18n.feedback.error)
                || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
                || 'Unable to save configuration.';
              designSettingsFeedback.textContent = errorMessage;
              designSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save design settings', error);
            const fallback = (adminDesignI18n.feedback && adminDesignI18n.feedback.error)
              || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
              || 'Unable to save configuration.';
            designSettingsFeedback.textContent = fallback;
            designSettingsFeedback.classList.add('error');
          } finally {
            const label = designSettingsSubmit.dataset.originalLabel || originalLabel;
            designSettingsSubmit.textContent = label;
            designSettingsSubmit.classList.remove('is-loading');
            designSettingsSubmit.disabled = false;
            designSettingsSaving = false;
            setDesignNoticeLoading(false);
          }
        });
      }

      if (configurationSettingsForm && configurationSettingsSubmit && configurationSettingsFeedback) {
        configurationSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          const selectedDefaultLanguage = normalizeLanguageCode(
            configurationDefaultLanguageSelect instanceof HTMLSelectElement
              ? configurationDefaultLanguageSelect.value
              : defaultLanguageCode
          );
          const autoDetectEnabled = configurationAutoDetectToggle instanceof HTMLInputElement
            ? configurationAutoDetectToggle.checked
            : true;

          if (selectedDefaultLanguage) {
            defaultLanguageCode = selectedDefaultLanguage;
            if (configurationLanguagesContainer) {
              configurationLanguagesContainer.dataset.defaultLanguage = defaultLanguageCode;
            }
            updateLanguageOptionsState();
          }

          const defaultLanguagePayload = selectedDefaultLanguage || defaultLanguageCode || '';

          const payload = {
            studio_card: configurationStudioToggle && configurationStudioToggle.checked ? '1' : '0',
            cards: {},
            languages_multilingual: configurationMultilingualToggle && !configurationMultilingualToggle.checked ? '0' : '1',
            languages_default: defaultLanguagePayload,
            languages_auto_detect: autoDetectEnabled ? '1' : '0',
            languages: {},
          };

          configurationCardInputs.forEach((input) => {
            if (!input || !input.dataset) {
              return;
            }
            const key = input.dataset.configurationCard;
            if (!key) {
              return;
            }
            payload.cards[key] = input.checked ? '1' : '0';
          });

          configurationLanguageInputs.forEach((input) => {
            if (!(input instanceof HTMLInputElement)) {
              return;
            }
            const code = input.dataset.languageCode || '';
            if (!code) {
              return;
            }
            payload.languages[code] = input.checked ? '1' : '0';
          });

          configurationSettingsFeedback.textContent = '';
          configurationSettingsFeedback.classList.remove('error', 'success');

          const originalLabel = configurationSettingsSubmit.textContent || '';
          if (!configurationSettingsSubmit.dataset.originalLabel) {
            configurationSettingsSubmit.dataset.originalLabel = originalLabel;
          }

          configurationSettingsSubmit.classList.add('is-loading');
          configurationSettingsSubmit.disabled = true;

          const processingLabel = (adminConfigurationI18n.feedback && adminConfigurationI18n.feedback.processing)
            || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.processing)
            || originalLabel;

          if (processingLabel) {
            configurationSettingsSubmit.textContent = processingLabel;
          }

          try {
            const response = await fetch('/admin-configuration-settings.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid configuration settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (adminConfigurationI18n.feedback && adminConfigurationI18n.feedback.saved)
                || '';
              if (successMessage) {
                configurationSettingsFeedback.textContent = successMessage;
                configurationSettingsFeedback.classList.add('success');
              }
            } else {
              const errorMessage = (data && data.message)
                || (adminConfigurationI18n.feedback && adminConfigurationI18n.feedback.error)
                || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
                || 'Unable to save configuration.';
              configurationSettingsFeedback.textContent = errorMessage;
              configurationSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save configuration settings', error);
            const fallback = (adminConfigurationI18n.feedback && adminConfigurationI18n.feedback.error)
              || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
              || 'Unable to save configuration.';
            configurationSettingsFeedback.textContent = fallback;
            configurationSettingsFeedback.classList.add('error');
          } finally {
            const label = configurationSettingsSubmit.dataset.originalLabel || originalLabel;
            configurationSettingsSubmit.textContent = label;
            configurationSettingsSubmit.classList.remove('is-loading');
            configurationSettingsSubmit.disabled = false;
          }
        });
      }

      if (notificationSettingsForm && notificationSettingsSubmit && notificationSettingsFeedback) {
        notificationSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          const enabled = notificationsEnabledInput ? notificationsEnabledInput.checked : true;
          const profileReminderActive = notificationsProfileReminderInput ? notificationsProfileReminderInput.checked : false;
          const payload = {
            notifications_enabled: enabled ? '1' : '0',
            automatic_profile_completion: enabled && profileReminderActive ? '1' : '0',
          };

          notificationSettingsFeedback.textContent = '';
          notificationSettingsFeedback.classList.remove('error', 'success');

          const originalLabel = notificationSettingsSubmit.textContent || '';
          if (!notificationSettingsSubmit.dataset.originalLabel) {
            notificationSettingsSubmit.dataset.originalLabel = originalLabel;
          }

          notificationSettingsSubmit.classList.add('is-loading');
          notificationSettingsSubmit.disabled = true;

          const processingLabel = (adminNotificationsI18n.feedback && adminNotificationsI18n.feedback.processing)
            || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.processing)
            || originalLabel;

          if (processingLabel) {
            notificationSettingsSubmit.textContent = processingLabel;
          }

          try {
            const response = await fetch('/admin-notification-settings.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid notification settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (adminNotificationsI18n.feedback && adminNotificationsI18n.feedback.saved)
                || '';
              notificationSettingsFeedback.textContent = successMessage;
              notificationSettingsFeedback.classList.add('success');
              notificationsConfig.enabled = enabled;
              notificationsConfig.profile_reminder = enabled && profileReminderActive;
              updateNotificationAutomationsState();
              updateNotificationsView();
            } else {
              const errorMessage = data && data.message
                ? data.message
                : (adminNotificationsI18n.feedback && adminNotificationsI18n.feedback.error)
                  || (t('royalties.checkout.generic_error') || 'Unable to save settings.');
              notificationSettingsFeedback.textContent = errorMessage;
              notificationSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save notification settings', error);
            const fallback = (adminNotificationsI18n.feedback && adminNotificationsI18n.feedback.error)
              || 'Unable to save settings.';
            notificationSettingsFeedback.textContent = fallback;
            notificationSettingsFeedback.classList.add('error');
          } finally {
            const label = notificationSettingsSubmit.dataset.originalLabel || originalLabel;
            notificationSettingsSubmit.textContent = label;
            notificationSettingsSubmit.classList.remove('is-loading');
            notificationSettingsSubmit.disabled = false;
          }
        });
      }

      if (notificationBroadcastForm && notificationBroadcastSubmit && notificationBroadcastFeedback) {
        notificationBroadcastForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          notificationBroadcastFeedback.textContent = '';
          notificationBroadcastFeedback.classList.remove('error', 'success');

          const originalLabel = notificationBroadcastSubmit.textContent || '';
          if (!notificationBroadcastSubmit.dataset.originalLabel) {
            notificationBroadcastSubmit.dataset.originalLabel = originalLabel;
          }

          const localeSections = Array.from(notificationBroadcastForm.querySelectorAll('[data-broadcast-locale]'));
          const translations = {};
          let hasCompleteTranslation = false;

          localeSections.forEach((section) => {
            const locale = section.dataset.locale || '';
            if (!locale) {
              return;
            }
            const titleInput = section.querySelector('[data-broadcast-title]');
            const messageInput = section.querySelector('[data-broadcast-message]');
            const actionInput = section.querySelector('[data-broadcast-action]');
            const title = titleInput && 'value' in titleInput ? titleInput.value.trim() : '';
            const message = messageInput && 'value' in messageInput ? messageInput.value.trim() : '';
            const actionLabel = actionInput && 'value' in actionInput ? actionInput.value.trim() : '';

            if (title !== '' || message !== '' || actionLabel !== '') {
              const entry = {
                title,
                message,
              };
              if (actionLabel !== '') {
                entry.action_label = actionLabel;
              }
              translations[locale] = entry;
              if (title !== '' && message !== '') {
                hasCompleteTranslation = true;
              }
            }
          });

          const broadcastI18n = adminNotificationsI18n.broadcast || {};
          const broadcastFeedback = broadcastI18n.feedback || {};

          if (!hasCompleteTranslation) {
            const missingMessage = broadcastFeedback.missing || 'Provide at least a title and message for one language.';
            notificationBroadcastFeedback.textContent = missingMessage;
            notificationBroadcastFeedback.classList.add('error');
            return;
          }

          const linkInput = notificationBroadcastForm.querySelector('[data-broadcast-link]');
          const linkValue = linkInput && 'value' in linkInput ? linkInput.value.trim() : '';

          if (linkValue !== '' && !isValidHttpUrl(linkValue)) {
            const invalidMessage = broadcastFeedback.invalid_link || 'Enter a valid URL or leave the field empty.';
            notificationBroadcastFeedback.textContent = invalidMessage;
            notificationBroadcastFeedback.classList.add('error');
            return;
          }

          notificationBroadcastSubmit.classList.add('is-loading');
          notificationBroadcastSubmit.disabled = true;

          const processingLabel = broadcastFeedback.processing
            || (adminNotificationsI18n.feedback && adminNotificationsI18n.feedback.processing)
            || originalLabel;

          if (processingLabel) {
            notificationBroadcastSubmit.textContent = processingLabel;
          }

          const payload = {
            translations,
            link_url: linkValue,
          };

          try {
            const response = await fetch('/admin-notification-broadcast.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid broadcast notification payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message || broadcastFeedback.success || '';
              notificationBroadcastFeedback.textContent = successMessage;
              notificationBroadcastFeedback.classList.add('success');
              notificationBroadcastForm.reset();

              const docLocale = (document.documentElement.lang || 'en').toLowerCase();
              let hasOpened = false;
              localeSections.forEach((section) => {
                const locale = (section.dataset.locale || '').toLowerCase();
                if (!hasOpened && (locale === docLocale || locale === 'en')) {
                  section.open = true;
                  hasOpened = true;
                } else {
                  section.open = false;
                }
              });
              if (!hasOpened && localeSections.length > 0) {
                localeSections[0].open = true;
              }
            } else {
              const errorMessage = data && data.message
                ? data.message
                : broadcastFeedback.error
                  || (t('royalties.checkout.generic_error') || 'Unable to send notification.');
              notificationBroadcastFeedback.textContent = errorMessage;
              notificationBroadcastFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to send broadcast notification', error);
            const fallback = broadcastFeedback.error || 'Unable to send notification.';
            notificationBroadcastFeedback.textContent = fallback;
            notificationBroadcastFeedback.classList.add('error');
          } finally {
            const label = notificationBroadcastSubmit.dataset.originalLabel || originalLabel;
            notificationBroadcastSubmit.textContent = label;
            notificationBroadcastSubmit.classList.remove('is-loading');
            notificationBroadcastSubmit.disabled = false;
          }
        });
      }

      if (newsletterForm && newsletterSubmit && newsletterFeedback) {
        if (!newsletterSubmit.dataset.originalLabel) {
          newsletterSubmit.dataset.originalLabel = newsletterSubmit.textContent || '';
        }

        const newsletterFeedbackMessages = adminNewsletterI18n.feedback || {};
        const defaultSender = (newsletterConfig && newsletterConfig.default_sender) || {};

        const ensureNewsletterDefaults = () => {
          if (newsletterSenderNameInput && (!newsletterSenderNameInput.value || newsletterSenderNameInput.value.trim() === '')) {
            if (defaultSender && typeof defaultSender.name === 'string' && defaultSender.name !== '') {
              newsletterSenderNameInput.value = defaultSender.name;
            }
          }
          if (newsletterSenderEmailInput && (!newsletterSenderEmailInput.value || newsletterSenderEmailInput.value.trim() === '')) {
            if (defaultSender && typeof defaultSender.email === 'string' && defaultSender.email !== '') {
              newsletterSenderEmailInput.value = defaultSender.email;
            }
          }
        };

        ensureNewsletterDefaults();
        updateNewsletterRecipientsVisibility();
        updateNewsletterTransportVisibility();

        newsletterRecipientRadios.forEach((radio) => {
          if (!(radio instanceof HTMLInputElement)) {
            return;
          }
          radio.addEventListener('change', () => {
            updateNewsletterRecipientsVisibility();
          });
        });

        if (newsletterTransportSelect) {
          newsletterTransportSelect.addEventListener('change', () => {
            updateNewsletterTransportVisibility();
          });
        }

        newsletterForm.addEventListener('submit', async (event) => {
          event.preventDefault();

          newsletterFeedback.textContent = '';
          newsletterFeedback.classList.remove('error', 'success');

          const originalLabel = newsletterSubmit.dataset.originalLabel || newsletterSubmit.textContent || '';
          const processingLabel = newsletterFeedbackMessages.processing
            || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.processing)
            || originalLabel;

          newsletterSubmit.classList.add('is-loading');
          newsletterSubmit.disabled = true;

          if (processingLabel) {
            newsletterSubmit.textContent = processingLabel;
          }

          const recipientMode = getNewsletterRecipientMode();
          const selectedRecipients = recipientMode === 'selected' && newsletterRecipientsSelect
            ? Array.from(newsletterRecipientsSelect.selectedOptions || [])
                .map((option) => {
                  const value = parseInt(option.value, 10);
                  return Number.isInteger(value) && value > 0 ? value : null;
                })
                .filter((value, index, list) => value !== null && list.indexOf(value) === index)
            : [];

          const extraEmailsRaw = newsletterExtraEmailsInput && 'value' in newsletterExtraEmailsInput
            ? newsletterExtraEmailsInput.value
            : '';
          const extraEmails = parseNewsletterEmails(extraEmailsRaw);

          const transportValue = newsletterTransportSelect && typeof newsletterTransportSelect.value === 'string'
            ? newsletterTransportSelect.value
            : 'phpmail';

          let batchSize = newsletterBatchInput && 'value' in newsletterBatchInput
            ? parseInt(newsletterBatchInput.value, 10)
            : 1;
          if (!Number.isFinite(batchSize) || batchSize <= 0) {
            batchSize = 1;
          }

          let intervalValue = newsletterIntervalValueInput && 'value' in newsletterIntervalValueInput
            ? parseInt(newsletterIntervalValueInput.value, 10)
            : 0;
          if (!Number.isFinite(intervalValue) || intervalValue < 0) {
            intervalValue = 0;
          }

          const intervalUnit = newsletterIntervalUnitSelect && typeof newsletterIntervalUnitSelect.value === 'string'
            ? newsletterIntervalUnitSelect.value
            : 'seconds';

          const payload = {
            sender_name: newsletterSenderNameInput && 'value' in newsletterSenderNameInput
              ? newsletterSenderNameInput.value.trim()
              : '',
            sender_email: newsletterSenderEmailInput && 'value' in newsletterSenderEmailInput
              ? newsletterSenderEmailInput.value.trim()
              : '',
            reply_to: newsletterReplyToInput && 'value' in newsletterReplyToInput
              ? newsletterReplyToInput.value.trim()
              : '',
            subject: newsletterSubjectInput && 'value' in newsletterSubjectInput
              ? newsletterSubjectInput.value.trim()
              : '',
            html: newsletterHtmlInput && 'value' in newsletterHtmlInput ? newsletterHtmlInput.value : '',
            text: newsletterTextInput && 'value' in newsletterTextInput ? newsletterTextInput.value : '',
            recipient_mode: recipientMode,
            recipients: selectedRecipients,
            extra_emails: extraEmails,
            transport: transportValue,
            batch_size: batchSize,
            interval_value: intervalValue,
            interval_unit: intervalUnit,
          };

          if (transportValue === 'smtp') {
            let smtpPort = newsletterSmtpPortInput && 'value' in newsletterSmtpPortInput
              ? parseInt(newsletterSmtpPortInput.value, 10)
              : 0;
            if (!Number.isFinite(smtpPort) || smtpPort < 0) {
              smtpPort = 0;
            }

            payload.smtp = {
              host: newsletterSmtpHostInput && 'value' in newsletterSmtpHostInput
                ? newsletterSmtpHostInput.value.trim()
                : '',
              port: smtpPort,
              encryption: newsletterSmtpEncryptionSelect && typeof newsletterSmtpEncryptionSelect.value === 'string'
                ? newsletterSmtpEncryptionSelect.value
                : 'tls',
              username: newsletterSmtpUsernameInput && 'value' in newsletterSmtpUsernameInput
                ? newsletterSmtpUsernameInput.value.trim()
                : '',
              password: newsletterSmtpPasswordInput && 'value' in newsletterSmtpPasswordInput
                ? newsletterSmtpPasswordInput.value
                : '',
            };
          }

          try {
            const response = await fetch('/admin-newsletter-send.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid newsletter payload', error, responseText);
              }
            }

            if (response.ok && data && (data.status === 'success' || data.status === 'partial')) {
              const statusKey = data.status === 'partial' ? 'partial' : 'success';
              let message = data.message
                || newsletterFeedbackMessages[statusKey]
                || (statusKey === 'partial'
                  ? 'Newsletter sent with some delivery issues.'
                  : 'Newsletter sent successfully.');

              if (Array.isArray(data.failures) && data.failures.length > 0) {
                message = `${message} ${data.failures.join(' ')}`;
              }

              newsletterFeedback.textContent = message;
              if (data.status === 'partial') {
                newsletterFeedback.classList.add('error');
              } else {
                newsletterFeedback.classList.add('success');
              }
            } else {
              const errors = data && Array.isArray(data.errors) ? data.errors : [];
              let errorMessage = data && data.message
                ? data.message
                : newsletterFeedbackMessages.error
                  || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
                  || 'Unable to send the newsletter.';

              if (errors.length > 0) {
                errorMessage = `${errorMessage} ${errors.join(' ')}`;
              }

              newsletterFeedback.textContent = errorMessage;
              newsletterFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to send newsletter', error);
            const fallback = newsletterFeedbackMessages.error
              || (DASHBOARD_I18N.admin && DASHBOARD_I18N.admin.feedback && DASHBOARD_I18N.admin.feedback.error)
              || 'Unable to send the newsletter.';
            newsletterFeedback.textContent = fallback;
            newsletterFeedback.classList.add('error');
          } finally {
            const label = newsletterSubmit.dataset.originalLabel || originalLabel;
            newsletterSubmit.textContent = label;
            newsletterSubmit.classList.remove('is-loading');
            newsletterSubmit.disabled = false;
            ensureNewsletterDefaults();
            updateNewsletterTransportVisibility();
            updateNewsletterRecipientsVisibility();
          }
        });
      }

      if (distributionSettingsForm && distributionSettingsSubmit && distributionSettingsFeedback) {
        distributionSettingsForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          const formData = new FormData(distributionSettingsForm);
          const providerValue = formData.get('distribution_provider');
          const baseUrlValue = formData.get('sonosuite_base_url');
          const secretValue = formData.get('sonosuite_shared_secret');
          const provider = typeof providerValue === 'string' ? providerValue.trim() : '';
          const payload = {
            distribution_provider: provider,
            sonosuite_base_url: '',
            sonosuite_shared_secret: '',
          };

          if (provider === 'sonosuite') {
            payload.sonosuite_base_url = typeof baseUrlValue === 'string' ? baseUrlValue.trim() : '';
            payload.sonosuite_shared_secret = typeof secretValue === 'string' ? secretValue.trim() : '';
          }

          distributionSettingsFeedback.textContent = '';
          distributionSettingsFeedback.classList.remove('error', 'success');

          const originalLabel = distributionSettingsSubmit.textContent || '';
          if (!distributionSettingsSubmit.dataset.originalLabel) {
            distributionSettingsSubmit.dataset.originalLabel = originalLabel;
          }

          distributionSettingsSubmit.classList.add('is-loading');
          distributionSettingsSubmit.disabled = true;

          const processingLabel = (DASHBOARD_I18N.distribution && DASHBOARD_I18N.distribution.feedback && DASHBOARD_I18N.distribution.feedback.processing)
            || t('admin.feedback.processing')
            || originalLabel;

          if (processingLabel) {
            distributionSettingsSubmit.textContent = processingLabel;
          }

          try {
            const response = await fetch('/admin-distribution-settings.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify(payload)
            });

            const responseText = await response.text();
            let data = null;

            if (responseText) {
              try {
                data = JSON.parse(responseText);
              } catch (error) {
                console.error('Invalid distribution settings payload', error, responseText);
              }
            }

            if (response.ok && data && data.status === 'success') {
              const successMessage = data.message
                || (DASHBOARD_I18N.distribution && DASHBOARD_I18N.distribution.feedback && DASHBOARD_I18N.distribution.feedback.saved)
                || '';
              distributionSettingsFeedback.textContent = successMessage;
              distributionSettingsFeedback.classList.add('success');
            } else {
              const errorMessage = data && data.message
                ? data.message
                : (DASHBOARD_I18N.distribution && DASHBOARD_I18N.distribution.feedback && DASHBOARD_I18N.distribution.feedback.error)
                  || (t('royalties.checkout.generic_error') || 'Unable to save settings.');
              distributionSettingsFeedback.textContent = errorMessage;
              distributionSettingsFeedback.classList.add('error');
            }
          } catch (error) {
            console.error('Unable to save distribution settings', error);
            const fallback = (DASHBOARD_I18N.distribution && DASHBOARD_I18N.distribution.feedback && DASHBOARD_I18N.distribution.feedback.error)
              || 'Unable to save settings.';
            distributionSettingsFeedback.textContent = fallback;
            distributionSettingsFeedback.classList.add('error');
          } finally {
            const label = distributionSettingsSubmit.dataset.originalLabel || originalLabel;
            distributionSettingsSubmit.textContent = label;
            distributionSettingsSubmit.classList.remove('is-loading');
            distributionSettingsSubmit.disabled = false;
          }
        });
      }

      if (stopImpersonatingButton) {
        const defaultLabel = stopImpersonatingButton.dataset.labelDefault || stopImpersonatingButton.textContent || '';
        const processingLabel = stopImpersonatingButton.dataset.labelProcessing || defaultLabel;
        const redirectTarget = stopImpersonatingButton.dataset.redirect || '/dashboard.php';
        const processingMessage = impersonationBanner?.dataset.processingMessage || '';
        const errorMessage = impersonationBanner?.dataset.errorMessage || '';
        const activeMessage = impersonationBanner?.dataset.activeMessage || '';

        stopImpersonatingButton.addEventListener('click', async () => {
          if (stopImpersonatingButton.disabled) {
            return;
          }

          stopImpersonatingButton.disabled = true;
          stopImpersonatingButton.textContent = processingLabel;

          if (impersonationMessage && processingMessage) {
            impersonationMessage.textContent = processingMessage;
          }

          let payload = null;

          try {
            const response = await fetch('/admin-user-action.php', {
              method: 'POST',
              credentials: 'same-origin',
              headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              },
              body: JSON.stringify({
                action: 'stop_impersonating'
              })
            });

            const responseText = await response.text();

            if (responseText) {
              try {
                payload = JSON.parse(responseText);
              } catch (parseError) {
                console.error('Unexpected response when stopping impersonation.', parseError, responseText);
              }
            }

            if (payload && payload.reason === 'blocked') {
              window.location.href = '/blocked.php';
              return;
            }

            if (!response.ok || !payload || payload.status !== 'success') {
              const message = payload && payload.message ? String(payload.message) : '';
              throw new Error(message || '');
            }

            const redirectUrl = payload.redirect && typeof payload.redirect === 'string' && payload.redirect !== ''
              ? payload.redirect
              : redirectTarget;

            window.location.href = redirectUrl || '/dashboard.php';
          } catch (error) {
            console.error(error);
            stopImpersonatingButton.disabled = false;
            stopImpersonatingButton.textContent = defaultLabel;
            if (impersonationMessage) {
              if (errorMessage) {
                impersonationMessage.textContent = errorMessage;
              } else if (error instanceof Error && error.message) {
                impersonationMessage.textContent = error.message;
              } else if (activeMessage) {
                impersonationMessage.textContent = activeMessage;
              }
            }
          }
        });
      }

      const activateAdminTab = (value, shouldFocus = false) => {
        if (!value || adminTabs.length === 0 || adminPanels.length === 0) {
          return;
        }

        let activeTab = null;

        adminTabs.forEach((tab) => {
          const isActive = tab.dataset.adminTab === value;
          tab.classList.toggle('is-active', isActive);
          tab.setAttribute('aria-selected', isActive ? 'true' : 'false');
          tab.setAttribute('tabindex', isActive ? '0' : '-1');
          if (isActive) {
            activeTab = tab;
          }
        });

        adminPanels.forEach((panel) => {
          const isActive = panel.dataset.adminPanel === value;
          panel.classList.toggle('is-active', isActive);
          panel.hidden = !isActive;
          panel.setAttribute('aria-hidden', isActive ? 'false' : 'true');
        });
        if (activeTab) {
          persistAdminActiveTab(activeTab.dataset.adminTab || '');
          if (shouldFocus) {
            activeTab.focus();
          }
        } else {
          persistAdminActiveTab('');
        }
      };

      if (adminTabs.length > 0 && adminPanels.length > 0) {
        if (adminSection) {
          adminSection.setAttribute('data-tabs-ready', 'true');
        }

        const defaultTab = adminTabs.find((tab) => tab.classList.contains('is-active')) || adminTabs[0];
        const storedAdminTab = getStoredAdminActiveTab();
        if (storedAdminTab) {
          activateAdminTab(storedAdminTab);
        } else if (defaultTab) {
          activateAdminTab(defaultTab.dataset.adminTab || '');
        }

        adminTabs.forEach((tab, index) => {
          tab.addEventListener('click', () => {
            activateAdminTab(tab.dataset.adminTab || '');
          });

          tab.addEventListener('keydown', (event) => {
            if (!(event instanceof KeyboardEvent)) {
              return;
            }

            let nextIndex = index;

            if (event.key === 'ArrowRight' || event.key === 'ArrowDown') {
              event.preventDefault();
              nextIndex = (index + 1) % adminTabs.length;
              activateAdminTab(adminTabs[nextIndex].dataset.adminTab || '', true);
            } else if (event.key === 'ArrowLeft' || event.key === 'ArrowUp') {
              event.preventDefault();
              nextIndex = (index - 1 + adminTabs.length) % adminTabs.length;
              activateAdminTab(adminTabs[nextIndex].dataset.adminTab || '', true);
            } else if (event.key === 'Home') {
              event.preventDefault();
              activateAdminTab(adminTabs[0].dataset.adminTab || '', true);
            } else if (event.key === 'End') {
              event.preventDefault();
              activateAdminTab(adminTabs[adminTabs.length - 1].dataset.adminTab || '', true);
            }
          });
        });
      }

      if (adminSection) {
        adminSection.addEventListener('click', (event) => {
          if (!(event.target instanceof Element)) {
            return;
          }

          const detailTrigger = event.target.closest('[data-user-detail-trigger]');
          if (detailTrigger) {
            event.preventDefault();
            showUserDetails(detailTrigger);
            return;
          }

          const actionButton = event.target.closest('.admin-action');

          if (!actionButton || actionButton.disabled) {
            return;
          }

          const container = actionButton.closest('.admin-actions');
          const action = actionButton.dataset.action;

          if (!container || !action) {
            return;
          }

          let confirmed = true;

          if (action === 'delete') {
            confirmed = window.confirm(t('admin.confirm.delete'));
          } else if (action === 'block') {
            confirmed = window.confirm(t('admin.confirm.block'));
          } else if (action === 'unblock') {
            confirmed = window.confirm(t('admin.confirm.unblock'));
          } else if (action === 'impersonate') {
            confirmed = window.confirm(t('admin.confirm.impersonate'));
          }

          if (!confirmed) {
            return;
          }

          handleAdminAction(container, actionButton);
        });
      }

      if (userDetailModalContent && userDetailBackButton) {
        userDetailModalContent.addEventListener('scroll', updateUserModalBackPosition, { passive: true });
      }

      if (userDetailModal) {
        userDetailModal.addEventListener('click', (event) => {
          if (!(event.target instanceof Element)) {
            return;
          }

          const backTrigger = event.target.closest('[data-user-modal-back]');
          if (backTrigger && userDetailActiveView === 'logins') {
            event.preventDefault();
            setUserModalView('details');
            if (userDetailLoginsButton && !userDetailLoginsButton.hidden) {
              userDetailLoginsButton.focus();
            }
            return;
          }

          const historyTrigger = event.target.closest('[data-user-modal-logins-trigger]');
          if (historyTrigger && !historyTrigger.hidden && !historyTrigger.disabled) {
            event.preventDefault();
            const userIdValue = historyTrigger.dataset.userId || userDetailModal.dataset.userId || '';
            const userId = Number.parseInt(userIdValue, 10);
            if (!Number.isNaN(userId) && userId > 0) {
              const meta = {
                display_name: historyTrigger.dataset.userName || userDetailModal.dataset.userDisplayName || '',
                email: historyTrigger.dataset.userEmail || userDetailModal.dataset.userEmail || ''
              };
              showLoginHistory(userId, meta);
            }
          }
        });
      }

      if (profileLanguageSelect) {
        profileLanguageSelect.addEventListener('change', () => {
          const selectedLanguage = profileLanguageSelect.value;

          if (!selectedLanguage || selectedLanguage === profileCurrentLanguage) {
            return;
          }

          const languageUrl = new URL('/set-language.php', window.location.href);
          languageUrl.searchParams.set('language', selectedLanguage);
          window.location.href = languageUrl.toString();
        });
      }

      if (profileCurrencySelect) {
        profileCurrencySelect.addEventListener('change', () => {
          if (!profileCurrencySelect) {
            return;
          }
          const selectedCurrency = profileCurrencySelect.value;
          if (selectedCurrency) {
            profileCurrentCurrency = selectedCurrency;
          }
        });
      }

      if (profileForm) {
        profileForm.addEventListener('submit', async (event) => {
          event.preventDefault();
          showFeedback(t('profile.feedback.saving'));
          profileSubmit.disabled = true;
          const originalLabel = profileSubmit.textContent;
          profileSubmit.textContent = t('profile.submit_processing') || originalLabel;

          const formData = new FormData(profileForm);

          if (pendingAvatarFile) {
            formData.set('avatar', pendingAvatarFile, pendingAvatarFile.name || 'avatar.jpg');
          }

          try {
            const response = await fetch('/profile-update.php', {
              method: 'POST',
              body: formData,
              credentials: 'same-origin',
              headers: {
                'X-Requested-With': 'XMLHttpRequest'
              }
            });

            const responseText = await response.text();
            let payload = null;

            if (responseText) {
              try {
                payload = JSON.parse(responseText);
              } catch (parseError) {
                console.error(t('js.unexpected_profile') || 'Unexpected response when updating the profile.', parseError, responseText);
              }
            }

            if (payload && payload.reason === 'blocked') {
              window.location.href = '/blocked.php';
              return;
            }

            if (!response.ok) {
              const messages = [];
              if (payload && payload.errors) {
                Object.values(payload.errors).forEach((message) => {
                  messages.push(String(message));
                });
              }
              const fallback = payload && payload.message ? String(payload.message) : '';
              showFeedback(messages.join(' ') || fallback || t('profile.feedback.profile_error'), true);
              return;
            }

            if (!payload) {
              resetAvatarInput();
              showFeedback(t('profile.feedback.profile_refresh'));
              setTimeout(() => {
                window.location.reload();
              }, 1000);
              return;
            }

            if (payload.status !== 'success') {
              const messages = [];
              if (payload.errors) {
                Object.values(payload.errors).forEach((message) => {
                  messages.push(String(message));
                });
              }
              const fallback = payload.message ? String(payload.message) : '';
              showFeedback(messages.join(' ') || fallback || t('profile.feedback.profile_error'), true);
              return;
            }

            const user = payload.user || null;

            if (!user) {
              resetAvatarInput();
              showFeedback(t('profile.feedback.profile_refresh'));
              setTimeout(() => {
                window.location.reload();
              }, 1000);
              return;
            }

            const initial = user.initial || '';
            const color = user.avatar_color || '#6366f1';
            revokePreviewUrl();

            if (avatarPreview) {
              avatarPreview.dataset.initial = initial;
              avatarPreview.style.setProperty('--avatar-color', color);
            }

            if (profileAvatar) {
              profileAvatar.style.setProperty('--avatar-color', color);
            }

            if (user.avatar_path) {
              updatePreviewWithImage(user.avatar_path, color);
              applyAvatarImage(user.avatar_path, color);
              removeAvatarInput.value = '0';
            } else {
              updatePreviewWithInitial(initial, color);
              applyAvatarInitial(initial, color);
              removeAvatarInput.value = '0';
            }

            resetAvatarInput();

            if (profileName) {
              profileName.textContent = user.full_name || '';
            }

            if (profileRole) {
              profileRole.textContent = user.role_label || '';
            }

            const newLanguageCode = typeof user.language === 'string' && user.language ? user.language : null;
            const newLanguageDirection = typeof user.language_direction === 'string' && user.language_direction ? user.language_direction : 'ltr';

            const previousLanguage = profileCurrentLanguage;
            const previousCurrency = profileCurrentCurrency;
            const newCurrencyCode = typeof user.currency === 'string' && user.currency ? user.currency : null;

            if (profileLanguageSelect) {
              if (newLanguageCode) {
                profileLanguageSelect.value = newLanguageCode;
                profileLanguageSelect.setAttribute('lang', newLanguageCode);
              }
              profileLanguageSelect.setAttribute('dir', newLanguageDirection);
            }

            if (profileCurrencySelect && newCurrencyCode) {
              profileCurrencySelect.value = newCurrencyCode;
            }

            if (addressLine1Input) {
              addressLine1Input.value = user.address_line1 || '';
            }
            if (addressLine2Input) {
              addressLine2Input.value = user.address_line2 || '';
            }
            if (postalCodeInput) {
              postalCodeInput.value = user.postal_code || '';
            }
            if (cityInput) {
              cityInput.value = user.city || '';
            }
            if (phoneNumberInput) {
              phoneNumberInput.value = user.phone_number || '';
            }
            if (companyNameInput) {
              companyNameInput.value = user.company_name || '';
            }
            if (companyVatInput) {
              companyVatInput.value = user.company_vat || '';
            }
            if (businessTypeSelect) {
              const businessType = typeof user.company_type === 'string' && user.company_type ? user.company_type : 'individual';
              businessTypeSelect.value = businessType;
            }
            updateCompanyFieldsVisibility();

            if (newLanguageCode) {
              document.documentElement.lang = newLanguageCode;
            }
            document.documentElement.dir = newLanguageDirection;

            if (newLanguageCode && newLanguageCode !== (previousLanguage || '')) {
              profileCurrentLanguage = newLanguageCode;
              const languageUrl = new URL('/set-language.php', window.location.href);
              languageUrl.searchParams.set('language', newLanguageCode);
              window.location.href = languageUrl.toString();
              return;
            }

            if (newLanguageCode) {
              profileCurrentLanguage = newLanguageCode;
            }

            if (newCurrencyCode && newCurrencyCode !== (previousCurrency || '')) {
              profileCurrentCurrency = newCurrencyCode;
              window.location.reload();
              return;
            }

            if (newCurrencyCode) {
              profileCurrentCurrency = newCurrencyCode;
            }

            if (welcomeTitle) {
              welcomeTitle.textContent = t('profile.welcome_template', { name: user.first_name || '' }) || welcomeTitle.textContent;
            }

            showFeedback(payload.message || t('profile.feedback.profile_success'));

            if (!isInlinePanel()) {
              setTimeout(() => {
                setPanel(false);
              }, 1200);
            }
          } catch (error) {
            console.error(error);
            showFeedback(t('profile.feedback.unexpected_error'), true);
          } finally {
            profileSubmit.disabled = false;
            profileSubmit.textContent = originalLabel;
          }
        });
      }
    })();
  </script>
  <?= render_flash_notifications($flashMessages) ?>
</body>
    </html>
